"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTypes = exports.CustomTypeSM = void 0;
const validators_1 = require("@prismicio/types-internal/lib/validators");
const io_ts_types_1 = require("io-ts-types");
const t = __importStar(require("io-ts"));
const Tab_1 = require("./Tab");
const customtypes_1 = require("@prismicio/types-internal/lib/customtypes");
const Either_1 = require("fp-ts/lib/Either");
exports.CustomTypeSM = t.exact(t.intersection([
    t.type({
        id: t.string,
        label: validators_1.StringOrNull,
        repeatable: (0, io_ts_types_1.withFallback)(t.boolean, true),
        tabs: t.array(Tab_1.TabSM),
        status: (0, io_ts_types_1.withFallback)(t.boolean, true),
    }),
    t.partial({
        hash: t.string,
    }),
]));
exports.CustomTypes = {
    toSM(ct) {
        const tabs = Object.entries(ct.json).map(([tabKey, tabValue]) => Tab_1.Tabs.toSM(tabKey, tabValue));
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while parsing a prismic custom type.");
        })(exports.CustomTypeSM.decode({
            ...ct,
            tabs,
        }));
    },
    fromSM(ct) {
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while parsing an SM custom type.");
        })(customtypes_1.CustomType.decode({
            ...ct,
            json: ct.tabs.reduce((acc, tab) => {
                return {
                    ...acc,
                    [tab.key]: Tab_1.Tabs.fromSM(tab),
                };
            }, {}),
        }));
    },
};
__exportStar(require("./Tab"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL0N1c3RvbVR5cGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHlFQUF3RTtBQUN4RSw2Q0FBMkM7QUFDM0MseUNBQTJCO0FBQzNCLCtCQUFvQztBQUNwQywyRUFBdUU7QUFDdkUsNkNBQThDO0FBRWpDLFFBQUEsWUFBWSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQ2pDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDYixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0wsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ1osS0FBSyxFQUFFLHlCQUFZO1FBQ25CLFVBQVUsRUFBRSxJQUFBLDBCQUFZLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7UUFDekMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBSyxDQUFDO1FBQ3BCLE1BQU0sRUFBRSxJQUFBLDBCQUFZLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7S0FDdEMsQ0FBQztJQUNGLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDUixJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU07S0FDZixDQUFDO0NBQ0gsQ0FBQyxDQUNILENBQUM7QUFHVyxRQUFBLFdBQVcsR0FBRztJQUN6QixJQUFJLENBQUMsRUFBYztRQUNqQixNQUFNLElBQUksR0FBaUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUNwRCxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FDcEQsQ0FBQztRQUNGLE9BQU8sSUFBQSxtQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQ0Esb0JBQVksQ0FBQyxNQUFNLENBQUM7WUFDbEIsR0FBRyxFQUFFO1lBQ0wsSUFBSTtTQUNMLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFnQjtRQUNyQixPQUFPLElBQUEsbUJBQVUsRUFBQyxHQUFHLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUNBLHdCQUFVLENBQUMsTUFBTSxDQUFDO1lBQ2hCLEdBQUcsRUFBRTtZQUNMLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDaEMsT0FBTztvQkFDTCxHQUFHLEdBQUc7b0JBQ04sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7aUJBQzVCLENBQUM7WUFDSixDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ1AsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQztBQUVGLHdDQUFzQiJ9