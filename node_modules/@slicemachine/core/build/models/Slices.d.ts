import * as t from "io-ts";
import { DynamicSlices } from "@prismicio/types-internal/lib/customtypes/widgets/slices/Slices";
import { WidgetTypes } from "@prismicio/types-internal/lib/customtypes/widgets";
export declare const SlicesSM: t.TypeC<{
    key: t.StringC;
    value: t.ArrayC<t.TypeC<{
        key: t.StringC;
        value: t.UnionC<[t.UnionC<[t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Color>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.BooleanField>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Embed>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.GeoPoint>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Date>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Number>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Range>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.RichText>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Select>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Separator>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Text>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Timestamp>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Link>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ArrayC<t.StringC>;
                masks: t.Type<string[], object, unknown>;
                tags: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Image>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.IntegrationField>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Group>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            icon: t.StringC;
            description: t.StringC;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                repeat: t.BooleanC;
                fields: t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Color>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.BooleanField>;
                }>, t.PartialC<{
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        default_value: t.BooleanC;
                        placeholder_true: t.StringC;
                        placeholder_false: t.StringC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Embed>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        useAsTitle: t.BooleanC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.GeoPoint>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Date>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        default: t.StringC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Number>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Range>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.RichText>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        useAsTitle: t.BooleanC;
                        single: t.Type<string, string, unknown>;
                        multi: t.Type<string, string, unknown>;
                        imageConstraint: t.PartialC<{
                            width: t.Type<number | null, unknown, unknown>;
                            height: t.Type<number | null, unknown, unknown>;
                        }>;
                        labels: t.Type<string[], object, unknown>;
                        allowTargetBlank: t.BooleanC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Select>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        default_value: t.StringC;
                        options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Separator>;
                }>, t.PartialC<{
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Text>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        useAsTitle: t.BooleanC;
                        placeholder: t.StringC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Timestamp>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        default: t.StringC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Link>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        useAsTitle: t.BooleanC;
                        placeholder: t.StringC;
                        select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                        customtypes: t.ArrayC<t.StringC>;
                        masks: t.Type<string[], object, unknown>;
                        tags: t.Type<string[], object, unknown>;
                        allowTargetBlank: t.BooleanC;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.Image>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        constraint: t.PartialC<{
                            width: t.Type<number | null, unknown, unknown>;
                            height: t.Type<number | null, unknown, unknown>;
                        }>;
                        thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                            name: t.StringC;
                        }>, t.PartialC<{
                            width: t.Type<number | null, unknown, unknown>;
                            height: t.Type<number | null, unknown, unknown>;
                        }>]>>>;
                    }>>;
                }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                    type: t.LiteralC<WidgetTypes.IntegrationField>;
                }>, t.PartialC<{
                    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    config: t.ExactC<t.PartialC<{
                        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                        placeholder: t.StringC;
                        catalog: t.StringC;
                    }>>;
                }>]>>]>>;
            }>>;
        }>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<import("@prismicio/types-internal/lib/customtypes/widgets/slices/SlicesTypes").default.Slice>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            description: t.StringC;
            icon: t.StringC;
            display: t.StringC;
            "non-repeat": t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Color>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.BooleanField>;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    default_value: t.BooleanC;
                    placeholder_true: t.StringC;
                    placeholder_false: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Embed>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.GeoPoint>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Date>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Number>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Range>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.RichText>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                    single: t.Type<string, string, unknown>;
                    multi: t.Type<string, string, unknown>;
                    imageConstraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    labels: t.Type<string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Select>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default_value: t.StringC;
                    options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Separator>;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Text>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Timestamp>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Link>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                    select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                    customtypes: t.ArrayC<t.StringC>;
                    masks: t.Type<string[], object, unknown>;
                    tags: t.Type<string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Image>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    constraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                        name: t.StringC;
                    }>, t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>]>>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.IntegrationField>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    catalog: t.StringC;
                }>>;
            }>]>>]>>;
            repeat: t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Color>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.BooleanField>;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    default_value: t.BooleanC;
                    placeholder_true: t.StringC;
                    placeholder_false: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Embed>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.GeoPoint>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Date>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Number>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Range>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                    step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.RichText>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    useAsTitle: t.BooleanC;
                    single: t.Type<string, string, unknown>;
                    multi: t.Type<string, string, unknown>;
                    imageConstraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    labels: t.Type<string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Select>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default_value: t.StringC;
                    options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Separator>;
            }>, t.PartialC<{
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Text>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Timestamp>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    default: t.StringC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Link>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    useAsTitle: t.BooleanC;
                    placeholder: t.StringC;
                    select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                    customtypes: t.ArrayC<t.StringC>;
                    masks: t.Type<string[], object, unknown>;
                    tags: t.Type<string[], object, unknown>;
                    allowTargetBlank: t.BooleanC;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.Image>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    constraint: t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>;
                    thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                        name: t.StringC;
                    }>, t.PartialC<{
                        width: t.Type<number | null, unknown, unknown>;
                        height: t.Type<number | null, unknown, unknown>;
                    }>]>>>;
                }>>;
            }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
                type: t.LiteralC<WidgetTypes.IntegrationField>;
            }>, t.PartialC<{
                fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                config: t.ExactC<t.PartialC<{
                    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                    placeholder: t.StringC;
                    catalog: t.StringC;
                }>>;
            }>]>>]>>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.TypeC<{
            type: t.LiteralC<import("@prismicio/types-internal/lib/customtypes/widgets/slices/SlicesTypes").default.SharedSlice>;
        }>>]>;
    }>>;
}>;
export declare type SlicesSM = t.TypeOf<typeof SlicesSM>;
export declare const SliceZone: {
    fromSM(slices: SlicesSM): DynamicSlices;
    toSM(key: string, slices: DynamicSlices): SlicesSM;
};
