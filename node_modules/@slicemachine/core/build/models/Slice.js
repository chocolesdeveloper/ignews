"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Slices = exports.Variations = exports.SliceSM = exports.SliceMock = exports.VariationMock = exports.VariationSM = exports.WidgetsArea = void 0;
const t = __importStar(require("io-ts"));
const slices_1 = require("@prismicio/types-internal/lib/customtypes/widgets/slices");
const Either_1 = require("fp-ts/lib/Either");
const Fields_1 = require("./Fields");
var WidgetsArea;
(function (WidgetsArea) {
    WidgetsArea["Primary"] = "primary";
    WidgetsArea["Items"] = "items";
})(WidgetsArea = exports.WidgetsArea || (exports.WidgetsArea = {}));
exports.VariationSM = t.intersection([
    t.type({
        id: t.string,
        name: t.string,
        description: t.string,
        docURL: t.string,
        version: t.string,
    }),
    t.partial({
        imageUrl: t.string,
        primary: Fields_1.FieldsSM,
        items: Fields_1.FieldsSM,
        display: t.string,
    }),
]);
exports.VariationMock = t.type({
    variation: t.string,
    name: t.string,
    slice_type: t.string,
    items: t.array(t.unknown),
    primary: t.record(t.string, t.unknown),
});
exports.SliceMock = t.array(exports.VariationMock);
exports.SliceSM = t.intersection([
    t.type({
        id: t.string,
        type: t.literal(slices_1.SlicesTypes.SharedSlice),
        name: t.string,
        variations: t.array(exports.VariationSM),
    }),
    t.partial({
        description: t.string,
    }),
]);
exports.Variations = {
    fromSM(variation) {
        var _a, _b;
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while parsing an SM slice variation.");
        })(slices_1.Variation.decode({
            ...variation,
            primary: (_a = variation.primary) === null || _a === void 0 ? void 0 : _a.reduce((acc, { key, value }) => ({ ...acc, [key]: value }), {}),
            items: (_b = variation.items) === null || _b === void 0 ? void 0 : _b.reduce((acc, { key, value }) => ({ ...acc, [key]: value }), {}),
        }));
    },
    toSM(variation) {
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while parsing a prismic slice variation.");
        })(exports.VariationSM.decode({
            ...variation,
            primary: Object.entries(variation.primary || {}).map(([key, value]) => ({
                key,
                value,
            })),
            items: Object.entries(variation.items || {}).map(([key, value]) => ({
                key,
                value,
            })),
        }));
    },
};
exports.Slices = {
    fromSM(slice) {
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while prismic an SM prismic slice");
        })(slices_1.SharedSlice.decode({
            ...slice,
            variations: slice.variations.map(exports.Variations.fromSM),
        }));
    },
    toSM(slice) {
        return (0, Either_1.getOrElseW)(() => {
            throw new Error("Error while prismic a prismic slice");
        })(exports.SliceSM.decode({
            ...slice,
            variations: slice.variations.map(exports.Variations.toSM),
        }));
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL1NsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBMkI7QUFFM0IscUZBSWtFO0FBQ2xFLDZDQUE4QztBQUM5QyxxQ0FBb0M7QUFFcEMsSUFBWSxXQUdYO0FBSEQsV0FBWSxXQUFXO0lBQ3JCLGtDQUFtQixDQUFBO0lBQ25CLDhCQUFlLENBQUE7QUFDakIsQ0FBQyxFQUhXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBR3RCO0FBRVksUUFBQSxXQUFXLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0wsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ1osSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ2QsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNO1FBQ3JCLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTtRQUNoQixPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU07S0FDbEIsQ0FBQztJQUNGLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDUixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU07UUFDbEIsT0FBTyxFQUFFLGlCQUFRO1FBQ2pCLEtBQUssRUFBRSxpQkFBUTtRQUNmLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTTtLQUNsQixDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBR1UsUUFBQSxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDbkIsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ2QsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNO0lBQ3BCLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDekIsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFN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