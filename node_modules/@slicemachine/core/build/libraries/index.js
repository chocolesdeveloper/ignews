"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryMeta = exports.libraries = exports.handleLibraryPath = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const t = __importStar(require("io-ts"));
const Either_1 = require("fp-ts/lib/Either");
const node_utils_1 = require("../node-utils");
const path_2 = require("./path");
const component_1 = require("./component");
__exportStar(require("./component"), exports);
__exportStar(require("./screenshot"), exports);
__exportStar(require("./path"), exports);
__exportStar(require("./mocks"), exports);
function handleLibraryPath(cwd, libPath) {
    const { from, isLocal, pathExists, pathToSlices, pathToLib } = (0, path_2.getInfoFromPath)(cwd, libPath);
    if (!pathExists) {
        return;
    }
    const pathsToComponents = node_utils_1.Files.readDirectory(pathToSlices.split(path_1.default.sep).join(path_1.default.posix.sep))
        .map((curr) => path_1.default.join(pathToSlices, curr))
        .filter((e) => {
        const f = e.split(path_1.default.sep).pop();
        return fs_1.default.lstatSync(e).isDirectory() && !(f === null || f === void 0 ? void 0 : f.startsWith("."));
    });
    const pathToSlice = `${isLocal ? "./" : ""}${from}${pathToSlices
        .split(from)
        .slice(1)
        .join("")}`;
    const allComponents = pathsToComponents.reduce((acc, curr) => {
        const componentInfo = (0, component_1.getComponentInfo)(curr, [cwd, path_1.default.join(cwd, ".slicemachine/assets")], from);
        if (!componentInfo) {
            return acc;
        }
        const { model } = componentInfo;
        return [
            ...acc,
            {
                from,
                href: from.replace(/\//g, "--"),
                pathToSlice,
                fileName: componentInfo.fileName,
                extension: componentInfo.extension,
                screenshotPaths: componentInfo.screenshotPaths,
                mock: componentInfo.mock,
                model,
            },
        ];
    }, []);
    const meta = exports.LibraryMeta.build(pathToLib);
    return {
        path: pathToLib,
        isLocal,
        name: from,
        components: allComponents,
        meta,
    };
}
exports.handleLibraryPath = handleLibraryPath;
function libraries(cwd, libraries) {
    return (libraries || [])
        .map((lib) => handleLibraryPath(cwd, lib))
        .filter(Boolean);
}
exports.libraries = libraries;
exports.LibraryMeta = {
    reader: t.exact(t.partial({
        name: t.string,
        version: t.string,
    })),
    build(libPath) {
        const meta = node_utils_1.Files.safeReadEntity(path_1.default.join(libPath, "meta.json"), (payload) => {
            return (0, Either_1.getOrElseW)(() => null)(exports.LibraryMeta.reader.decode(payload));
        });
        if (!meta)
            return;
        return {
            name: meta.name,
            version: meta.version,
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGlicmFyaWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBQ3hCLHlDQUEyQjtBQUMzQiw2Q0FBOEM7QUFFOUMsOENBQXNDO0FBQ3RDLGlDQUF5QztBQUN6QywyQ0FBK0M7QUFHL0MsOENBQTRCO0FBQzVCLCtDQUE2QjtBQUM3Qix5Q0FBdUI7QUFDdkIsMENBQXdCO0FBRXhCLFNBQWdCLGlCQUFpQixDQUMvQixHQUFXLEVBQ1gsT0FBZTtJQUVmLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEdBQzFELElBQUEsc0JBQWUsRUFBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFaEMsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU87S0FDUjtJQUdELE1BQU0saUJBQWlCLEdBQUcsa0JBQUssQ0FBQyxhQUFhLENBQzNDLFlBQVksQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUNsRDtTQUNFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxPQUFPLFlBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBLENBQUMsYUFBRCxDQUFDLHVC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