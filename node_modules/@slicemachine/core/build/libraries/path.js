"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInfoFromPath = exports.getFormattedLibIdentifier = void 0;
const path_1 = __importDefault(require("path"));
const node_utils_1 = require("../node-utils");
var Prefix;
(function (Prefix) {
    Prefix["A"] = "@/";
    Prefix["B"] = "~/";
    Prefix["C"] = "/";
})(Prefix || (Prefix = {}));
const Identifiers = {
    "@/": 2,
    "~/": 2,
    "/": 1,
};
const getFormattedLibIdentifier = (libPath) => {
    const maybeIdentifier = Object.keys(Identifiers).find((e) => libPath.indexOf(e) === 0);
    const isLocal = !!maybeIdentifier;
    return {
        isLocal,
        identifier: maybeIdentifier,
        from: isLocal
            ? libPath.slice(Identifiers[maybeIdentifier])
            : libPath,
    };
};
exports.getFormattedLibIdentifier = getFormattedLibIdentifier;
function getInfoFromPath(startPath, libPath) {
    const { isLocal, from } = (0, exports.getFormattedLibIdentifier)(libPath);
    const pathToLib = path_1.default.join(startPath || process.cwd(), isLocal ? "" : "node_modules", isLocal ? libPath.substring(1, libPath.length) : libPath);
    const pathExists = node_utils_1.Files.exists(pathToLib);
    const pathToSlices = path_1.default.join(pathToLib, isLocal ? "." : "slices");
    return {
        isLocal,
        from,
        pathExists,
        pathToLib,
        pathToSlices,
    };
}
exports.getInfoFromPath = getInfoFromPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJpZXMvcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsOENBQXNDO0FBRXRDLElBQUssTUFJSjtBQUpELFdBQUssTUFBTTtJQUNULGtCQUFRLENBQUE7SUFDUixrQkFBUSxDQUFBO0lBQ1IsaUJBQU8sQ0FBQTtBQUNULENBQUMsRUFKSSxNQUFNLEtBQU4sTUFBTSxRQUlWO0FBRUQsTUFBTSxXQUFXLEdBQTJCO0lBQzFDLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSSxFQUFFLENBQUM7SUFDUCxHQUFHLEVBQUUsQ0FBQztDQUNQLENBQUM7QUFFSyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLE9BQWUsRUFLZixFQUFFO0lBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ25ELENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDaEMsQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDbEMsT0FBTztRQUNMLE9BQU87UUFDUCxVQUFVLEVBQUUsZUFBZTtRQUMzQixJQUFJLEVBQUUsT0FBTztZQUNYLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxlQUF5QixDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLE9BQU87S0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbEJXLFFBQUEseUJBQXlCLDZCQWtCcEM7QUFFRixTQUFnQixlQUFlLENBQzdCLFNBQWlCLEVBQ2pCLE9BQWU7SUFRZixNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEsaUNBQXlCLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0QsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FDekIsU0FBUyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFDMUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDekQsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHLGtCQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sWUFBWSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwRSxPQUFPO1FBQ0wsT0FBTztRQUNQLElBQUk7UUFDSixVQUFVO1FBQ1YsU0FBUztRQUNULFlBQVk7S0FDYixDQUFDO0FBQ0osQ0FBQztBQTNCRCwwQ0EyQkMifQ==