import * as t from "io-ts";
import { VariationMock } from "./Variation";
import { SliceAsObject } from "./Slice";
export interface ComponentInfo {
    sliceName: string;
    fileName: string | null;
    isDirectory: boolean;
    extension: string | null;
    model: SliceAsObject;
    nameConflict: {
        sliceName: string;
        id: string;
    } | null;
    screenshotPaths: {
        [variationId: string]: Screenshot;
    };
    meta: ComponentMetadata;
    mock?: ReadonlyArray<VariationMock>;
}
export declare const ComponentInfo: {
    hasPreviewsMissing(info: ComponentInfo): boolean;
};
export interface ComponentMetadata {
    id: string;
    name?: string;
    description?: string;
}
export interface Component {
    from: string;
    href: string;
    pathToSlice: string;
    infos: ComponentInfo;
    model: SliceAsObject;
    migrated: boolean;
}
export interface Screenshot {
    path: string;
}
export declare const LibraryMeta: {
    reader: t.ExactC<t.PartialC<{
        name: t.StringC;
        version: t.StringC;
    }>>;
    build(libPath: string): t.TypeOf<typeof this.reader> | undefined;
};
export declare type LibraryMeta = t.TypeOf<typeof LibraryMeta.reader>;
export interface Library<C extends Component> {
    name: string;
    path: string;
    isLocal: boolean;
    components: ReadonlyArray<C>;
    meta?: LibraryMeta;
}
