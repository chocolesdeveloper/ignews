import * as t from "io-ts";
export declare enum FieldType {
    Boolean = "Boolean",
    GeoPoint = "GeoPoint",
    Select = "Select",
    Color = "Color",
    Group = "Group",
    StructuredText = "StructuredText",
    Image = "Image",
    Text = "Text",
    Date = "Date",
    Link = "Link",
    LinkToMedia = "Link",
    ContentRelationship = "Link",
    Timestamp = "Timestamp",
    Embed = "Embed",
    Number = "Number",
    UID = "UID",
    IntegrationFields = "IntegrationFields"
}
export declare const FieldTypeCodec: t.KeyofC<{
    Boolean: null;
    GeoPoint: null;
    Select: null;
    Color: null;
    Group: null;
    StructuredText: null;
    Image: null;
    Text: null;
    Date: null;
    Link: null;
    LinkToMedia: null;
    ContentRelationship: null;
    Timestamp: null;
    Embed: null;
    Number: null;
    UID: null;
    IntegrationFields: null;
}>;
export interface SimpleField {
    label: string;
    placeholder: string;
}
export declare const SimpleField: {
    default: {
        label: string;
        placeholder: string;
    };
};
export declare const Field: t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.KeyofC<{
        Slices: null;
    }>, t.KeyofC<{
        Boolean: null;
        GeoPoint: null;
        Select: null;
        Color: null;
        Group: null;
        StructuredText: null;
        Image: null;
        Text: null;
        Date: null;
        Link: null;
        LinkToMedia: null;
        ContentRelationship: null;
        Timestamp: null;
        Embed: null;
        Number: null;
        UID: null;
        IntegrationFields: null;
    }>]>;
    config: t.UnknownC;
}>, t.PartialC<{
    fieldset: t.StringC;
}>]>;
export declare type Field = t.TypeOf<typeof Field>;
