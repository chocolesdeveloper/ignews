import * as t from "io-ts";
export declare const ComponentMocks: t.RecordC<t.StringC, t.TypeC<{
    variation: t.StringC;
    name: t.StringC;
    slice_type: t.StringC;
    items: t.ArrayC<t.UnknownC>;
    primary: t.RecordC<t.StringC, t.UnknownC>;
}>>;
export declare type ComponentMocks = t.TypeOf<typeof ComponentMocks>;
export declare const ComponentMeta: t.TypeC<{
    fileName: t.UnionC<[t.StringC, t.NullC]>;
    isDirectory: t.BooleanC;
    extension: t.UnionC<[t.StringC, t.NullC]>;
}>;
export declare type ComponentMeta = t.TypeOf<typeof ComponentMeta>;
declare const ComponentScreenshots: t.RecordC<t.StringC, t.TypeC<{
    path: t.UnionC<[t.StringC, t.UndefinedC]>;
    width: t.UnionC<[t.NumberC, t.UndefinedC]>;
    height: t.UnionC<[t.NumberC, t.UndefinedC]>;
}>>;
export declare type ComponentScreenshots = t.TypeOf<typeof ComponentScreenshots>;
export declare const Component: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    library: t.StringC;
    model: t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        type: t.LiteralC<"SharedSlice">;
        name: t.StringC;
        variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
            id: t.StringC;
            name: t.StringC;
            description: t.StringC;
            docURL: t.StringC;
            version: t.StringC;
        }>, t.PartialC<{
            imageUrl: t.StringC;
            primary: t.Type<{
                [x: string]: {
                    type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                    config: unknown;
                } & {
                    fieldset?: string | undefined;
                };
            }, {
                [x: string]: {
                    type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                    config: unknown;
                } & {
                    fieldset?: string | undefined;
                };
            }, unknown>;
            items: t.Type<{
                [x: string]: {
                    type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                    config: unknown;
                } & {
                    fieldset?: string | undefined;
                };
            }, {
                [x: string]: {
                    type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                    config: unknown;
                } & {
                    fieldset?: string | undefined;
                };
            }, unknown>;
            display: t.StringC;
        }>]>>;
    }>, t.PartialC<{
        description: t.StringC;
    }>]>;
    mocks: t.RecordC<t.StringC, t.TypeC<{
        variation: t.StringC;
        name: t.StringC;
        slice_type: t.StringC;
        items: t.ArrayC<t.UnknownC>;
        primary: t.RecordC<t.StringC, t.UnknownC>;
    }>>;
    meta: t.TypeC<{
        fileName: t.UnionC<[t.StringC, t.NullC]>;
        isDirectory: t.BooleanC;
        extension: t.UnionC<[t.StringC, t.NullC]>;
    }>;
}>, t.PartialC<{
    screenshotPaths: t.RecordC<t.StringC, t.TypeC<{
        path: t.UnionC<[t.StringC, t.UndefinedC]>;
        width: t.UnionC<[t.NumberC, t.UndefinedC]>;
        height: t.UnionC<[t.NumberC, t.UndefinedC]>;
    }>>;
    name: t.StringC;
    description: t.StringC;
}>]>;
export declare type Component = t.TypeOf<typeof Component>;
export declare const Library: t.TypeC<{
    name: t.UnionC<[t.StringC, t.UndefinedC]>;
    version: t.UnionC<[t.StringC, t.UndefinedC]>;
    components: t.RecordC<t.StringC, t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        library: t.StringC;
        model: t.IntersectionC<[t.TypeC<{
            id: t.StringC;
            type: t.LiteralC<"SharedSlice">;
            name: t.StringC;
            variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
                id: t.StringC;
                name: t.StringC;
                description: t.StringC;
                docURL: t.StringC;
                version: t.StringC;
            }>, t.PartialC<{
                imageUrl: t.StringC;
                primary: t.Type<{
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, {
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, unknown>;
                items: t.Type<{
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, {
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, unknown>;
                display: t.StringC;
            }>]>>;
        }>, t.PartialC<{
            description: t.StringC;
        }>]>;
        mocks: t.RecordC<t.StringC, t.TypeC<{
            variation: t.StringC;
            name: t.StringC;
            slice_type: t.StringC;
            items: t.ArrayC<t.UnknownC>;
            primary: t.RecordC<t.StringC, t.UnknownC>;
        }>>;
        meta: t.TypeC<{
            fileName: t.UnionC<[t.StringC, t.NullC]>;
            isDirectory: t.BooleanC;
            extension: t.UnionC<[t.StringC, t.NullC]>;
        }>;
    }>, t.PartialC<{
        screenshotPaths: t.RecordC<t.StringC, t.TypeC<{
            path: t.UnionC<[t.StringC, t.UndefinedC]>;
            width: t.UnionC<[t.NumberC, t.UndefinedC]>;
            height: t.UnionC<[t.NumberC, t.UndefinedC]>;
        }>>;
        name: t.StringC;
        description: t.StringC;
    }>]>>;
}>;
export declare type Library = t.TypeOf<typeof Library>;
export declare const Libraries: t.RecordC<t.StringC, t.TypeC<{
    name: t.UnionC<[t.StringC, t.UndefinedC]>;
    version: t.UnionC<[t.StringC, t.UndefinedC]>;
    components: t.RecordC<t.StringC, t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        library: t.StringC;
        model: t.IntersectionC<[t.TypeC<{
            id: t.StringC;
            type: t.LiteralC<"SharedSlice">;
            name: t.StringC;
            variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
                id: t.StringC;
                name: t.StringC;
                description: t.StringC;
                docURL: t.StringC;
                version: t.StringC;
            }>, t.PartialC<{
                imageUrl: t.StringC;
                primary: t.Type<{
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, {
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, unknown>;
                items: t.Type<{
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, {
                    [x: string]: {
                        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                        config: unknown;
                    } & {
                        fieldset?: string | undefined;
                    };
                }, unknown>;
                display: t.StringC;
            }>]>>;
        }>, t.PartialC<{
            description: t.StringC;
        }>]>;
        mocks: t.RecordC<t.StringC, t.TypeC<{
            variation: t.StringC;
            name: t.StringC;
            slice_type: t.StringC;
            items: t.ArrayC<t.UnknownC>;
            primary: t.RecordC<t.StringC, t.UnknownC>;
        }>>;
        meta: t.TypeC<{
            fileName: t.UnionC<[t.StringC, t.NullC]>;
            isDirectory: t.BooleanC;
            extension: t.UnionC<[t.StringC, t.NullC]>;
        }>;
    }>, t.PartialC<{
        screenshotPaths: t.RecordC<t.StringC, t.TypeC<{
            path: t.UnionC<[t.StringC, t.UndefinedC]>;
            width: t.UnionC<[t.NumberC, t.UndefinedC]>;
            height: t.UnionC<[t.NumberC, t.UndefinedC]>;
        }>>;
        name: t.StringC;
        description: t.StringC;
    }>]>>;
}>>;
export declare type Libraries = t.TypeOf<typeof Libraries>;
export {};
