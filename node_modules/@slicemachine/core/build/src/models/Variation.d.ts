import * as t from "io-ts";
export declare enum WidgetsArea {
    Primary = "primary",
    Items = "items"
}
export declare const AsArray: t.ArrayC<t.TypeC<{
    key: t.StringC;
    value: t.IntersectionC<[t.TypeC<{
        type: t.UnionC<[t.KeyofC<{
            Slices: null;
        }>, t.KeyofC<{
            Boolean: null;
            GeoPoint: null;
            Select: null;
            Color: null;
            Group: null;
            StructuredText: null;
            Image: null;
            Text: null;
            Date: null;
            Link: null;
            LinkToMedia: null;
            ContentRelationship: null;
            Timestamp: null;
            Embed: null;
            Number: null;
            UID: null;
            IntegrationFields: null;
        }>]>;
        config: t.UnknownC;
    }>, t.PartialC<{
        fieldset: t.StringC;
    }>]>;
}>>;
export declare type AsArray = t.TypeOf<typeof AsArray>;
export declare const AsObject: t.RecordC<t.StringC, t.IntersectionC<[t.TypeC<{
    type: t.UnionC<[t.KeyofC<{
        Slices: null;
    }>, t.KeyofC<{
        Boolean: null;
        GeoPoint: null;
        Select: null;
        Color: null;
        Group: null;
        StructuredText: null;
        Image: null;
        Text: null;
        Date: null;
        Link: null;
        LinkToMedia: null;
        ContentRelationship: null;
        Timestamp: null;
        Embed: null;
        Number: null;
        UID: null;
        IntegrationFields: null;
    }>]>;
    config: t.UnknownC;
}>, t.PartialC<{
    fieldset: t.StringC;
}>]>>;
export declare type AsObject = t.TypeOf<typeof AsObject>;
export declare const Variation: <T = {
    key: string;
    value: {
        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
        config: unknown;
    } & {
        fieldset?: string | undefined;
    };
}[] | {
    [x: string]: {
        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
        config: unknown;
    } & {
        fieldset?: string | undefined;
    };
}>(formatReader: t.Type<T, T, unknown>) => t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    name: t.StringC;
    description: t.StringC;
    docURL: t.StringC;
    version: t.StringC;
}>, t.PartialC<{
    imageUrl: t.StringC;
    primary: t.Type<T, T, unknown>;
    items: t.Type<T, T, unknown>;
    display: t.StringC;
}>]>;
export declare const VariationAsObject: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    name: t.StringC;
    description: t.StringC;
    docURL: t.StringC;
    version: t.StringC;
}>, t.PartialC<{
    imageUrl: t.StringC;
    primary: t.Type<{
        [x: string]: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }, {
        [x: string]: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }, unknown>;
    items: t.Type<{
        [x: string]: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }, {
        [x: string]: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }, unknown>;
    display: t.StringC;
}>]>;
export declare type VariationAsObject = t.TypeOf<typeof VariationAsObject>;
export declare const VariationAsArray: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    name: t.StringC;
    description: t.StringC;
    docURL: t.StringC;
    version: t.StringC;
}>, t.PartialC<{
    imageUrl: t.StringC;
    primary: t.Type<{
        key: string;
        value: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }[], {
        key: string;
        value: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }[], unknown>;
    items: t.Type<{
        key: string;
        value: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }[], {
        key: string;
        value: {
            type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
            config: unknown;
        } & {
            fieldset?: string | undefined;
        };
    }[], unknown>;
    display: t.StringC;
}>]>;
export declare type VariationAsArray = t.TypeOf<typeof VariationAsArray>;
export declare const VariationMock: t.TypeC<{
    variation: t.StringC;
    name: t.StringC;
    slice_type: t.StringC;
    items: t.ArrayC<t.UnknownC>;
    primary: t.RecordC<t.StringC, t.UnknownC>;
}>;
export declare type VariationMock = t.TypeOf<typeof VariationMock>;
