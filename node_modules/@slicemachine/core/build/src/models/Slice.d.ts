import * as t from "io-ts";
export declare const Slice: <T = {
    key: string;
    value: {
        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
        config: unknown;
    } & {
        fieldset?: string | undefined;
    };
}[] | {
    [x: string]: {
        type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
        config: unknown;
    } & {
        fieldset?: string | undefined;
    };
}>(formatReader: t.Type<T, T, unknown>) => t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    type: t.LiteralC<"SharedSlice">;
    name: t.StringC;
    variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        name: t.StringC;
        description: t.StringC;
        docURL: t.StringC;
        version: t.StringC;
    }>, t.PartialC<{
        imageUrl: t.StringC;
        primary: t.Type<T, T, unknown>;
        items: t.Type<T, T, unknown>;
        display: t.StringC;
    }>]>>;
}>, t.PartialC<{
    description: t.StringC;
}>]>;
export declare const SliceAsArray: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    type: t.LiteralC<"SharedSlice">;
    name: t.StringC;
    variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        name: t.StringC;
        description: t.StringC;
        docURL: t.StringC;
        version: t.StringC;
    }>, t.PartialC<{
        imageUrl: t.StringC;
        primary: t.Type<{
            key: string;
            value: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }[], {
            key: string;
            value: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }[], unknown>;
        items: t.Type<{
            key: string;
            value: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }[], {
            key: string;
            value: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }[], unknown>;
        display: t.StringC;
    }>]>>;
}>, t.PartialC<{
    description: t.StringC;
}>]>;
export declare type SliceAsArray = t.TypeOf<typeof SliceAsArray>;
export declare const SliceAsObject: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
    type: t.LiteralC<"SharedSlice">;
    name: t.StringC;
    variations: t.ArrayC<t.IntersectionC<[t.TypeC<{
        id: t.StringC;
        name: t.StringC;
        description: t.StringC;
        docURL: t.StringC;
        version: t.StringC;
    }>, t.PartialC<{
        imageUrl: t.StringC;
        primary: t.Type<{
            [x: string]: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }, {
            [x: string]: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }, unknown>;
        items: t.Type<{
            [x: string]: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }, {
            [x: string]: {
                type: "Slices" | "Boolean" | "GeoPoint" | "Select" | "Color" | "Group" | "StructuredText" | "Image" | "Text" | "Date" | "Link" | "LinkToMedia" | "ContentRelationship" | "Timestamp" | "Embed" | "Number" | "UID" | "IntegrationFields";
                config: unknown;
            } & {
                fieldset?: string | undefined;
            };
        }, unknown>;
        display: t.StringC;
    }>]>>;
}>, t.PartialC<{
    description: t.StringC;
}>]>;
export declare type SliceAsObject = t.TypeOf<typeof SliceAsObject>;
export declare const SliceMock: t.ArrayC<t.TypeC<{
    variation: t.StringC;
    name: t.StringC;
    slice_type: t.StringC;
    items: t.ArrayC<t.UnknownC>;
    primary: t.RecordC<t.StringC, t.UnknownC>;
}>>;
export declare type SliceMock = t.TypeOf<typeof SliceMock>;
