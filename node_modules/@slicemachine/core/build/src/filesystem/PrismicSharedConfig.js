"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismicSharedConfigManager = exports.DEFAULT_CONFIG = void 0;
const Either_1 = require("fp-ts/lib/Either");
const utils_1 = require("../utils");
const paths_1 = require("./paths");
const PrismicSharedConfig_1 = require("../models/PrismicSharedConfig");
exports.DEFAULT_CONFIG = {
    base: "https://prismic.io",
    cookies: "",
};
exports.PrismicSharedConfigManager = {
    default() {
        utils_1.Files.write(paths_1.PrismicConfigPath, JSON.stringify(exports.DEFAULT_CONFIG, null, "\t"), {
            recursive: false,
        });
        return exports.DEFAULT_CONFIG;
    },
    get: () => {
        if (!utils_1.Files.exists(paths_1.PrismicConfigPath))
            return exports.PrismicSharedConfigManager.default();
        const conf = utils_1.Files.safeReadEntity(paths_1.PrismicConfigPath, (payload) => {
            return (0, Either_1.getOrElseW)(() => null)(PrismicSharedConfig_1.PrismicSharedConfig.decode(payload));
        });
        return { ...exports.DEFAULT_CONFIG, ...conf };
    },
    getAuth() {
        const config = exports.PrismicSharedConfigManager.get();
        return utils_1.Cookie.parsePrismicAuthToken(config.cookies);
    },
    set(config) {
        utils_1.Files.write(paths_1.PrismicConfigPath, config, { recursive: false });
    },
    setProperties(props, baseConfig) {
        const config = baseConfig || exports.PrismicSharedConfigManager.get();
        const updated = { ...config, ...props };
        exports.PrismicSharedConfigManager.set(updated);
    },
    setCookie(cookie) {
        const config = exports.PrismicSharedConfigManager.get();
        const cookiesMap = utils_1.Cookie.parse(config.cookies);
        const updatedCookiesMap = { ...cookiesMap, ...cookie };
        const serializedCookies = utils_1.Cookie.serializeCookies(Object.entries(updatedCookiesMap).map(([k, v]) => utils_1.Cookie.serializeCookie(k, v)));
        exports.PrismicSharedConfigManager.setProperties({ cookies: serializedCookies }, config);
    },
    setAuthCookie(authToken) {
        exports.PrismicSharedConfigManager.setCookie({ [utils_1.Cookie.AUTH_KEY]: authToken });
    },
    remove() {
        return utils_1.Files.remove(paths_1.PrismicConfigPath);
    },
    reset() {
        return exports.PrismicSharedConfigManager.set(exports.DEFAULT_CONFIG);
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpc21pY1NoYXJlZENvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWxlc3lzdGVtL1ByaXNtaWNTaGFyZWRDb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQThDO0FBQzlDLG9DQUF5QztBQUN6QyxtQ0FBNEM7QUFDNUMsdUVBQW9FO0FBRXZELFFBQUEsY0FBYyxHQUF3QjtJQUNqRCxJQUFJLEVBQUUsb0JBQW9CO0lBQzFCLE9BQU8sRUFBRSxFQUFFO0NBQ1osQ0FBQztBQUVXLFFBQUEsMEJBQTBCLEdBQUc7SUFDeEMsT0FBTztRQUNMLGFBQUssQ0FBQyxLQUFLLENBQUMseUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBYyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUN6RSxTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDLENBQUM7UUFDSCxPQUFPLHNCQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsRUFBRSxHQUF3QixFQUFFO1FBQzdCLElBQUksQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLHlCQUFpQixDQUFDO1lBQ2xDLE9BQU8sa0NBQTBCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFOUMsTUFBTSxJQUFJLEdBQUcsYUFBSyxDQUFDLGNBQWMsQ0FDL0IseUJBQWlCLEVBQ2pCLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDVixPQUFPLElBQUEsbUJBQVUsRUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyx5Q0FBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQ0YsQ0FBQztRQUNGLE9BQU8sRUFBRSxHQUFHLHNCQUFjLEVBQUUsR0FBRyxJQUFJLEVBQXlCLENBQUM7SUFDL0QsQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLE1BQU0sR0FBRyxrQ0FBMEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRCxPQUFPLGNBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUEyQjtRQUM3QixhQUFLLENBQUMsS0FBSyxDQUFDLHlCQUFpQixFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxhQUFhLENBQ1gsS0FBbUMsRUFDbkMsVUFBZ0M7UUFFaEMsTUFBTSxNQUFNLEdBQUcsVUFBVSxJQUFJLGtDQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTlELE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztRQUN4QyxrQ0FBMEIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFpQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxrQ0FBMEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRCxNQUFNLFVBQVUsR0FBRyxjQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRCxNQUFNLGlCQUFpQixHQUFHLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUV2RCxNQUFNLGlCQUFpQixHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FDL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDL0MsY0FBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzdCLENBQ0YsQ0FBQztRQUVGLGtDQUEwQixDQUFDLGFBQWEsQ0FDdEMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsRUFDOUIsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsYUFBYSxDQUFDLFNBQWlCO1FBQzdCLGtDQUEwQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsY0FBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLGFBQUssQ0FBQyxNQUFNLENBQUMseUJBQWlCLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sa0NBQTBCLENBQUMsR0FBRyxDQUFDLHNCQUFjLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0YsQ0FBQyJ9