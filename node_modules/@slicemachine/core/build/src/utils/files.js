"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ERROR_CODES = { ENOENT: "ENOENT" };
const _format = "utf8";
function write(pathToFile, value, options = { recursive: true }) {
    if (options.recursive) {
        const directoryPath = path_1.default.dirname(pathToFile);
        mkdir(directoryPath, { recursive: true });
    }
    if (typeof value === "string")
        fs_1.default.writeFileSync(pathToFile, value, _format);
    else
        fs_1.default.writeFileSync(pathToFile, JSON.stringify(value, null, 2), _format);
}
function readBuffer(pathToFile) {
    return fs_1.default.readFileSync(pathToFile);
}
function readString(pathToFile) {
    return fs_1.default.readFileSync(pathToFile, { encoding: _format });
}
function readEntity(pathToFile, validate) {
    const entity = safeReadJson(pathToFile);
    if (entity) {
        return validate(entity);
    }
    return new Error(`Could not parse file "${path_1.default.basename(pathToFile)}"`);
}
function safeReadEntity(pathToFile, validate) {
    try {
        const result = readEntity(pathToFile, validate);
        if (result instanceof Error)
            return null;
        return result;
    }
    catch (e) {
        return null;
    }
}
function readJson(pathToFile) {
    return JSON.parse(readString(pathToFile));
}
function safeReadJson(pathToFile) {
    try {
        return JSON.parse(readString(pathToFile));
    }
    catch (e) {
        return null;
    }
}
function readFirstOf(filePaths) {
    return (converter) => {
        return filePaths.reduce((acc, filePath) => {
            if (acc)
                return acc;
            else {
                const pathWithOpts = typeof filePath === "string" ? { path: filePath } : filePath;
                if (exists(pathWithOpts.path)) {
                    const optsOrDefault = pathWithOpts.options || {};
                    const test = {
                        path: pathWithOpts.path,
                        ...optsOrDefault,
                        value: converter(readString(pathWithOpts.path)),
                    };
                    return test;
                }
                else
                    return acc;
            }
        }, undefined);
    };
}
function isDirectory(source) {
    try {
        return fs_1.default.lstatSync(source).isDirectory();
    }
    catch (e) {
        return false;
    }
}
function isFile(source) {
    return fs_1.default.lstatSync(source).isFile();
}
function readDirectory(source) {
    return fs_1.default.readdirSync(source, { encoding: _format });
}
function mkdir(target, options) {
    return fs_1.default.mkdirSync(target, options);
}
function exists(pathToFile) {
    try {
        return Boolean(fs_1.default.lstatSync(pathToFile));
    }
    catch (e) {
        if (e.code === ERROR_CODES.ENOENT)
            return false;
        throw e;
    }
}
function append(filePath, data) {
    fs_1.default.appendFileSync(filePath, data, { encoding: _format });
}
function copy(src, dest, options = { recursive: false }) {
    if (options.recursive) {
        const directoryPath = path_1.default.dirname(dest);
        mkdir(directoryPath, { recursive: true });
    }
    fs_1.default.copyFileSync(src, dest);
}
function remove(src) {
    fs_1.default.unlinkSync(src);
}
function removeAll(srcs) {
    srcs.forEach((src) => remove(src));
}
function flushDirectories(directory, recursive = true) {
    try {
        const paths = fs_1.default.readdirSync(directory);
        paths.forEach((p) => {
            const maybedir = path_1.default.join(directory, p);
            if (isDirectory(maybedir)) {
                fs_1.default.rmdirSync(maybedir, { recursive });
            }
        });
    }
    catch (e) { }
}
exports.default = {
    write,
    readBuffer,
    readString,
    readEntity,
    safeReadEntity,
    readJson,
    safeReadJson,
    readFirstOf,
    isDirectory,
    isFile,
    readDirectory,
    mkdir,
    exists,
    append,
    copy,
    remove,
    removeAll,
    flushDirectories,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLE1BQU0sV0FBVyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sT0FBTyxHQUFtQixNQUFNLENBQUM7QUFFdkMsU0FBUyxLQUFLLENBQ1osVUFBa0IsRUFDbEIsS0FBdUMsRUFDdkMsVUFBa0MsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBR3JELElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtRQUNyQixNQUFNLGFBQWEsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMzQztJQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtRQUFFLFlBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQzs7UUFDdkUsWUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxVQUFrQjtJQUNwQyxPQUFPLFlBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3BDLE9BQU8sWUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQ2pCLFVBQWtCLEVBQ2xCLFFBQXlDO0lBRXpDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4QyxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsY0FBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUUsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUNyQixVQUFrQixFQUNsQixRQUF3QztJQUV4QyxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNoRCxJQUFJLE1BQU0sWUFBWSxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDekMsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxVQUFrQjtJQUNsQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFZLENBQUM7QUFDdkQsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLFVBQWtCO0lBQ3RDLElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFZLENBQUM7S0FDdEQ7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBR2xCLFNBQWdFO0lBQ2hFLE9BQU8sQ0FDTCxTQUErQixFQUNlLEVBQUU7UUFDaEQsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUNyQixDQUNFLEdBQWlELEVBQ2pELFFBQWdELEVBQ2hELEVBQUU7WUFDRixJQUFJLEdBQUc7Z0JBQUUsT0FBTyxHQUFHLENBQUM7aUJBQ2Y7Z0JBQ0gsTUFBTSxZQUFZLEdBQ2hCLE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztnQkFFL0QsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUM3QixNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxJQUFLLEVBQVEsQ0FBQztvQkFFeEQsTUFBTSxJQUFJLEdBQW1DO3dCQUMzQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUk7d0JBQ3ZCLEdBQUcsYUFBYTt3QkFDaEIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNoRCxDQUFDO29CQUNGLE9BQU8sSUFBSSxDQUFDO2lCQUNiOztvQkFBTSxPQUFPLEdBQUcsQ0FBQzthQUNuQjtRQUNILENBQUMsRUFDRCxTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxNQUFjO0lBQ2pDLElBQUk7UUFDRixPQUFPLFlBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDM0M7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsTUFBYztJQUM1QixPQUFPLFlBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLE1BQWM7SUFDbkMsT0FBTyxZQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRCxTQUFTLEtBQUssQ0FDWixNQUFjLEVBQ2QsT0FBK0I7SUFFL0IsT0FBTyxZQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsVUFBa0I7SUFDaEMsSUFBSTtRQUNGLE9BQU8sT0FBTyxDQUFDLFlBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztLQUMxQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsSUFBSyxDQUFzQixDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsTUFBTTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxDQUFDO0tBQ1Q7QUFDSCxDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsUUFBZ0IsRUFBRSxJQUFZO0lBQzVDLFlBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLElBQUksQ0FDWCxHQUFXLEVBQ1gsSUFBWSxFQUNaLFVBQWtDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtJQUV0RCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7UUFDckIsTUFBTSxhQUFhLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDM0M7SUFDRCxZQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsR0FBVztJQUN6QixZQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUEyQjtJQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxTQUFpQixFQUFFLFNBQVMsR0FBRyxJQUFJO0lBQzNELElBQUk7UUFDRixNQUFNLEtBQUssR0FBRyxZQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNsQixNQUFNLFFBQVEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDekIsWUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUU7QUFDaEIsQ0FBQztBQUVELGtCQUFlO0lBQ2IsS0FBSztJQUNMLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLGNBQWM7SUFDZCxRQUFRO0lBQ1IsWUFBWTtJQUNaLFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLGFBQWE7SUFDYixLQUFLO0lBQ0wsTUFBTTtJQUNOLE1BQU07SUFDTixJQUFJO0lBQ0osTUFBTTtJQUNOLFNBQVM7SUFDVCxnQkFBZ0I7Q0FDakIsQ0FBQyJ9