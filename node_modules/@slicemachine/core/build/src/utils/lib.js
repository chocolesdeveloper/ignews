"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInfoFromPath = exports.getFormattedLibIdentifier = exports.findIndexFile = void 0;
const path_1 = __importDefault(require("path"));
const files_1 = __importDefault(require("./files"));
var Prefix;
(function (Prefix) {
    Prefix["A"] = "@/";
    Prefix["B"] = "~/";
    Prefix["C"] = "/";
})(Prefix || (Prefix = {}));
const Identifiers = {
    "@/": 2,
    "~/": 2,
    "/": 1,
};
const findIndexFile = (libPath) => {
    try {
        const dir = files_1.default.readDirectory(libPath);
        const maybeF = dir.find((f) => files_1.default.isFile(path_1.default.join(libPath, f)) && f.startsWith("index."));
        return maybeF ? path_1.default.join(libPath, maybeF) : null;
    }
    catch (e) {
        return null;
    }
};
exports.findIndexFile = findIndexFile;
const getFormattedLibIdentifier = (libPath) => {
    const maybeIdentifier = Object.keys(Identifiers).find((e) => libPath.indexOf(e) === 0);
    const isLocal = !!maybeIdentifier;
    return {
        isLocal,
        identifier: maybeIdentifier,
        from: isLocal
            ? libPath.slice(Identifiers[maybeIdentifier])
            : libPath,
    };
};
exports.getFormattedLibIdentifier = getFormattedLibIdentifier;
function getInfoFromPath(startPath, libPath) {
    const { isLocal, from } = (0, exports.getFormattedLibIdentifier)(libPath);
    const pathToLib = path_1.default.join(startPath || process.cwd(), isLocal ? "" : "node_modules", isLocal ? libPath.substring(1, libPath.length) : libPath);
    const pathExists = files_1.default.exists(pathToLib);
    const pathToSlices = path_1.default.join(pathToLib, isLocal ? "." : "slices");
    return {
        isLocal,
        from,
        pathExists,
        pathToLib,
        pathToSlices,
    };
}
exports.getInfoFromPath = getInfoFromPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2xpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsb0RBQTRCO0FBRTVCLElBQUssTUFJSjtBQUpELFdBQUssTUFBTTtJQUNULGtCQUFRLENBQUE7SUFDUixrQkFBUSxDQUFBO0lBQ1IsaUJBQU8sQ0FBQTtBQUNULENBQUMsRUFKSSxNQUFNLEtBQU4sTUFBTSxRQUlWO0FBRUQsTUFBTSxXQUFXLEdBQTJCO0lBQzFDLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSSxFQUFFLENBQUM7SUFDUCxHQUFHLEVBQUUsQ0FBQztDQUNQLENBQUM7QUFFSyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQWUsRUFBaUIsRUFBRTtJQUM5RCxJQUFJO1FBQ0YsTUFBTSxHQUFHLEdBQUcsZUFBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUNyQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBSyxDQUFDLE1BQU0sQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQ3JFLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUNuRDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQztBQVZXLFFBQUEsYUFBYSxpQkFVeEI7QUFFSyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLE9BQWUsRUFLZixFQUFFO0lBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ25ELENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDaEMsQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDbEMsT0FBTztRQUNMLE9BQU87UUFDUCxVQUFVLEVBQUUsZUFBZTtRQUMzQixJQUFJLEVBQUUsT0FBTztZQUNYLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxlQUF5QixDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLE9BQU87S0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbEJXLFFBQUEseUJBQXlCLDZCQWtCcEM7QUFFRixTQUFnQixlQUFlLENBQzdCLFNBQWlCLEVBQ2pCLE9BQWU7SUFRZixNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEsaUNBQXlCLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0QsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FDekIsU0FBUyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFDMUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDekQsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXBFLE9BQU87UUFDTCxPQUFPO1FBQ1AsSUFBSTtRQUNKLFVBQVU7UUFDVixTQUFTO1FBQ1QsWUFBWTtLQUNiLENBQUM7QUFDSixDQUFDO0FBM0JELDBDQTJCQyJ9