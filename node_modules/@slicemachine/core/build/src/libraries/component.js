"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentInfo = void 0;
const path_1 = __importDefault(require("path"));
const str_1 = require("../utils/str");
const screenshot_1 = require("./screenshot");
const files_1 = __importDefault(require("../utils/files"));
const mocks_1 = require("./mocks");
const Either_1 = require("fp-ts/lib/Either");
const Slice_1 = require("../models/Slice");
const Variation_1 = require("../models/Variation");
const errors_1 = __importDefault(require("../utils/errors"));
function getMeta(model) {
    return {
        id: model.id,
        name: model.name,
        description: model.description,
    };
}
function getComponentName(slicePath) {
    const split = slicePath.split(path_1.default.sep);
    const pop = split.pop();
    if (!pop)
        return;
    if (pop.indexOf("index.") === 0) {
        return split.pop();
    }
    if (pop.indexOf(split[split.length - 1]) === 0) {
        return slicePath.split(path_1.default.sep).pop();
    }
    return pop.split(".")[0];
}
function findComponentFile(files, componentName) {
    const possiblePaths = ["index", componentName].reduce((acc, f) => [
        ...acc,
        `${f}.vue`,
        `${f}.js`,
        `${f}.jsx`,
        `${f}.ts`,
        `${f}.tsx`,
        `${f}.svelte`,
    ], []);
    return files.find((e) => possiblePaths.indexOf(e) > -1);
}
function matchPossiblePaths(files) {
    const modelFilename = "model.json";
    return files.includes(modelFilename);
}
function splitExtension(str) {
    const fullName = str.split("/").pop();
    if (!fullName) {
        return {
            fileName: null,
            extension: null,
        };
    }
    const [fileName, extension] = fullName.split(".");
    return {
        fileName,
        extension,
    };
}
function fromJsonFile(pathToFile, validate) {
    const fullPath = path_1.default.join(pathToFile);
    const hasFile = files_1.default.exists(fullPath);
    if (hasFile) {
        return files_1.default.readEntity(fullPath, validate);
    }
    return null;
}
function getFileInfoFromPath(slicePath, componentName) {
    const isDirectory = files_1.default.isDirectory(slicePath);
    if (!isDirectory) {
        return { ...splitExtension(slicePath), isDirectory: false };
    }
    const files = files_1.default.readDirectory(slicePath);
    const match = matchPossiblePaths(files);
    if (match) {
        const maybeFileComponent = findComponentFile(files, componentName);
        if (maybeFileComponent) {
            return { ...splitExtension(maybeFileComponent), isDirectory: true };
        }
        return { fileName: null, extension: null, isDirectory: true };
    }
    throw new Error(`[slice-machine] Could not find module file for component "${componentName}" at path "${slicePath}"`);
}
function getComponentInfo(slicePath, assetsPaths, from) {
    const sliceName = getComponentName(slicePath);
    if (!sliceName || !sliceName.length) {
        console.error(`[queries/component-info] Could not find slice name at path "${slicePath}". Skipping...`);
        return;
    }
    const fileInfo = (() => {
        try {
            return getFileInfoFromPath(slicePath, sliceName);
        }
        catch (e) {
            return null;
        }
    })();
    if (fileInfo === null) {
        return;
    }
    const { fileName, extension, isDirectory } = fileInfo;
    const model = fromJsonFile(path_1.default.join(slicePath, "model.json"), (payload) => (0, Either_1.getOrElseW)((e) => new Error(errors_1.default.report(e)))((0, Slice_1.Slice)(Variation_1.AsObject).decode(payload)));
    if (!model) {
        return;
    }
    if (model instanceof Error) {
        console.error(`Could not parse model ${path_1.default.basename(slicePath)}\nFull error: ${model.toString()}`);
        return;
    }
    const screenshotPaths = (model.variations || [])
        .map((v) => {
        const activeScreenshot = (0, screenshot_1.resolvePathsToScreenshot)({
            paths: assetsPaths,
            from,
            sliceName,
            variationId: v.id,
        });
        return activeScreenshot && { [v.id]: activeScreenshot };
    })
        .reduce((acc, variationPreview) => {
        return { ...acc, ...variationPreview };
    }, {});
    const nameConflict = sliceName !== (0, str_1.pascalize)(model.id) ? { sliceName, id: model.id } : null;
    const maybeMock = (0, mocks_1.resolvePathsToMock)({
        paths: assetsPaths,
        from,
        sliceName,
    });
    return {
        sliceName,
        fileName,
        isDirectory,
        extension,
        model,
        meta: getMeta(model),
        mock: maybeMock === null || maybeMock === void 0 ? void 0 : maybeMock.value,
        nameConflict,
        screenshotPaths,
    };
}
exports.getComponentInfo = getComponentInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYnJhcmllcy9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBUXhCLHNDQUF5QztBQUV6Qyw2Q0FBd0Q7QUFDeEQsMkRBQW1DO0FBQ25DLG1DQUE2QztBQUM3Qyw2Q0FBOEM7QUFDOUMsMkNBQXVEO0FBQ3ZELG1EQUFrRTtBQUVsRSw2REFBcUM7QUFFckMsU0FBUyxPQUFPLENBQUMsS0FBb0I7SUFDbkMsT0FBTztRQUNMLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNaLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDL0IsQ0FBQztBQUNKLENBQUM7QUFHRCxTQUFTLGdCQUFnQixDQUFDLFNBQWlCO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4QixJQUFJLENBQUMsR0FBRztRQUFFLE9BQU87SUFFakIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNwQjtJQUNELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM5QyxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3hDO0lBQ0QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFHRCxTQUFTLGlCQUFpQixDQUN4QixLQUE0QixFQUM1QixhQUFxQjtJQUVyQixNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQ25ELENBQUMsR0FBYSxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUM7UUFDNUIsR0FBRyxHQUFHO1FBQ04sR0FBRyxDQUFDLE1BQU07UUFDVixHQUFHLENBQUMsS0FBSztRQUNULEdBQUcsQ0FBQyxNQUFNO1FBQ1YsR0FBRyxDQUFDLEtBQUs7UUFDVCxHQUFHLENBQUMsTUFBTTtRQUNWLEdBQUcsQ0FBQyxTQUFTO0tBQ2QsRUFDRCxFQUFFLENBQ0gsQ0FBQztJQUNGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEtBQTRCO0lBQ3RELE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQztJQUVuQyxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEdBQVc7SUFJakMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsT0FBTztZQUNMLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQztLQUNIO0lBRUQsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELE9BQU87UUFDTCxRQUFRO1FBQ1IsU0FBUztLQUNWLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQ25CLFVBQWtCLEVBQ2xCLFFBQXlDO0lBRXpDLE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV2QyxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sZUFBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDN0M7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFHRCxTQUFTLG1CQUFtQixDQUMxQixTQUFpQixFQUNqQixhQUFxQjtJQUVyQixNQUFNLFdBQVcsR0FBRyxlQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQztLQUM3RDtJQUVELE1BQU0sS0FBSyxHQUFHLGVBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFeEMsSUFBSSxLQUFLLEVBQUU7UUFDVCxNQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNuRSxJQUFJLGtCQUFrQixFQUFFO1lBQ3RCLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNyRTtRQUNELE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQy9EO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FDYiw2REFBNkQsYUFBYSxjQUFjLFNBQVMsR0FBRyxDQUNyRyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixTQUFpQixFQUNqQixXQUFrQyxFQUNsQyxJQUFZO0lBRVosTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFOUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FDWCwrREFBK0QsU0FBUyxnQkFBZ0IsQ0FDekYsQ0FBQztRQUNGLE9BQU87S0FDUjtJQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxFQUFFO1FBQ3JCLElBQUk7WUFDRixPQUFPLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNsRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFTCxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7UUFDckIsT0FBTztLQUNSO0lBRUQsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBRXRELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ3pFLElBQUEsbUJBQVUsRUFBQyxDQUFDLENBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0RCxJQUFBLGFBQUssRUFBQyxvQkFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNoQyxDQUNGLENBQUM7SUFDRixJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsT0FBTztLQUNSO0lBQ0QsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQ1gseUJBQXlCLGNBQUksQ0FBQyxRQUFRLENBQ3BDLFNBQVMsQ0FDVixpQkFBaUIsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ3JDLENBQUM7UUFDRixPQUFPO0tBQ1I7SUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQzdDLEdBQUcsQ0FBQyxDQUFDLENBQW9CLEVBQUUsRUFBRTtRQUM1QixNQUFNLGdCQUFnQixHQUFHLElBQUEscUNBQXdCLEVBQUM7WUFDaEQsS0FBSyxFQUFFLFdBQVc7WUFDbEIsSUFBSTtZQUNKLFNBQVM7WUFDVCxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUU7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxnQkFBZ0IsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUM7SUFDMUQsQ0FBQyxDQUFDO1NBQ0QsTUFBTSxDQUNMLENBQ0UsR0FBMEMsRUFDMUMsZ0JBQW1FLEVBQ25FLEVBQUU7UUFDRixPQUFPLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3pDLENBQUMsRUFDRCxFQUFFLENBQ0gsQ0FBQztJQUVKLE1BQU0sWUFBWSxHQUNoQixTQUFTLEtBQUssSUFBQSxlQUFTLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFHekUsTUFBTSxTQUFTLEdBQUcsSUFBQSwwQkFBa0IsRUFBQztRQUNuQyxLQUFLLEVBQUUsV0FBVztRQUNsQixJQUFJO1FBQ0osU0FBUztLQUNWLENBQUMsQ0FBQztJQUVILE9BQU87UUFDTCxTQUFTO1FBQ1QsUUFBUTtRQUNSLFdBQVc7UUFDWCxTQUFTO1FBQ1QsS0FBSztRQUNMLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3BCLElBQUksRUFBRSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsS0FBSztRQUN0QixZQUFZO1FBQ1osZUFBZTtLQUNoQixDQUFDO0FBQ0osQ0FBQztBQXRGRCw0Q0FzRkMifQ==