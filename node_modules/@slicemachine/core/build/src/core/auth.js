"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServerAndOpenBrowser = exports.askSingleChar = exports.validatePayload = exports.isHandlerData = void 0;
const hapi = __importStar(require("@hapi/hapi"));
const open_1 = __importDefault(require("open"));
const utils_1 = require("../utils");
const PrismicSharedConfig_1 = require("../filesystem/PrismicSharedConfig");
const utils_2 = require("../utils");
const isHandlerData = (data) => {
    if (typeof data != "object")
        return false;
    const { email, cookies } = data;
    return (Boolean(email && cookies) &&
        Array.isArray(cookies) &&
        !cookies.some((c) => typeof c !== "string"));
};
exports.isHandlerData = isHandlerData;
const Routes = {
    authentication: (server) => (onSuccess, onFail) => ({
        method: "POST",
        path: "/",
        handler: authenticationHandler(server)(onSuccess, onFail),
    }),
    notFound: {
        method: ["GET", "POST"],
        path: "/{any*}",
        handler: (request, h) => {
            return h
                .response(`not found: [${request.method}]: ${request.url.toString()}`)
                .code(404);
        },
    },
};
function validatePayload(payload) {
    if (Buffer.isBuffer(payload))
        return null;
    return (0, exports.isHandlerData)(payload) ? payload : null;
}
exports.validatePayload = validatePayload;
const authenticationHandler = (server) => (onSuccess, onFail) => {
    return (request, h) => {
        try {
            const data = validatePayload(request.payload);
            if (!data) {
                onFail();
                h.response("Error with cookies").code(400);
                throw new Error("It seems the server didn't respond properly, please contact us.");
            }
            onSuccess(data);
            return h.response(data).code(200);
        }
        finally {
            void server.stop({ timeout: 10000 });
        }
    };
};
function buildServer(base, port, host) {
    const server = hapi.server({
        port,
        host,
        routes: {
            cors: {
                origin: [base],
                headers: ["Origin", "X-Requested-With", "Content-Type", "Accept"],
            },
        },
    });
    return server;
}
function askSingleChar(title) {
    return new Promise((resolve) => {
        process.stdout.write(title);
        const rawMode = process.stdin.isRaw;
        if (process.stdin.setRawMode)
            process.stdin.setRawMode(true);
        function handler(key) {
            const response = key.toString("utf-8");
            if (process.stdin.setRawMode)
                process.stdin.setRawMode(Boolean(rawMode));
            process.stdin.removeListener("data", handler);
            resolve(response);
        }
        process.stdin.on("data", handler);
    });
}
exports.askSingleChar = askSingleChar;
async function startServerAndOpenBrowser(url, action, base = utils_1.CONSTS.DEFAULT_BASE, port = utils_1.CONSTS.DEFAULT_SERVER_PORT) {
    const confirmation = await askSingleChar(`>> Press any key to open the browser to ${action} or q to exit:`);
    if (confirmation === "q" || confirmation === "\u0003")
        return process.exit(-1);
    const s = (0, utils_1.spinner)("Waiting for the browser response");
    const onLoginFail = () => {
        s.stop();
        (0, utils_1.writeError)(`We failed to log you into your Prismic account`);
        console.log(`Run ${(0, utils_1.bold)("npx slicemachine init")} again!`);
        process.exit(-1);
    };
    function onSuccess(data) {
        s.succeed(`Logged in as ${(0, utils_1.bold)(data.email)}`).stop();
        PrismicSharedConfig_1.PrismicSharedConfigManager.setProperties({
            cookies: utils_2.Cookie.serializeCookies(data.cookies),
            base,
        });
    }
    function onFail() {
        onLoginFail();
    }
    const server = buildServer(base, port, "localhost");
    server.route([
        Routes.authentication(server)(onSuccess, onFail),
        Routes.notFound,
    ]);
    return server.start().then(() => {
        console.log("\nOpening browser to " + (0, utils_1.underline)(url));
        s.start();
        void (0, open_1.default)(url);
        return {
            onLoginFail,
        };
    });
}
exports.startServerAndOpenBrowser = startServerAndOpenBrowser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2F1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlEQUFtQztBQUNuQyxnREFBd0I7QUFDeEIsb0NBQXdFO0FBQ3hFLDJFQUErRTtBQUMvRSxvQ0FBa0M7QUFJM0IsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsSUFBc0MsRUFDakIsRUFBRTtJQUN2QixJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVE7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUUxQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQTRCLENBQUM7SUFDeEQsT0FBTyxDQUNMLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQ3JELENBQUM7QUFDSixDQUFDLENBQUM7QUFYVyxRQUFBLGFBQWEsaUJBV3hCO0FBRUYsTUFBTSxNQUFNLEdBQUc7SUFDYixjQUFjLEVBQ1osQ0FBQyxNQUFtQixFQUFFLEVBQUUsQ0FDeEIsQ0FDRSxTQUFzQyxFQUN0QyxNQUFrQixFQUNBLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sRUFBRSxNQUFNO1FBQ2QsSUFBSSxFQUFFLEdBQUc7UUFDVCxPQUFPLEVBQUUscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQztLQUMxRCxDQUFDO0lBRUosUUFBUSxFQUFFO1FBQ1IsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztRQUN2QixJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxDQUNQLE9BQXFCLEVBQ3JCLENBQXVCLEVBQ0YsRUFBRTtZ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