import type { Manifest, Frameworks, UserInfo } from "../models";
import * as Communication from "./communication";
import { Repositories } from "../models/Repositories";
export * as Communication from "./communication";
export interface Core {
    cwd: string;
    base: string;
    manifest: Manifest;
    Repository: {
        list: (token: string) => Promise<Repositories>;
        create: (apiEndpoint: string, token: string, framework: Frameworks) => Communication.CreateRepositoryResponse;
        validateName: (name: string, existingRepo?: boolean) => Promise<string>;
    };
}
export interface CoreParams {
    cwd: string;
    base: string;
    manifest: Manifest;
}
export default function createCore({ cwd, base, manifest }: CoreParams): Core;
export declare const Auth: {
    login: (base: string) => Promise<void>;
    signup: (base: string) => Promise<void>;
    logout: () => void;
    validateSession: (requiredBase: string) => Promise<UserInfo | null>;
};
