"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRepository = exports.validateRepositoryName = exports.listRepositories = exports.validateSession = exports.maybeParseRepoData = exports.refreshSession = void 0;
const axios_1 = __importDefault(require("axios"));
const Either_1 = require("fp-ts/Either");
const models_1 = require("../models");
const utils_1 = require("../utils");
const { DEFAULT_BASE, USER_SERVICE_BASE, USER_SERVICE_STAGING_BASE } = utils_1.CONSTS;
function toAuthUrl(path, token, base = DEFAULT_BASE) {
    const url = new URL(base);
    url.hostname = `auth.${url.hostname}`;
    url.pathname = path;
    url.searchParams.set("token", token);
    return url.toString();
}
async function refreshSession(cookies, base) {
    const token = utils_1.Cookie.parsePrismicAuthToken(cookies);
    const url = toAuthUrl("refreshtoken", token, base);
    return axios_1.default.get(url).then((res) => res.data);
}
exports.refreshSession = refreshSession;
function maybeParseRepoData(repos) {
    if (!repos)
        throw new Error("Did not receive repository data");
    if (typeof repos === "string") {
        return (0, Either_1.fold)(() => {
            throw new Error("Can't parse repo data");
        }, (f) => f)(models_1.RepositoriesRoles.decode(JSON.parse(repos)));
    }
    return repos;
}
exports.maybeParseRepoData = maybeParseRepoData;
async function validateSession(cookies, base) {
    const token = utils_1.Cookie.parsePrismicAuthToken(cookies);
    const url = toAuthUrl("validate", token, base);
    return axios_1.default
        .get(url)
        .then((res) => {
        const repositories = maybeParseRepoData(res.data.repositories);
        return {
            ...res.data,
            repositories,
        };
    });
}
exports.validateSession = validateSession;
async function listRepositories(token, base = DEFAULT_BASE) {
    const userServiceBase = DEFAULT_BASE === base ? USER_SERVICE_BASE : USER_SERVICE_STAGING_BASE;
    return axios_1.default
        .get(`${userServiceBase}/repositories`, {
        headers: { Authorization: `Bearer ${token}` },
    })
        .then((res) => {
        return (0, Either_1.getOrElseW)(() => {
            console.error("Unable to parse user repositories.");
            return [];
        })(models_1.Repositories.decode(res.data));
    });
}
exports.listRepositories = listRepositories;
async function validateRepositoryName(name, base = DEFAULT_BASE, existingRepo = false) {
    if (!name)
        return Promise.reject(new Error("repository name is required"));
    const domain = name.trim();
    const errors = [];
    const startsWithLetter = /^[a-zA-Z]/.test(domain);
    if (!startsWithLetter)
        errors.push("Must start with a letter.");
    const acceptedChars = /^[a-z0-9-]+$/.test(domain);
    if (!acceptedChars)
        errors.push("Must contain only lowercase letters, numbers and hyphens.");
    const fourCharactersOrMore = domain.length >= 4;
    if (!fourCharactersOrMore)
        errors.push("Must have four or more alphanumeric characters and/or hyphens.");
    const endsWithALetterOrNumber = /[a-z0-9]$/.test(domain);
    if (!endsWithALetterOrNumber)
        errors.push("Must end in a letter or a number.");
    const thirtyCharacterOrLess = domain.length <= 30;
    if (!thirtyCharacterOrLess)
        errors.push("Must be 30 characters or less");
    if (errors.length > 0) {
        const errorString = errors.map((d, i) => `(${i + 1}: ${d}`).join(" ");
        const msg = `Validation errors: ${errorString}`;
        return Promise.reject(new Error(msg));
    }
    const addr = new URL(base);
    addr.pathname = `/app/dashboard/repositories/${domain}/exists`;
    const url = addr.toString();
    return axios_1.default
        .get(url)
        .then((res) => res.data)
        .then((res) => {
        if (!res && !existingRepo)
            throw new Error(`${domain} is already in use`);
        if (res && existingRepo)
            throw new Error(`${domain} does not exist`);
        return domain;
    });
}
exports.validateRepositoryName = validateRepositoryName;
async function createRepository(domain, cookies, framework = models_1.Frameworks.vanillajs, base = DEFAULT_BASE) {
    const data = {
        domain,
        framework,
        plan: "personal",
        isAnnual: "false",
        role: "developer",
    };
    const address = new URL(base);
    address.pathname = "/authentication/newrepository";
    address.searchParams.append("app", "slicemachine");
    return axios_1.default
        .post(address.toString(), data, {
        headers: {
            Cookie: cookies,
            "User-Agent": "prismic-cli/sm",
        },
    })
        .catch((error) => {
        if (axios_1.default.isAxiosError(error) && error.response) {
            const message = `[${error.response.status}]: ${error.response.statusText}`;
            throw new Error(message);
        }
        throw error;
    });
}
exports.createRepository = createRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbXVuaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL2NvbW11bmljYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0Esa0RBQXlEO0FBQ3pELHlDQUFnRDtBQUVoRCxzQ0FLbUI7QUFDbkIsb0NBQTBDO0FBRTFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUseUJBQXlCLEVBQUUsR0FBRyxjQUFNLENBQUM7QUFVOUUsU0FBUyxTQUFTLENBQ2hCLElBQWlDLEVBQ2pDLEtBQWEsRUFDYixJQUFJLEdBQUcsWUFBWTtJQUVuQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3RDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN4QixDQUFDO0FBRU0sS0FBSyxVQUFVLGNBQWMsQ0FDbEMsT0FBZSxFQUNmLElBQWE7SUFFYixNQUFNLEtBQUssR0FBRyxjQUFNLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEQsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLGNBQWMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkQsT0FBTyxlQUFLLENBQUMsR0FBRyxDQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFQRCx3Q0FPQztBQUVELFNBQWdCLGtCQUFrQixDQUNoQyxLQUFrQztJQUVsQyxJQUFJLENBQUMsS0FB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