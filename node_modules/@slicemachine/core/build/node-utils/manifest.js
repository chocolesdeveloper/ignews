"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateManifestSMVersion = exports.patchManifest = exports.maybeRepoNameFromSMFile = exports.retrieveManifest = exports.createManifest = void 0;
const files_1 = __importDefault(require("./files"));
const paths_1 = require("./paths");
const Manifest_1 = require("../models/Manifest");
const io_ts_reporters_1 = require("io-ts-reporters");
const function_1 = require("fp-ts/function");
const Either_1 = require("fp-ts/Either");
function createManifest(cwd, manifest) {
    const manifestPath = (0, paths_1.SMConfigPath)(cwd);
    files_1.default.write(manifestPath, manifest, { recursive: false });
}
exports.createManifest = createManifest;
function retrieveManifest(cwd, validate = false) {
    const manifestPath = (0, paths_1.SMConfigPath)(cwd);
    if (!files_1.default.exists(manifestPath)) {
        return {
            exists: false,
            content: null,
        };
    }
    const content = files_1.default.safeReadJson(manifestPath);
    if (validate === false) {
        return {
            exists: true,
            content,
        };
    }
    if (!content)
        throw new Error("Could not parse sm.json");
    return (0, function_1.pipe)(Manifest_1.Manifest.decode(content), (0, Either_1.fold)((errors) => {
        return { exists: true, content: null, errors };
    }, (manifest) => ({ exists: true, content: manifest })));
}
exports.retrieveManifest = retrieveManifest;
function maybeRepoNameFromSMFile(cwd, base) {
    var _a;
    try {
        const baseUrl = new URL(base);
        const maybeSMFile = retrieveManifest(cwd);
        if (maybeSMFile.exists === false)
            return null;
        if (!((_a = maybeSMFile.content) === null || _a === void 0 ? void 0 : _a.apiEndpoint))
            return null;
        const repoUrl = new URL(maybeSMFile.content.apiEndpoint);
        const correctBase = repoUrl.hostname.includes(baseUrl.hostname);
        if (correctBase === false)
            return null;
        return repoUrl.hostname.split(".")[0];
    }
    catch {
        return null;
    }
}
exports.maybeRepoNameFromSMFile = maybeRepoNameFromSMFile;
function patchManifest(cwd, data) {
    const manifest = retrieveManifest(cwd);
    if (!manifest.exists || !manifest.content)
        return false;
    const updatedManifest = {
        ...manifest.content,
        ...data,
    };
    files_1.default.write((0, paths_1.SMConfigPath)(cwd), updatedManifest);
    return true;
}
exports.patchManifest = patchManifest;
function updateManifestSMVersion(cwd, version) {
    const maybeManifest = retrieveManifest(cwd);
    if (maybeManifest.errors) {
        const messages = (0, io_ts_reporters_1.formatValidationErrors)(maybeManifest.errors);
        messages.forEach((message) => {
            console.log("[core/sm.json] " + message);
        });
    }
    const content = maybeManifest.content;
    if (content === null || content === void 0 ? void 0 : content._latest)
        return false;
    return patchManifest(cwd, { _latest: version });
}
exports.updateManifestSMVersion = updateManifestSMVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm9kZS11dGlscy9tYW5pZmVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvREFBNEI7QUFDNUIsbUNBQW9EO0FBQ3BELGlEQUE4QztBQUM5QyxxREFBeUQ7QUFFekQsNkNBQXNDO0FBQ3RDLHlDQUFvQztBQUVwQyxTQUFnQixjQUFjLENBQUMsR0FBVyxFQUFFLFFBQWtCO0lBQzVELE1BQU0sWUFBWSxHQUFHLElBQUEsb0JBQVksRUFBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxlQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBSEQsd0NBR0M7QUFFRCxTQUFnQixnQkFBZ0IsQ0FDOUIsR0FBVyxFQUNYLFFBQVEsR0FBRyxLQUFLO0lBRWhCLE1BQU0sWUFBWSxHQUFHLElBQUEsb0JBQVksRUFBQyxHQUFHLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUMsZUFBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMvQixPQUFPO1lBQ0wsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUM7S0FDSDtJQUVELE1BQU0sT0FBTyxHQUFvQixlQUFLLENBQUMsWUFBWSxDQUNqRCxZQUFZLENBQ00sQ0FBQztJQUVyQixJQUFJLFFBQVEsS0FBSyxLQUFLLEVBQUU7UUFDdEIsT0FBTztZQUNMLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTztTQUNSLENBQUM7S0FDSDtJQUVELElBQUksQ0FBQyxPQUFPO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBRXpELE9BQU8sSUFBQSxlQUFJLEVBQ1QsbUJBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3hCLElBQUEsYUFBSSxFQUNGLENB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