export interface FileContent<T, E = void> {
    exists: boolean;
    content: T | null;
    errors?: E;
}
export interface Paths {
    value: () => string;
    customType: (id: string) => {
        value: () => string;
        model: () => string;
        mock: () => string;
    };
    library: (libraryName: string) => {
        value: () => string;
        slice: (sliceName: string) => {
            value: () => string;
            preview: (filename?: string) => string;
            stories: (filename?: string) => string;
            mocks: () => string;
            model: () => string;
            variation: (variationId: string) => {
                value: () => string;
                preview: (filename?: string) => string;
            };
        };
    };
}
declare const Paths: (cwd: string, prefix: string) => Paths;
export declare const GeneratedPaths: (cwd: string) => Paths;
export declare const GeneratedCustomTypesPaths: (cwd: string) => Paths;
export declare const CustomTypesPaths: (cwd: string) => Paths;
export declare const CustomPaths: (cwd: string) => Paths;
export declare const PackagePaths: (cwd: string) => Paths;
export declare const SMConfigPath: (cwd: string) => string;
export declare const LibrariesStatePath: (cwd: string) => string;
export declare const PrismicConfigPath: string;
export declare const SliceTemplateConfigPath: (cwd: string, customPathToTemplate?: string | undefined) => string;
export declare const JsonPackagePath: (cwd: string) => string;
export declare const YarnLockPath: (cwd: string) => string;
export declare const MocksConfigPath: (cwd: string) => string;
export {};
