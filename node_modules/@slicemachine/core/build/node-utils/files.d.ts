/// <reference types="node" />
import path from "path";
declare function write(pathToFile: string, value: string | Record<string, unknown>, options?: {
    recursive: boolean;
}): void;
declare function readBuffer(pathToFile: string): Buffer;
declare function readString(pathToFile: string): string;
declare function readEntity<T>(pathToFile: string, validate: (payload: unknown) => Error | T): Error | T;
declare function safeReadEntity<T>(pathToFile: string, validate: (payload: unknown) => null | T): null | T;
declare function readJson(pathToFile: string): unknown;
declare function safeReadJson(pathToFile: string): unknown | null;
declare function readFirstOf<V, O extends Record<string, unknown> = Record<string, never>>(filePaths: ReadonlyArray<{
    path: string;
    options?: O;
} | string>): (converter: (value: string) => V) => ({
    path: string;
    value: V;
} & O) | undefined;
declare function isDirectory(source: string): boolean;
declare function isFile(source: string): boolean;
declare function readDirectory(source: string): string[];
declare function mkdir(target: string, options: {
    recursive: boolean;
}): string | undefined;
declare function exists(pathToFile: string): boolean;
declare function append(filePath: string, data: string): void;
declare function copy(src: string, dest: string, options?: {
    recursive: boolean;
}): void;
declare function remove(src: string): void;
declare function removeAll(srcs: ReadonlyArray<string>): void;
declare function flushDirectories(directory: string, recursive?: boolean): void;
declare const _default: {
    write: typeof write;
    readBuffer: typeof readBuffer;
    readString: typeof readString;
    readEntity: typeof readEntity;
    safeReadEntity: typeof safeReadEntity;
    readJson: typeof readJson;
    safeReadJson: typeof safeReadJson;
    readFirstOf: typeof readFirstOf;
    isDirectory: typeof isDirectory;
    isFile: typeof isFile;
    readDirectory: typeof readDirectory;
    mkdir: typeof mkdir;
    exists: typeof exists;
    append: typeof append;
    copy: typeof copy;
    remove: typeof remove;
    removeAll: typeof removeAll;
    flushDirectories: typeof flushDirectories;
};
export default _default;
