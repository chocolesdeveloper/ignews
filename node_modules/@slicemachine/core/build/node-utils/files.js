"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ERROR_CODES = { ENOENT: "ENOENT" };
const _format = "utf8";
function write(pathToFile, value, options = { recursive: true }) {
    if (options.recursive) {
        const directoryPath = path_1.default.dirname(pathToFile);
        mkdir(directoryPath, { recursive: true });
    }
    if (typeof value === "string")
        fs_1.default.writeFileSync(pathToFile, value, _format);
    else
        fs_1.default.writeFileSync(pathToFile, JSON.stringify(value, null, 2), _format);
}
function readBuffer(pathToFile) {
    return fs_1.default.readFileSync(pathToFile);
}
function readString(pathToFile) {
    return fs_1.default.readFileSync(pathToFile, { encoding: _format });
}
function readEntity(pathToFile, validate) {
    const entity = safeReadJson(pathToFile);
    if (entity) {
        return validate(entity);
    }
    return new Error(`Could not parse file "${path_1.default.basename(pathToFile)}"`);
}
function safeReadEntity(pathToFile, validate) {
    try {
        const result = readEntity(pathToFile, validate);
        if (result instanceof Error)
            return null;
        return result;
    }
    catch (e) {
        return null;
    }
}
function readJson(pathToFile) {
    return JSON.parse(readString(pathToFile));
}
function safeReadJson(pathToFile) {
    try {
        return JSON.parse(readString(pathToFile));
    }
    catch (e) {
        return null;
    }
}
function readFirstOf(filePaths) {
    return (converter) => {
        return filePaths.reduce((acc, filePath) => {
            if (acc)
                return acc;
            else {
                const pathWithOpts = typeof filePath === "string" ? { path: filePath } : filePath;
                if (exists(pathWithOpts.path)) {
                    const optsOrDefault = pathWithOpts.options || {};
                    const test = {
                        path: pathWithOpts.path,
                        ...optsOrDefault,
                        value: converter(readString(pathWithOpts.path)),
                    };
                    return test;
                }
                else
                    return acc;
            }
        }, undefined);
    };
}
function isDirectory(source) {
    try {
        return fs_1.default.lstatSync(source).isDirectory();
    }
    catch (e) {
        return false;
    }
}
function isFile(source) {
    return fs_1.default.lstatSync(source).isFile();
}
function readDirectory(source) {
    return fs_1.default.readdirSync(source, { encoding: _format });
}
function mkdir(target, options) {
    return fs_1.default.mkdirSync(target, options);
}
function exists(pathToFile) {
    try {
        return Boolean(fs_1.default.lstatSync(pathToFile));
    }
    catch (e) {
        if (e.code === ERROR_CODES.ENOENT)
            return false;
        throw e;
    }
}
function append(filePath, data) {
    fs_1.default.appendFileSync(filePath, data, { encoding: _format });
}
function copy(src, dest, options = { recursive: false }) {
    if (options.recursive) {
        const directoryPath = path_1.default.dirname(dest);
        mkdir(directoryPath, { recursive: true });
    }
    fs_1.default.copyFileSync(src, dest);
}
function remove(src) {
    fs_1.default.unlinkSync(src);
}
function removeAll(srcs) {
    srcs.forEach((src) => remove(src));
}
function flushDirectories(directory, recursive = true) {
    try {
        const paths = fs_1.default.readdirSync(directory);
        paths.forEach((p) => {
            const maybedir = path_1.default.join(directory, p);
            if (isDirectory(maybedir)) {
                fs_1.default.rmdirSync(maybedir, { recursive });
            }
        });
    }
    catch (e) { }
}
exports.default = {
    write,
    readBuffer,
    readString,
    readEntity,
    safeReadEntity,
    readJson,
    safeReadJson,
    readFirstOf,
    isDirectory,
    isFile,
    readDirectory,
    mkdir,
    exists,
    append,
    copy,
    remove,
    removeAll,
    flushDirectories,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm9kZS11dGlscy9maWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDRDQUFvQjtBQUNwQixnREFBd0I7QUFFeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDekMsTUFBTSxPQUFPLEdBQW1CLE1BQU0sQ0FBQztBQUV2QyxTQUFTLEtBQUssQ0FDWixVQUFrQixFQUNsQixLQUF1QyxFQUN2QyxVQUFrQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFHckQsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1FBQ3JCLE1BQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQUUsWUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDOztRQUN2RSxZQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3BDLE9BQU8sWUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsVUFBa0I7SUFDcEMsT0FBTyxZQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FDakIsVUFBa0IsRUFDbEIsUUFBeUM7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