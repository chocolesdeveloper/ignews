import * as t from "io-ts";
export declare const Meta: t.ExactC<t.IntersectionC<[t.PartialC<{
    data: t.UnknownC;
}>, t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
    type: t.StringC;
}>]>>;
export declare type Meta = t.TypeOf<typeof Meta>;
export declare const Span: t.ExactC<t.IntersectionC<[t.PartialC<{
    data: t.UnknownC;
}>, t.TypeC<{
    start: t.NumberC;
    end: t.NumberC;
    type: t.StringC;
}>]>>;
export declare type Span = Meta;
export declare const ValidatedMetas: t.Type<({
    data?: unknown;
} & {
    start: number;
    end: number;
    type: string;
})[], ({
    data?: unknown;
} & {
    start: number;
    end: number;
    type: string;
})[], unknown>;
export declare const ImageBlockType = "image";
export declare const ImageBlock: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"image">;
    data: t.IntersectionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        origin: t.ExactC<t.TypeC<{
            id: t.StringC;
            url: t.StringC;
            width: t.NumberC;
            height: t.NumberC;
        }>>;
        width: t.NumberC;
        height: t.NumberC;
        edit: t.TypeC<{
            zoom: t.NumberC;
            crop: t.TypeC<{
                x: t.NumberC;
                y: t.NumberC;
            }>;
            background: t.StringC;
        }>;
    }>, t.PartialC<{
        url: t.StringC;
        credits: t.Type<string | null, string | null, unknown>;
        alt: t.Type<string | null, string | null, unknown>;
        provider: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>, t.PartialC<{
        linkTo: t.UnionC<[t.Type<{
            id: string;
        } | ({
            url: string;
        } & {
            kind?: "web";
            target?: string | null | undefined;
            preview?: {
                title?: string;
            } | null | undefined;
        }) | ({
            id: string;
            url: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
            size?: string | null | undefined;
        }) | ({
            id: string;
            url: string;
            height: string;
            width: string;
            size: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
        }), ({
            id: string;
        } & {
            __TYPE__: "DocumentLink";
        }) | ({
            url: string;
        } & {
            kind?: "web";
            target?: string | null | undefined;
            preview?: {
                title?: string;
            } | null | undefined;
        } & {
            __TYPE__: "ExternalLink";
        }) | {
            readonly size: string;
            readonly __TYPE__: "FileLink";
            readonly id: string;
            readonly url: string;
            readonly name: string;
            readonly kind: string;
            readonly date?: string | null | undefined;
        } | ({
            id: string;
            url: string;
            height: string;
            width: string;
            size: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
        } & {
            __TYPE__: "ImageLink";
        }), unknown>, t.NullC, t.UndefinedC]>;
    }>]>;
}>, t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    direction: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
}>]>>;
export declare type ImageBlock = t.TypeOf<typeof ImageBlock>;
export declare function checkImageBlock(block: Block): block is ImageBlock;
export declare const EmbedBlockType = "embed";
export declare const EmbedBlock: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"embed">;
    data: t.Type<import("../EmbedContent").EmbedContentO, unknown, unknown>;
}>, t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    direction: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
}>]>>;
export declare type EmbedBlock = t.TypeOf<typeof EmbedBlock>;
export declare function checkEmbedBlock(block: Block): block is EmbedBlock;
export declare const TextBlock: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.Type<string, string, unknown>;
    content: t.IntersectionC<[t.TypeC<{
        text: t.StringC;
    }>, t.PartialC<{
        spans: t.Type<({
            data?: unknown;
        } & {
            start: number;
            end: number;
            type: string;
        })[], ({
            data?: unknown;
        } & {
            start: number;
            end: number;
            type: string;
        })[], unknown>;
    }>]>;
}>, t.PartialC<{
    label: t.StringC;
    direction: t.StringC;
}>]>>;
export declare type TextBlock = t.TypeOf<typeof TextBlock>;
export declare const Block: t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"image">;
    data: t.IntersectionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
        origin: t.ExactC<t.TypeC<{
            id: t.StringC;
            url: t.StringC;
            width: t.NumberC;
            height: t.NumberC;
        }>>;
        width: t.NumberC;
        height: t.NumberC;
        edit: t.TypeC<{
            zoom: t.NumberC;
            crop: t.TypeC<{
                x: t.NumberC;
                y: t.NumberC;
            }>;
            background: t.StringC;
        }>;
    }>, t.PartialC<{
        url: t.StringC;
        credits: t.Type<string | null, string | null, unknown>;
        alt: t.Type<string | null, string | null, unknown>;
        provider: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>]>>, t.PartialC<{
        linkTo: t.UnionC<[t.Type<{
            id: string;
        } | ({
            url: string;
        } & {
            kind?: "web";
            target?: string | null | undefined;
            preview?: {
                title?: string;
            } | null | undefined;
        }) | ({
            id: string;
            url: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
            size?: string | null | undefined;
        }) | ({
            id: string;
            url: string;
            height: string;
            width: string;
            size: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
        }), ({
            id: string;
        } & {
            __TYPE__: "DocumentLink";
        }) | ({
            url: string;
        } & {
            kind?: "web";
            target?: string | null | undefined;
            preview?: {
                title?: string;
            } | null | undefined;
        } & {
            __TYPE__: "ExternalLink";
        }) | {
            readonly size: string;
            readonly __TYPE__: "FileLink";
            readonly id: string;
            readonly url: string;
            readonly name: string;
            readonly kind: string;
            readonly date?: string | null | undefined;
        } | ({
            id: string;
            url: string;
            height: string;
            width: string;
            size: string;
            name: string;
            kind: string;
        } & {
            date?: string | null | undefined;
        } & {
            __TYPE__: "ImageLink";
        }), unknown>, t.NullC, t.UndefinedC]>;
    }>]>;
}>, t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    direction: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<"embed">;
    data: t.Type<import("../EmbedContent").EmbedContentO, unknown, unknown>;
}>, t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    direction: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.Type<string, string, unknown>;
    content: t.IntersectionC<[t.TypeC<{
        text: t.StringC;
    }>, t.PartialC<{
        spans: t.Type<({
            data?: unknown;
        } & {
            start: number;
            end: number;
            type: string;
        })[], ({
            data?: unknown;
        } & {
            start: number;
            end: number;
            type: string;
        })[], unknown>;
    }>]>;
}>, t.PartialC<{
    label: t.StringC;
    direction: t.StringC;
}>]>>]>;
export declare type Block = t.TypeOf<typeof Block>;
