import * as t from "io-ts";
import type { SharedSlice } from "./slices/SharedSlice";
import { DynamicSlices, StaticSlices } from "./slices/Slices";
import WidgetTypes from "./WidgetTypes";
export declare function widgetReader<T extends StaticSlices | DynamicSlices>(codec: t.Type<T, unknown>): t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.UID>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Color>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.BooleanField>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        default_value: t.BooleanC;
        placeholder_true: t.StringC;
        placeholder_false: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Embed>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.GeoPoint>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Date>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Number>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Range>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.RichText>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
        single: t.Type<string, string, unknown>;
        multi: t.Type<string, string, unknown>;
        imageConstraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        labels: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Select>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default_value: t.StringC;
        options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Separator>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Text>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Timestamp>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Link>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
        select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
        customtypes: t.ArrayC<t.StringC>;
        masks: t.Type<string[], object, unknown>;
        tags: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Image>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        constraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
            name: t.StringC;
        }>, t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>]>>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.IntegrationField>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        catalog: t.StringC;
    }>>;
}>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Group>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    icon: t.StringC;
    description: t.StringC;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        repeat: t.BooleanC;
        fields: t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Color>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.BooleanField>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Embed>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.GeoPoint>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Date>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Number>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Range>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.RichText>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Select>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Separator>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Text>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Timestamp>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Link>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ArrayC<t.StringC>;
                masks: t.Type<string[], object, unknown>;
                tags: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Image>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.IntegrationField>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
    }>>;
}>]>>, t.Type<T, unknown, unknown>]>;
export declare const StaticWidget: t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.UID>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Color>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.BooleanField>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        default_value: t.BooleanC;
        placeholder_true: t.StringC;
        placeholder_false: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Embed>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.GeoPoint>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Date>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Number>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Range>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.RichText>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
        single: t.Type<string, string, unknown>;
        multi: t.Type<string, string, unknown>;
        imageConstraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        labels: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Select>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default_value: t.StringC;
        options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Separator>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Text>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Timestamp>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Link>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
        select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
        customtypes: t.ArrayC<t.StringC>;
        masks: t.Type<string[], object, unknown>;
        tags: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Image>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        constraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
            name: t.StringC;
        }>, t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>]>>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.IntegrationField>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        catalog: t.StringC;
    }>>;
}>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Group>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    icon: t.StringC;
    description: t.StringC;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        repeat: t.BooleanC;
        fields: t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Color>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.BooleanField>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Embed>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.GeoPoint>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Date>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Number>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Range>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.RichText>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Select>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Separator>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Text>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Timestamp>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Link>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ArrayC<t.StringC>;
                masks: t.Type<string[], object, unknown>;
                tags: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Image>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.IntegrationField>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
    }>>;
}>]>>, t.Type<{
    type: WidgetTypes.Slices | WidgetTypes.LegacySlices;
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        labels?: {
            [x: string]: ({
                name: string;
            } & {
                display?: string;
            })[];
        } | null;
        choices?: {
            [x: string]: ({
                type: WidgetTypes.BooleanField;
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: WidgetTypes.Color;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: WidgetTypes.Date;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: WidgetTypes.Embed;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: WidgetTypes.GeoPoint;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: WidgetTypes.Image;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: WidgetTypes.IntegrationField;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: WidgetTypes.Link;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: string[];
                    masks?: string[];
                    tags?: string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: WidgetTypes.Number;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: WidgetTypes.Range;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: WidgetTypes.RichText;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: WidgetTypes.Select;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: string[];
                };
            }) | ({
                type: WidgetTypes.Separator;
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: WidgetTypes.Text;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: WidgetTypes.Timestamp;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                id: string;
                type: import("./slices/SlicesTypes").default.SharedSlice;
                name: string;
                variations: ({
                    id: string;
                    name: string;
                    description: string;
                    imageUrl: string;
                    docURL: string;
                    version: string;
                } & {
                    display?: string;
                    primary?: {
                        [x: string]: ({
                            type: WidgetTypes.BooleanField;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Color;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Date;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Embed;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.GeoPoint;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Image;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: WidgetTypes.IntegrationField;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Link;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: string[];
                                masks?: string[];
                                tags?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Number;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.Range;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.RichText;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Select;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: string[];
                            };
                        }) | ({
                            type: WidgetTypes.Separator;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Text;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Timestamp;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                    items?: {
                        [x: string]: ({
                            type: WidgetTypes.BooleanField;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Color;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Date;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Embed;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.GeoPoint;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Image;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: WidgetTypes.IntegrationField;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Link;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: string[];
                                masks?: string[];
                                tags?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Number;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.Range;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.RichText;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Select;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: string[];
                            };
                        }) | ({
                            type: WidgetTypes.Separator;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Text;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Timestamp;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                })[];
            } & {
                description?: string;
            }) | ({
                type: WidgetTypes.Group;
            } & {
                fieldset?: string | null | undefined;
                icon?: string;
                description?: string;
                config?: {
                    label?: string | null | undefined;
                    repeat?: boolean;
                    fields?: {
                        [x: string]: ({
                            type: WidgetTypes.BooleanField;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Color;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Date;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Embed;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.GeoPoint;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Image;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: WidgetTypes.IntegrationField;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Link;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: string[];
                                masks?: string[];
                                tags?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Number;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.Range;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.RichText;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Select;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: string[];
                            };
                        }) | ({
                            type: WidgetTypes.Separator;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Text;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Timestamp;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                };
            }) | ({
                type: import("./slices/SlicesTypes").default.Slice;
            } & {
                fieldset?: string | null | undefined;
                description?: string;
                icon?: string;
                display?: string;
                "non-repeat"?: {
                    [x: string]: ({
                        type: WidgetTypes.BooleanField;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Color;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Date;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Embed;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.GeoPoint;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Image;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: WidgetTypes.IntegrationField;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Link;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: string[];
                            masks?: string[];
                            tags?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Number;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.Range;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.RichText;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Select;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: string[];
                        };
                    }) | ({
                        type: WidgetTypes.Separator;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Text;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Timestamp;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                repeat?: {
                    [x: string]: ({
                        type: WidgetTypes.BooleanField;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Color;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Date;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Embed;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.GeoPoint;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Image;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: WidgetTypes.IntegrationField;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Link;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: string[];
                            masks?: string[];
                            tags?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Number;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.Range;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.RichText;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Select;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: string[];
                        };
                    }) | ({
                        type: WidgetTypes.Separator;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Text;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Timestamp;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                config?: {
                    label?: string | null | undefined;
                };
            });
        };
    };
}, unknown, unknown>]>;
export declare type StaticWidget = t.TypeOf<typeof StaticWidget>;
export declare const DynamicWidget: t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.UID>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Color>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.BooleanField>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        default_value: t.BooleanC;
        placeholder_true: t.StringC;
        placeholder_false: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Embed>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.GeoPoint>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Date>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Number>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Range>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
        step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.RichText>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
        single: t.Type<string, string, unknown>;
        multi: t.Type<string, string, unknown>;
        imageConstraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        labels: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Select>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default_value: t.StringC;
        options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Separator>;
}>, t.PartialC<{
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Text>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Timestamp>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        default: t.StringC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Link>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        useAsTitle: t.BooleanC;
        placeholder: t.StringC;
        select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
        customtypes: t.ArrayC<t.StringC>;
        masks: t.Type<string[], object, unknown>;
        tags: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Image>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        constraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
            name: t.StringC;
        }>, t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>]>>>;
    }>>;
}>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.IntegrationField>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        catalog: t.StringC;
    }>>;
}>]>>]>, t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.Group>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    icon: t.StringC;
    description: t.StringC;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        repeat: t.BooleanC;
        fields: t.RecordC<t.StringC, t.UnionC<[t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Color>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.BooleanField>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                default_value: t.BooleanC;
                placeholder_true: t.StringC;
                placeholder_false: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Embed>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.GeoPoint>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Date>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Number>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Range>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                min: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                max: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
                step: t.UnionC<[t.NumberC, import("io-ts-types").NumberFromStringC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.RichText>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                useAsTitle: t.BooleanC;
                single: t.Type<string, string, unknown>;
                multi: t.Type<string, string, unknown>;
                imageConstraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                labels: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Select>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default_value: t.StringC;
                options: t.ArrayC<t.UnionC<[t.StringC, t.Type<string, string, unknown>, t.Type<string, string, unknown>]>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Separator>;
        }>, t.PartialC<{
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Text>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Timestamp>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                default: t.StringC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Link>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                useAsTitle: t.BooleanC;
                placeholder: t.StringC;
                select: t.UnionC<[t.LiteralC<"media">, t.LiteralC<"document">, t.LiteralC<"web">, t.NullC]>;
                customtypes: t.ArrayC<t.StringC>;
                masks: t.Type<string[], object, unknown>;
                tags: t.Type<string[], object, unknown>;
                allowTargetBlank: t.BooleanC;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.Image>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                constraint: t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>;
                thumbnails: t.ArrayC<t.ExactC<t.IntersectionC<[t.TypeC<{
                    name: t.StringC;
                }>, t.PartialC<{
                    width: t.Type<number | null, unknown, unknown>;
                    height: t.Type<number | null, unknown, unknown>;
                }>]>>>;
            }>>;
        }>]>>, t.ExactC<t.IntersectionC<[t.TypeC<{
            type: t.LiteralC<WidgetTypes.IntegrationField>;
        }>, t.PartialC<{
            fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
            config: t.ExactC<t.PartialC<{
                label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
                placeholder: t.StringC;
                catalog: t.StringC;
            }>>;
        }>]>>]>>;
    }>>;
}>]>>, t.Type<{
    type: WidgetTypes.Slices | WidgetTypes.LegacySlices;
} & {
    fieldset?: string | null | undefined;
    config?: {
        label?: string | null | undefined;
        labels?: {
            [x: string]: ({
                name: string;
            } & {
                display?: string;
            })[];
        } | null;
        choices?: {
            [x: string]: ({
                type: WidgetTypes.BooleanField;
            } & {
                config?: {
                    label?: string | null | undefined;
                    default_value?: boolean;
                    placeholder_true?: string;
                    placeholder_false?: string;
                };
            }) | ({
                type: WidgetTypes.Color;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                };
            }) | ({
                type: WidgetTypes.Date;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: WidgetTypes.Embed;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                };
            }) | ({
                type: WidgetTypes.GeoPoint;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: WidgetTypes.Image;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    constraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    thumbnails?: ({
                        name: string;
                    } & {
                        width?: number | null;
                        height?: number | null;
                    })[];
                };
            }) | ({
                type: WidgetTypes.IntegrationField;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    catalog?: string;
                };
            }) | ({
                type: WidgetTypes.Link;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                    select?: "media" | "document" | "web" | null;
                    customtypes?: string[];
                    masks?: string[];
                    tags?: string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: WidgetTypes.Number;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: WidgetTypes.Range;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    min?: number;
                    max?: number;
                    step?: number;
                };
            }) | ({
                type: WidgetTypes.RichText;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    useAsTitle?: boolean;
                    single?: string;
                    multi?: string;
                    imageConstraint?: {
                        width?: number | null;
                        height?: number | null;
                    };
                    labels?: string[];
                    allowTargetBlank?: boolean;
                };
            }) | ({
                type: WidgetTypes.Select;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default_value?: string;
                    options?: string[];
                };
            }) | ({
                type: WidgetTypes.Separator;
            } & {
                config?: {
                    label?: string | null | undefined;
                };
            }) | ({
                type: WidgetTypes.Text;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    useAsTitle?: boolean;
                    placeholder?: string;
                };
            }) | ({
                type: WidgetTypes.Timestamp;
            } & {
                fieldset?: string | null | undefined;
                config?: {
                    label?: string | null | undefined;
                    placeholder?: string;
                    default?: string;
                };
            }) | ({
                type: WidgetTypes.Group;
            } & {
                fieldset?: string | null | undefined;
                icon?: string;
                description?: string;
                config?: {
                    label?: string | null | undefined;
                    repeat?: boolean;
                    fields?: {
                        [x: string]: ({
                            type: WidgetTypes.BooleanField;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                                default_value?: boolean;
                                placeholder_true?: string;
                                placeholder_false?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Color;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Date;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Embed;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.GeoPoint;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Image;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                constraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                thumbnails?: ({
                                    name: string;
                                } & {
                                    width?: number | null;
                                    height?: number | null;
                                })[];
                            };
                        }) | ({
                            type: WidgetTypes.IntegrationField;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                catalog?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Link;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                                select?: "media" | "document" | "web" | null;
                                customtypes?: string[];
                                masks?: string[];
                                tags?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Number;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.Range;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                min?: number;
                                max?: number;
                                step?: number;
                            };
                        }) | ({
                            type: WidgetTypes.RichText;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                useAsTitle?: boolean;
                                single?: string;
                                multi?: string;
                                imageConstraint?: {
                                    width?: number | null;
                                    height?: number | null;
                                };
                                labels?: string[];
                                allowTargetBlank?: boolean;
                            };
                        }) | ({
                            type: WidgetTypes.Select;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default_value?: string;
                                options?: string[];
                            };
                        }) | ({
                            type: WidgetTypes.Separator;
                        } & {
                            config?: {
                                label?: string | null | undefined;
                            };
                        }) | ({
                            type: WidgetTypes.Text;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                useAsTitle?: boolean;
                                placeholder?: string;
                            };
                        }) | ({
                            type: WidgetTypes.Timestamp;
                        } & {
                            fieldset?: string | null | undefined;
                            config?: {
                                label?: string | null | undefined;
                                placeholder?: string;
                                default?: string;
                            };
                        });
                    };
                };
            }) | ({
                type: import("./slices/SlicesTypes").default.Slice;
            } & {
                fieldset?: string | null | undefined;
                description?: string;
                icon?: string;
                display?: string;
                "non-repeat"?: {
                    [x: string]: ({
                        type: WidgetTypes.BooleanField;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Color;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Date;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Embed;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.GeoPoint;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Image;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: WidgetTypes.IntegrationField;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Link;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: string[];
                            masks?: string[];
                            tags?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Number;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.Range;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.RichText;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Select;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: string[];
                        };
                    }) | ({
                        type: WidgetTypes.Separator;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Text;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Timestamp;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                repeat?: {
                    [x: string]: ({
                        type: WidgetTypes.BooleanField;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                            default_value?: boolean;
                            placeholder_true?: string;
                            placeholder_false?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Color;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Date;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Embed;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.GeoPoint;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Image;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            constraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            thumbnails?: ({
                                name: string;
                            } & {
                                width?: number | null;
                                height?: number | null;
                            })[];
                        };
                    }) | ({
                        type: WidgetTypes.IntegrationField;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            catalog?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Link;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                            select?: "media" | "document" | "web" | null;
                            customtypes?: string[];
                            masks?: string[];
                            tags?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Number;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.Range;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            min?: number;
                            max?: number;
                            step?: number;
                        };
                    }) | ({
                        type: WidgetTypes.RichText;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            useAsTitle?: boolean;
                            single?: string;
                            multi?: string;
                            imageConstraint?: {
                                width?: number | null;
                                height?: number | null;
                            };
                            labels?: string[];
                            allowTargetBlank?: boolean;
                        };
                    }) | ({
                        type: WidgetTypes.Select;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default_value?: string;
                            options?: string[];
                        };
                    }) | ({
                        type: WidgetTypes.Separator;
                    } & {
                        config?: {
                            label?: string | null | undefined;
                        };
                    }) | ({
                        type: WidgetTypes.Text;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            useAsTitle?: boolean;
                            placeholder?: string;
                        };
                    }) | ({
                        type: WidgetTypes.Timestamp;
                    } & {
                        fieldset?: string | null | undefined;
                        config?: {
                            label?: string | null | undefined;
                            placeholder?: string;
                            default?: string;
                        };
                    });
                };
                config?: {
                    label?: string | null | undefined;
                };
            }) | {
                type: import("./slices/SlicesTypes").default.SharedSlice;
            };
        };
    };
}, unknown, unknown>]>;
export declare type DynamicWidget = t.TypeOf<typeof DynamicWidget>;
export declare const Widgets: {
    toStatic(widget: DynamicWidget, sharedSlices: Map<string, SharedSlice>): StaticWidget;
};
