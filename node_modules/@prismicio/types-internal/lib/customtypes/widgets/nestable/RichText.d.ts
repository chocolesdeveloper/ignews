import * as t from "io-ts";
import WidgetTypes from "../WidgetTypes";
export declare const DEFAULT_OPTION = "paragraph";
export declare enum RichTextNodeType {
    heading1 = "heading1",
    heading2 = "heading2",
    heading3 = "heading3",
    heading4 = "heading4",
    heading5 = "heading5",
    heading6 = "heading6",
    paragraph = "paragraph",
    strong = "strong",
    em = "em",
    preformatted = "preformatted",
    hyperlink = "hyperlink",
    image = "image",
    embed = "embed",
    list = "list-item",
    orderedList = "o-list-item",
    rtl = "rtl"
}
export declare function parseRichTextNodeType(str: string): RichTextNodeType | undefined;
export declare const RichTextConfig: t.ExactC<t.PartialC<{
    label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    placeholder: t.StringC;
    useAsTitle: t.BooleanC;
    single: t.Type<string, string, unknown>;
    multi: t.Type<string, string, unknown>;
    imageConstraint: t.PartialC<{
        width: t.Type<number | null, unknown, unknown>;
        height: t.Type<number | null, unknown, unknown>;
    }>;
    labels: t.Type<string[], object, unknown>;
    allowTargetBlank: t.BooleanC;
}>>;
export declare type RichTextConfig = t.TypeOf<typeof RichTextConfig>;
export declare const RichText: t.ExactC<t.IntersectionC<[t.TypeC<{
    type: t.LiteralC<WidgetTypes.RichText>;
}>, t.PartialC<{
    fieldset: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
    config: t.ExactC<t.PartialC<{
        label: t.UnionC<[t.Type<string, string, unknown>, t.NullC, t.UndefinedC]>;
        placeholder: t.StringC;
        useAsTitle: t.BooleanC;
        single: t.Type<string, string, unknown>;
        multi: t.Type<string, string, unknown>;
        imageConstraint: t.PartialC<{
            width: t.Type<number | null, unknown, unknown>;
            height: t.Type<number | null, unknown, unknown>;
        }>;
        labels: t.Type<string[], object, unknown>;
        allowTargetBlank: t.BooleanC;
    }>>;
}>]>>;
export declare type RichText = t.TypeOf<typeof RichText>;
