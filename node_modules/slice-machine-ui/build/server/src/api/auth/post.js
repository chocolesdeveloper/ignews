"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("io-ts"));
const Either_1 = require("fp-ts/Either");
const core_1 = require("@slicemachine/core");
const prismic_1 = require("@slicemachine/core/build/prismic");
const AuthRequest = t.type({
    email: t.string,
    cookies: t.array(t.string),
});
function handler(authRequest) {
    return Either_1.fold(() => ({
        err: new Error("Invalid auth payload"),
    }), (authRequest) => {
        prismic_1.PrismicSharedConfigManager.setProperties({
            cookies: core_1.Utils.Cookie.serializeCookies(authRequest.cookies),
        });
        return {};
    })(AuthRequest.decode(authRequest));
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL2F1dGgvcG9zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBMkI7QUFDM0IseUNBQW9DO0FBQ3BDLDZDQUEyQztBQUMzQyw4REFBOEU7QUFFOUUsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN6QixLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDZixPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0NBQzNCLENBQUMsQ0FBQztBQVFILFNBQXdCLE9BQU8sQ0FDN0IsV0FBb0M7SUFFcEMsT0FBTyxhQUFJLENBQ1QsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNMLEdBQUcsRUFBRSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztLQUN2QyxDQUFDLEVBQ0YsQ0FBQyxXQUF3QixFQUFFLEVBQUU7UUFDM0Isb0NBQTBCLENBQUMsYUFBYSxDQUFDO1lBQ3ZDLE9BQU8sRUFBRSxZQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7U0FDNUQsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDLENBQ0YsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQWRELDBCQWNDIn0=