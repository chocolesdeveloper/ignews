"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBackendState = void 0;
const libraries_1 = __importDefault(require("./libraries"));
const index_1 = __importDefault(require("./custom-types/index"));
const generate_1 = require("./common/generate");
const DefaultClient_1 = __importDefault(require("@lib/models/common/http/DefaultClient"));
const getAndSetUserProfile_1 = require("./services/getAndSetUserProfile");
const preferWroomBase_1 = __importDefault(require("../../../lib/utils/preferWroomBase"));
const prismic_1 = require("@slicemachine/core/build/prismic");
const node_utils_1 = require("@slicemachine/core/build/node-utils");
const getBackendState = async (configErrors, env) => {
    const { libraries, remoteSlices, clientError } = await libraries_1.default(env);
    const { customTypes, remoteCustomTypes } = await index_1.default(env);
    const base = preferWroomBase_1.default(env.manifest.apiEndpoint);
    if (env.isUserLoggedIn && env.prismicData.auth) {
        try {
            const newTokenResponse = await DefaultClient_1.default.refreshToken(base, env.prismicData.auth);
            if (newTokenResponse.status &&
                Math.floor(newTokenResponse.status / 100) === 2) {
                const newToken = await newTokenResponse.text();
                prismic_1.PrismicSharedConfigManager.setAuthCookie(newToken);
                if (!env.prismicData.shortId || !env.prismicData.intercomHash)
                    await getAndSetUserProfile_1.getAndSetUserProfile(env, newToken);
            }
        }
        catch (e) {
            console.error("[Refresh token]: Internal error : ", e);
        }
    }
    generate_1.generate(env, libraries);
    return {
        libraries,
        customTypes,
        remoteCustomTypes,
        remoteSlices,
        clientError,
        configErrors,
        env,
    };
};
exports.getBackendState = getBackendState;
async function handler(req) {
    const { errors: configErrors, env } = req;
    const serverState = await exports.getBackendState(configErrors, env);
    const { client, cwd, prismicData, baseUrl, ...frontEnv } = serverState.env;
    const frontEndEnv = {
        ...frontEnv,
        sliceMachineAPIUrl: baseUrl,
        packageManager: node_utils_1.Files.exists(node_utils_1.YarnLockPath(cwd)) ? "yarn" : "npm",
        shortId: prismicData.shortId,
        intercomHash: prismicData.intercomHash,
    };
    return {
        customTypes: serverState.customTypes,
        remoteCustomTypes: serverState.remoteCustomTypes,
        libraries: serverState.libraries,
        remoteSlices: serverState.remoteSlices,
        env: frontEndEnv,
    };
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0REFBb0M7QUFDcEMsaUVBQW9EO0FBT3BELGdEQUE2QztBQUM3QywwRkFBa0U7QUFHbEUsMEVBQXVFO0FBQ3ZFLHlGQUFpRTtBQUNqRSw4REFBOEU7QUFDOUUsb0VBQTBFO0FBRW5FLE1BQU0sZUFBZSxHQUFHLEtBQUssRUFDbEMsWUFBeUMsRUFDekMsR0FBdUIsRUFDdkIsRUFBRTtJQUNGLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxHQUFHLE1BQU0sbUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RSxNQUFNLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxlQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZFLE1BQU0sSUFBSSxHQUFHLHlCQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUd2RCxJQUFJLEdBQUcsQ0FBQyxjQUFjLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7UUFDOUMsSUFBSTtZQUNGLE1BQU0sZ0JBQWdCLEdBQWEsTUFBTSx1QkFBYSxDQUFDLFlBQVksQ0FDakUsSUFBSSxFQUNKLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUNyQixDQUFDO1lBRUYsSUFDRSxnQkFBZ0IsQ0FBQyxNQUFNO2dCQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQy9DO2dCQUNBLE1BQU0sUUFBUSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQy9DLG9DQUEwQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFHbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZO29CQUMzRCxNQUFNLDJDQUFvQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUM3QztTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3hEO0tBQ0Y7SUFFRCxtQkFBUSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUV6QixPQUFPO1FBQ0wsU0FBUztRQUNULFdBQVc7UUFDWCxpQkFBaUI7UUFDakIsWUFBWTtRQUNaLFdBQVc7UUFDWCxZQUFZO1FBQ1osR0FBRztLQUNKLENBQUM7QUFDSixDQUFDLENBQUM7QUE1Q1csUUFBQSxlQUFlLG1CQTRDMUI7QUFFYSxLQUFLLFVBQVUsT0FBTyxDQUNuQyxHQUFtQjtJQUVuQixNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDMUMsTUFBTSxXQUFXLEdBQUcsTUFBTSx1QkFBZSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUU3RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUMzRSxNQUFNLFdBQVcsR0FBd0I7UUFDdkMsR0FBRyxRQUFRO1FBQ1gsa0JBQWtCLEVBQUUsT0FBTztRQUMzQixjQUFjLEVBQUUsa0JBQUssQ0FBQyxNQUFNLENBQUMseUJBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFDaEUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxPQUFPO1FBQzVCLFlBQVksRUFBRSxXQUFXLENBQUMsWUFBWTtLQUN2QyxDQUFDO0lBRUYsT0FBTztRQUNMLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVztRQUNwQyxpQkFBaUIsRUFBRSxXQUFXLENBQUMsaUJBQWlCO1FBQ2hELFNBQVMsRUFBRSxXQUFXLENBQUMsU0FBUztRQUNoQyxZQUFZLEVBQUUsV0FBVyxDQUFDLFlBQVk7UUFDdEMsR0FBRyxFQUFFLFdBQVc7S0FDakIsQ0FBQztBQUNKLENBQUM7QUF0QkQsMEJBc0JDIn0=