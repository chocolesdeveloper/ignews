"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushSlice = void 0;
const getEnv_1 = __importDefault(require("../services/getEnv"));
const _1 = require("./");
const error_1 = require("../common/error");
const uploadScreenshotClient_1 = require("../services/uploadScreenshotClient");
const paths_1 = require("@lib/models/paths");
const sliceService_1 = require("../services/sliceService");
const IO = __importStar(require("../io"));
async function pushSlice(env, slices, { sliceName, from }) {
    const modelPath = paths_1.CustomPaths(env.cwd).library(from).slice(sliceName).model();
    try {
        const smModel = IO.Slice.readSlice(modelPath);
        const { err } = await uploadScreenshotClient_1.purge(env, slices, sliceName);
        if (err)
            return err;
        const screenshotUrlsByVariation = await sliceService_1.uploadScreenshots(env, smModel, sliceName, from);
        console.log("[slice/push]: pushing slice model to Prismic");
        const variations = smModel.variations.map((variation) => {
            const imageUrl = screenshotUrlsByVariation[variation.id];
            if (!imageUrl)
                return variation;
            return {
                ...variation,
                imageUrl,
            };
        });
        const modelWithImageUrl = {
            ...smModel,
            variations,
        };
        const res = await sliceService_1.createOrUpdate(slices, sliceName, modelWithImageUrl, env.client);
        if (res.status > 209) {
            const message = res.text ? await res.text() : res.status.toString();
            console.error(`[slice/push] Slice ${sliceName}: Unexpected error returned. Server message: ${message}`);
            throw new Error(message);
        }
        console.log("[slice/push] done!");
        return {};
    }
    catch (e) {
        console.log(e);
        return error_1.onError(e, "[slice/push] An unexpected error occurred while pushing slice");
    }
}
exports.pushSlice = pushSlice;
const handler = async (query) => {
    const { sliceName, from } = query;
    const { env } = await getEnv_1.default();
    if (!env.isUserLoggedIn) {
        console.error("[slice/push] An error occurred while fetching slices.");
        const message = "Error: Could not fetch remote slices. Please log in to Prismic!";
        return {
            err: new Error(message),
            reason: message,
            status: 403,
        };
    }
    const { slices, err } = await _1.getSlices(env.client);
    if (err) {
        console.error("[slice/push] An error occurred while fetching slices.");
        const errorExplanation = err.status === 403
            ? "Please log in to Prismic!"
            :
                `You don\'t have access to the repo \"${env.repo}\"`;
        return error_1.onError(err, `Error ${err.status}: Could not fetch remote slices. ${errorExplanation}`);
    }
    return pushSlice(env, slices, { sliceName, from });
};
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL3NsaWNlcy9wdXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnRUFBd0M7QUFDeEMseUJBQStCO0FBRS9CLDJDQUEwQztBQUMxQywrRUFBMkQ7QUFDM0QsNkNBQWdEO0FBR2hELDJEQUE2RTtBQUc3RSwwQ0FBNEI7QUFFckIsS0FBSyxVQUFVLFNBQVMsQ0FDN0IsR0FBdUIsRUFDdkIsTUFBOEIsRUFDOUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUF1QztJQUV4RCxNQUFNLFNBQVMsR0FBRyxtQkFBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTlFLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBWSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSw4QkFBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFcEQsSUFBSSxHQUFHO1lBQUUsT0FBTyxHQUFHLENBQUM7UUFFcEIsTUFBTSx5QkFBeUIsR0FDN0IsTUFBTSxnQ0FBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6RCxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7UUFFNUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFzQixFQUFFLEVBQUU7WUFDbkUsTUFBTSxRQUFRLEdBQUcseUJBQXlCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pE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