"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const paths_1 = require("@lib/models/paths");
const storybook_1 = __importDefault(require("../storybook"));
const getEnv_1 = __importDefault(require("../services/getEnv"));
const Slice_1 = __importDefault(require("@lib/mock/Slice"));
const fs_1 = require("@lib/mock/misc/fs");
const files_1 = __importDefault(require("@lib/utils/files"));
const MockConfig_1 = require("@lib/models/common/MockConfig");
const generate_1 = require("../screenshots/generate");
const onSaveSlice_1 = __importDefault(require("../common/hooks/onSaveSlice"));
const onBeforeSaveSlice_1 = __importDefault(require("../common/hooks/onBeforeSaveSlice"));
const IO = __importStar(require("../io"));
async function handler(env, { sliceName, from, model: smModel, mockConfig }) {
    await onBeforeSaveSlice_1.default({ from, sliceName }, env);
    const updatedMockConfig = mockConfig
        ? fs_1.insert(env.cwd, {
            key: sliceName,
            prefix: from,
            value: mockConfig,
        })
        : fs_1.getConfig(env.cwd);
    console.log("\n\n[slice/save]: Updating slice model");
    const modelPath = paths_1.CustomPaths(env.cwd).library(from).slice(sliceName).model();
    IO.Slice.writeSlice(modelPath, smModel);
    const hasCustomMocks = files_1.default.exists(paths_1.CustomPaths(env.cwd).library(from).slice(sliceName).mocks());
    if (!hasCustomMocks) {
        console.log("[slice/save]: Generating mocks");
        const mocks = Slice_1.default(sliceName, smModel, MockConfig_1.SliceMockConfig.getSliceMockConfig(updatedMockConfig, from, sliceName));
        files_1.default.write(paths_1.GeneratedPaths(env.cwd).library(from).slice(sliceName).mocks(), mocks);
    }
    console.log("[slice/save]: Generating stories");
    storybook_1.default.generateStories(appRoot, env.framework, env.cwd, from, sliceName);
    console.log("[slice/save]: Slice was saved!");
    await onSaveSlice_1.default(env);
    console.log("[slice/save]: Libraries index files regenerated!");
    const { screenshots, warning } = await generateScreenshotsWithLogs(env, from, sliceName);
    return { screenshots, warning };
}
exports.handler = handler;
async function generateScreenshotsWithLogs(env, from, sliceName) {
    if (!env.manifest.localSliceSimulatorURL) {
        const message = "localSliceSimulatorURL not configured on sm.json file";
        console.log(`[slice/save]: Cannot not generate screenshots: ${message}`);
        return Promise.resolve({ screenshots: {}, warning: message });
    }
    console.log("[slice/save]: Generating screenshots previews");
    const { screenshots, failure } = await generate_1.generateScreenshot(env, from, sliceName);
    if (failure.length) {
        failure.forEach((f) => {
            console.log(`[slice/save][Slice: ${sliceName}][variation: ${f.variationId}]: ${f.error.message}`);
        });
        return {
            screenshots,
            warning: `Could not generate previews for variations: ${failure
                .map((f) => f.variationId)
                .join(" | ")}`,
        };
    }
    return { screenshots, warning: null };
}
async function apiHandler(req) {
    const { env } = await getEnv_1.default();
    return handler(env, req.body);
}
exports.default = apiHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL3NsaWNlcy9zYXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSw2Q0FBZ0U7QUFDaEUsNkRBQXFDO0FBRXJDLGdFQUF3QztBQUN4Qyw0REFBbUM7QUFDbkMsMENBQTBFO0FBQzFFLDZEQUFxQztBQUNyQyw4REFBZ0U7QUFDaEUsc0RBQTZEO0FBRzdELDhFQUFzRDtBQUN0RCwwRkFBa0U7QUFFbEUsMENBQTRCO0FBRXJCLEtBQUssVUFBVSxPQUFPLENBQzNCLEdBQXVCLEVBQ3ZCLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBaUI7SUFFOUQsTUFBTSwyQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUdsRCxNQUFNLGlCQUFpQixHQUFHLFVBQVU7UUFDbEMsQ0FBQyxDQUFDLFdBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUN4QixHQUFHLEVBQUUsU0FBUztZQUNkLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLFVBQVU7U0FDbEIsQ0FBQztRQUNKLENBQUMsQ0FBQyxjQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztJQUd0RCxNQUFNLFNBQVMsR0FBRyxtQkFBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTlFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV4QyxNQUFNLGNBQWMsR0FB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