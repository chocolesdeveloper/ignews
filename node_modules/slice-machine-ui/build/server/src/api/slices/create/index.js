"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const copy_template_dir_1 = __importDefault(require("copy-template-dir"));
const getEnv_1 = __importDefault(require("../../services/getEnv"));
const str_1 = require("@lib/utils/str");
const files_1 = __importDefault(require("@lib/utils/files"));
const consts_1 = require("@lib/consts");
const IO = __importStar(require("../../io"));
const save_1 = __importDefault(require("../save"));
const paths_1 = require("@lib/models/paths");
const consts_2 = require("@lib/consts");
const copy = util_1.promisify(copy_template_dir_1.default);
const copyTemplate = async (env, templatePath, from, sliceName) => {
    try {
        await copy(templatePath, path_1.default.join(env.cwd, from, sliceName), {
            componentName: sliceName,
            componentId: str_1.snakelize(sliceName),
            variationId: consts_1.DEFAULT_VARIATION_ID,
        });
    }
    catch (e) {
        const message = `[create] Could not copy template. Full error: ${e}`;
        console.error(message);
        return {
            err: new Error(message),
            status: 500,
            reason: message,
        };
    }
};
const fromTemplate = async (env, from, sliceName) => {
    const templatePath = path_1.default.join(appRoot, "templates", "slice", env.framework);
    if (!files_1.default.isDirectory(templatePath)) {
        const message = `[create] Framework "${env.framework}" is not supported. (${templatePath}).`;
        console.error(message);
        return {
            err: new Error(message),
            status: 500,
            reason: message,
        };
    }
    return copyTemplate(env, templatePath, from, sliceName);
};
async function handler({ sliceName, from, }) {
    if (consts_2.RESERVED_SLICE_NAME.includes(sliceName)) {
        const msg = `The slice name '${sliceName}' is reserved for slice machine use`;
        return { err: new Error(msg), status: 400, reason: msg };
    }
    const { env } = await getEnv_1.default();
    const pathToModel = paths_1.paths(env.cwd, "").library(from).slice(sliceName).model();
    const templatePath = paths_1.SliceTemplateConfig(env.cwd);
    if (files_1.default.exists(templatePath) && files_1.default.isDirectory(templatePath)) {
        await copyTemplate(env, templatePath, from, sliceName);
    }
    else {
        const maybeError = await fromTemplate(env, from, sliceName);
        if (maybeError) {
            return maybeError;
        }
    }
    if (files_1.default.exists(pathToModel)) {
        const smModel = IO.Slice.readSlice(pathToModel);
        const res = await save_1.default({
            body: { sliceName, from, model: smModel, mockConfig: {} },
        });
        return { ...res, variationId: consts_1.DEFAULT_VARIATION_ID };
    }
    const msg = `[create] Could not find file model.json. Exiting...`;
    return { err: new Error(msg), status: 500, reason: msg };
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9zbGljZXMvY3JlYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLGdEQUF3QjtBQUN4QiwrQkFBaUM7QUFJakMsMEVBQW9DO0FBSXBDLG1FQUEyQztBQUMzQyx3Q0FBMkM7QUFDM0MsNkRBQXFDO0FBQ3JDLHdDQUFtRDtBQUNuRCw2Q0FBK0I7QUFFL0IsbURBQTJCO0FBRTNCLDZDQUErRDtBQUUvRCx3Q0FBa0Q7QUFHbEQsTUFBTSxJQUFJLEdBQUcsZ0JBQVMsQ0FBQywyQkFBRyxDQUFDLENBQUM7QUFFNUIsTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUN4QixHQUF1QixFQUN2QixZQUFvQixFQUNwQixJQUFZLEVBQ1osU0FBaUIsRUFDakIsRUFBRTtJQUNGLElBQUk7UUFDRixNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRTtZQUM1RCxhQUFhLEVBQUUsU0FBUztZQUN4QixXQUFXLEVBQUUsZUFBUyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxXQUFXLEVBQUUsNkJBQW9CO1NBQ2xDLENBQUMsQ0FBQztLQUNKO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVixNQUFNLE9BQU8sR0FBRyxpREFBaUQsQ0FBQyxFQUFFLENBQUM7UUFDckUsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QixPQUFPO1lBQ0wsR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUN2QixNQUFNLEVBQUUsR0FBRztZQUNYLE1BQU0sRUFBRSxPQUFPO1NBQ2hCLENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFDeEIs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