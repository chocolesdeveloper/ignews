"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeCustomScreenshot = exports.generateScreenshot = exports.generateScreenshotAndRemoveCustom = void 0;
const files_1 = __importDefault(require("@lib/utils/files"));
const NodeUtils = __importStar(require("@slicemachine/core/build/node-utils"));
const puppeteer_1 = __importDefault(require("./puppeteer"));
const screenshot_1 = require("@slicemachine/core/build/libraries/screenshot");
const ComponentUI_1 = require("@lib/models/common/ComponentUI");
const IO = __importStar(require("../io"));
async function generateScreenshotAndRemoveCustom(env, libraryName, sliceName) {
    const { screenshots, failure } = await generateScreenshot(env, libraryName, sliceName);
    Object.keys(screenshots).forEach((variationId) => removeCustomScreenshot(env, libraryName, sliceName, variationId));
    return {
        screenshots: screenshots,
        failure: failure,
    };
}
exports.generateScreenshotAndRemoveCustom = generateScreenshotAndRemoveCustom;
async function generateScreenshot(env, libraryName, sliceName) {
    const slice = IO.Slice.readSlice(NodeUtils.CustomPaths(env.cwd).library(libraryName).slice(sliceName).model());
    const variationIds = slice.variations.map((v) => v.id);
    const promises = variationIds.map((id) => generateForVariation(env, libraryName, slice, id));
    const results = await Promise.allSettled(promises);
    return results.reduce((acc, result, index) => {
        const key = variationIds[index];
        const screenshots = result.status === "fulfilled"
            ? {
                ...acc.screenshots,
                [key]: result.value,
            }
            : acc.screenshots;
        const failure = result.status === "rejected"
            ? [
                ...acc.failure,
                { error: result.reason, variationId: key },
            ]
            : acc.failure;
        return { screenshots, failure };
    }, { screenshots: {}, failure: [] });
}
exports.generateScreenshot = generateScreenshot;
async function generateForVariation(env, libraryName, slice, variationId) {
    const screenshotUrl = `${env.manifest.localSliceSimulatorURL}?lid=${encodeURIComponent(libraryName)}&sid=${encodeURIComponent(slice.id)}&vid=${encodeURIComponent(variationId)}`;
    const pathToFile = NodeUtils.GeneratedPaths(env.cwd)
        .library(libraryName)
        .slice(slice.name)
        .variation(variationId)
        .preview();
    await puppeteer_1.default.handleScreenshot({
        screenshotUrl,
        pathToFile,
    });
    return ComponentUI_1.createScreenshotUI(env.baseUrl, pathToFile);
}
function removeCustomScreenshot(env, libraryName, sliceName, variationId) {
    const maybeCustomScreenshot = screenshot_1.resolvePathsToScreenshot({
        paths: [env.cwd],
        from: libraryName,
        sliceName,
        variationId,
    });
    if (maybeCustomScreenshot)
        files_1.default.remove(maybeCustomScreenshot.path);
}
exports.removeCustomScreenshot = removeCustomScreenshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9zY3JlZW5zaG90cy9nZW5lcmF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkRBQXFDO0FBRXJDLCtFQUFpRTtBQUNqRSw0REFBb0M7QUFDcEMsOEVBQXlGO0FBQ3pGLGdFQUd3QztBQUd4QywwQ0FBNEI7QUFZckIsS0FBSyxVQUFVLGlDQUFpQyxDQUNyRCxHQUF1QixFQUN2QixXQUFtQixFQUNuQixTQUFpQjtJQUVqQixNQUFNLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sa0JBQWtCLENBQ3ZELEdBQUcsRUFDSCxXQUFXLEVBQ1gsU0FBUyxDQUNWLENBQUM7SUFHRixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQy9DLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUNqRSxDQUFDO0lBRUYsT0FBTztRQUNMLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLE9BQU8sRUFBRSxPQUFPO0tBQ2pCLENBQUM7QUFDSixDQUFDO0FBcEJELDhFQW9CQztBQUVNLEtBQUssVUFBVSxrQkFBa0IsQ0FDdEMsR0FBdUIsRUFDdkIsV0FBbUIsRUFDbkIsU0FBaUI7SUFHakIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQzlCLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQzdFLENBQUM7SUFFRixNQUFNLFlBQVksR0FBd0IsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FB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