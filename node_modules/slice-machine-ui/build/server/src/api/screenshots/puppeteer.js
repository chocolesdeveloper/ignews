"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUrl = void 0;
const path_1 = __importDefault(require("path"));
const puppeteer_1 = __importDefault(require("puppeteer"));
const files_1 = __importDefault(require("@lib/utils/files"));
let puppeteerBrowserPromise = null;
exports.default = {
    handleScreenshot: async ({ screenshotUrl, pathToFile, }) => {
        const { warning } = await exports.testUrl(screenshotUrl);
        if (warning)
            throw new Error(warning);
        if (!puppeteerBrowserPromise)
            puppeteerBrowserPromise = puppeteer_1.default.launch({
                args: [`--window-size=1200,800`],
            });
        const puppeteerBrowser = await puppeteerBrowserPromise;
        return generateScreenshot(puppeteerBrowser, screenshotUrl, pathToFile).catch(() => {
            throw new Error(`Unable to generate screenshot for this page: ${screenshotUrl}`);
        });
    },
};
const generateScreenshot = async (browser, screenshotUrl, pathToFile) => {
    const context = await browser.createIncognitoBrowserContext();
    const page = await context.newPage();
    try {
        files_1.default.mkdir(path_1.default.dirname(pathToFile), { recursive: true });
        await page.goto(screenshotUrl, {
            waitUntil: "networkidle2",
        });
        await page.waitForSelector("#root", { timeout: 10000 });
        const element = await page.$("#root");
        if (element)
            await element.screenshot({ path: pathToFile });
        await context.close();
        return;
    }
    catch (error) {
        await context.close();
        throw error;
    }
};
const testUrl = async (screenshotUrl) => {
    try {
        await fetch(screenshotUrl);
    }
    catch (e) {
        return {
            warning: "Could not connect to Slice Renderer. Model was saved.",
        };
    }
    return {};
};
exports.testUrl = testUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVwcGV0ZWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2VydmVyL3NyYy9hcGkvc2NyZWVuc2hvdHMvcHVwcGV0ZWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUN4QiwwREFBa0M7QUFDbEMsNkRBQXFDO0FBT3JDLElBQUksdUJBQXVCLEdBQXNDLElBQUksQ0FBQztBQUV0RSxrQkFBZTtJQUNiLGdCQUFnQixFQUFFLEtBQUssRUFBRSxFQUN2QixhQUFhLEVBQ2IsVUFBVSxHQUNXLEVBQWlCLEVBQUU7UUFDeEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sZUFBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQUksT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLHVCQUF1QjtZQUMxQix1QkFBdUIsR0FBRyxtQkFBUyxDQUFDLE1BQU0sQ0FBQztnQkFDekMsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUM7YUFDakMsQ0FBQyxDQUFDO1FBQ0wsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLHVCQUF1QixDQUFDO1FBRXZELE9BQU8sa0JBQWtCLENBQ3ZCLGdCQUFnQixFQUNoQixhQUFhLEVBQ2IsVUFBVSxDQUNYLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0RBQWdELGFBQWEsRUFBRSxDQUNoRSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUM5QixPQUEwQixFQUMxQixhQUFxQixFQUNyQixVQUFrQixFQUNILEVBQUU7SUFFakIsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztJQUU5RCxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVyQyxJQUFJO1FBQ0YsZUFBSyxDQUFDLEtBQUssQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFLM0QsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM3QixTQUFTLEVBQUUsY0FBYztTQUMxQixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLElBQUksT0FBTztZQUFFLE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRTVELE1BQU0sT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLE9BQU87S0FDUjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQztBQUVLLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsYUFBcUIsRUFDVSxFQUFFO0lBQ2pDLElBQUk7UUFDRixNQUFNLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUM1QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTztZQUNMLE9BQU8sRUFBRSx1REFBdUQ7U0FDakUsQ0FBQztLQUNIO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFYVyxRQUFBLE9BQU8sV0FXbEIifQ==