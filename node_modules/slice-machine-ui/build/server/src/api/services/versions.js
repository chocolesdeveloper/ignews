"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPackageVersions = exports.isUpdateAvailable = exports.findLatestNonBreakingUpdate = exports.getPackageChangelog = void 0;
const npm_registry_fetch_1 = __importDefault(require("npm-registry-fetch"));
const semver_1 = __importDefault(require("semver"));
const axios_1 = __importDefault(require("axios"));
const core_1 = require("@slicemachine/core");
async function getPackageChangelog(dependencyCwd) {
    var _a;
    const pkg = core_1.FileSystem.retrieveJsonPackage(dependencyCwd);
    if (!pkg.exists || !((_a = pkg.content) === null || _a === void 0 ? void 0 : _a.name))
        return {
            currentVersion: "",
            updateAvailable: false,
            latestNonBreakingVersion: null,
            versions: [],
        };
    const currentVersion = pkg.content.version;
    const versions = await findPackageVersions(pkg.content.name);
    const updateAvailable = isUpdateAvailable(currentVersion, versions);
    const latestNonBreakingVersion = findLatestNonBreakingUpdate(currentVersion, versions);
    return {
        currentVersion,
        updateAvailable,
        latestNonBreakingVersion,
        versions,
    };
}
exports.getPackageChangelog = getPackageChangelog;
function findLatestNonBreakingUpdate(current, versions) {
    const minorUpdate = findHighestUpdateByKind("minor", current, versions);
    if (minorUpdate)
        return minorUpdate;
    const patchUpdate = findHighestUpdateByKind("patch", current, versions);
    if (patchUpdate)
        return patchUpdate;
    return null;
}
exports.findLatestNonBreakingUpdate = findLatestNonBreakingUpdate;
function isUpdateAvailable(current, versions) {
    return Boolean(findHighestUpdateByKind("patch", current, versions) ||
        findHighestUpdateByKind("minor", current, versions) ||
        findHighestUpdateByKind("major", current, versions));
}
exports.isUpdateAvailable = isUpdateAvailable;
async function findPackageVersions(packageName) {
    const versions = await fetchVersionsFromNpm(packageName);
    const stableVersions = versions.filter((version) => /^\d+\.\d+\.\d+$/.test(version) && semver_1.default.lte("0.1.0", version));
    const stableVersionsOrdered = stableVersions.sort().reverse();
    const releaseNotesMap = await axios_1.default
        .get("https://api.github.com/repos/prismicio/slice-machine/releases")
        .then((response) => {
        const releaseNotes = response.data;
        return releaseNotes.reduce((map, releaseNote) => {
            map[releaseNote.name] = releaseNote;
            return map;
        }, {});
    })
        .catch(() => {
        console.log(`Couldn't retrieve Github release notes for package ${packageName}`);
        return {};
    });
    return stableVersionsOrdered.map((stableVersion) => {
        return {
            versionNumber: stableVersion,
            releaseNote: releaseNotesMap[stableVersion]
                ? releaseNotesMap[stableVersion].body
                : null,
        };
    });
}
exports.findPackageVersions = findPackageVersions;
async function fetchVersionsFromNpm(packageName) {
    return npm_registry_fetch_1.default
        .json(packageName)
        .then((json) => {
        const versions = (json.versions || {});
        return Object.keys(versions);
    })
        .catch(() => []);
}
const findHighestUpdateByKind = (kind, current, versions) => {
    const minorVersion = current.replace(/^(\d+\.\d+).*/, "$1");
    const majorVersion = current.replace(/^(\d+).*/, "$1");
    const result = versions.reduce((acc, { versionNumber }) => {
        if (!/^\d+\.\d+\.\d+$/.test(versionNumber))
            return acc;
        if (semver_1.default.gt(acc, versionNumber))
            return acc;
        if (kind === "patch" && versionNumber.startsWith(minorVersion))
            return versionNumber;
        if (kind === "minor" &&
            versionNumber.startsWith(majorVersion) &&
            !versionNumber.startsWith(minorVersion)) {
            return versionNumber;
        }
        if (kind === "major" && !versionNumber.startsWith(majorVersion)) {
            return versionNumber;
        }
        return acc;
    }, current);
    return result === current ? null : result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9zZXJ2aWNlcy92ZXJzaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0RUFBMEM7QUFDMUMsb0RBQTRCO0FBQzVCLGtEQUEwQjtBQU0xQiw2Q0FBZ0Q7QUFFekMsS0FBSyxVQUFVLG1CQUFtQixDQUN2QyxhQUFxQjs7SUFFckIsTUFBTSxHQUFHLEdBQUcsaUJBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMxRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUEsTUFBQSxHQUFHLENBQUMsT0FBTywwQ0FBRSxJQUFJLENBQUE7UUFDbkMsT0FBTztZQUNMLGNBQWMsRUFBRSxFQUFFO1lBQ2xCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLHdCQUF3QixFQUFFLElBQUk7WUFDOUIsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO0lBRUosTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdELE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRSxNQUFNLHdCQUF3QixHQUFHLDJCQUEyQixDQUMxRCxjQUFjLEVBQ2QsUUFBUSxDQUNULENBQUM7SUFFRixPQUFPO1FBQ0wsY0FBYztRQUNkLGVBQWU7UUFDZix3QkFBd0I7UUFDeEIsUUFBUTtLQUNULENBQUM7QUFDSixDQUFDO0FBMUJELGtEQTBCQztBQUVELFNBQWdCLDJCQUEyQixDQUN6QyxPQUFlLEVBQ2YsUUFBMEI7SUFFMUIsTUFBTSxXQUFXLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxR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