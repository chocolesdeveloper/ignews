"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadScreenshots = exports.createOrUpdate = void 0;
const path_1 = __importDefault(require("path"));
const screenshot_1 = require("@slicemachine/core/build/libraries/screenshot");
const uploadScreenshotClient_1 = require("./uploadScreenshotClient");
const str_1 = require("@lib/utils/str");
const Slice_1 = require("@slicemachine/core/build/models/Slice");
const createOrUpdate = async (slices, sliceName, model, client) => {
    const prismicModel = Slice_1.Slices.fromSM(model);
    if (slices.find((e) => e.id === str_1.snakelize(sliceName))) {
        return await client.updateSlice(prismicModel);
    }
    else {
        return await client.insertSlice(prismicModel);
    }
};
exports.createOrUpdate = createOrUpdate;
async function uploadScreenshots(env, sliceModel, sliceName, from) {
    const variationIds = sliceModel.variations.map((v) => v.id);
    const imageUrlsByVariation = {};
    for (let i = 0; i < variationIds.length; i += 1) {
        const variationId = variationIds[i];
        const screenshot = screenshot_1.resolvePathsToScreenshot({
            paths: [env.cwd, path_1.default.join(env.cwd, ".slicemachine/assets")],
            from,
            sliceName,
            variationId,
        });
        if (!!screenshot) {
            const { err, s3ImageUrl } = await uploadScreenshotClient_1.upload(env, sliceName, variationId, screenshot.path);
            if (err)
                throw new Error(err.reason);
            imageUrlsByVariation[variationId] = !!s3ImageUrl ? s3ImageUrl : null;
        }
        else {
            console.error(`--- Unable to find a screenshot for slice ${sliceName} | variation ${variationId}`);
            imageUrlsByVariation[variationId] = null;
        }
    }
    return imageUrlsByVariation;
}
exports.uploadScreenshots = uploadScreenshots;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpY2VTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2VydmVyL3NyYy9hcGkvc2VydmljZXMvc2xpY2VTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUN4Qiw4RUFBeUY7QUFFekYscUVBQWtEO0FBSWxELHdDQUEyQztBQUUzQyxpRUFJK0M7QUFFeEMsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUNqQyxNQUE4QixFQUM5QixTQUFpQixFQUNqQixLQUFjLEVBQ2QsTUFBa0MsRUFDbEMsRUFBRTtJQUNGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLGVBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFO1FBQ3JELE9BQU8sTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQy9DO1NBQU07UUFDTCxPQUFPLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUMvQztBQUNILENBQUMsQ0FBQztBQVpXLFFBQUEsY0FBYyxrQkFZekI7QUFFSyxLQUFLLFVBQVUsaUJBQWlCLENBQ3JDLEdBQXVCLEVBQ3ZCLFVBQW1CLEVBQ25CLFNBQWlCLEVBQ2pCLElBQVk7SUFFWixNQUFNLFlBQVksR0FBYSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FDdEQsQ0FBQyxDQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3pCLENBQUM7SUFFRixNQUFNLG9CQUFvQixHQUE2QyxFQUFFLENBQUM7SUFFMUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEMsTUFBTSxVQUFVLEdBQUcscUNBQXdCLENBQUM7WUFDMUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUM1RCxJQUFJO1lBQ0osU0FBUztZQUNULFdBQVc7U0FDWixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUU7WUFDaEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FDdkIsTUFBTSwrQkFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU3RCxJQUFJLEdBQUc7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFckMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdEU7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQ1gsNkNBQTZDLFNBQVMsZ0JBQWdCLFdBQVcsRUFBRSxDQUNwRixDQUFDO1lBQ0Ysb0JBQW9CLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQzFDO0tBQ0Y7SUFFRCxPQUFPLG9CQUFvQixDQUFDO0FBQzlCLENBQUM7QUF0Q0QsOENBc0NDIn0=