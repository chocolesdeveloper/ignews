"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = exports.purge = void 0;
const str_1 = require("@lib/utils/str");
const path_1 = __importDefault(require("path"));
const uniqid_1 = __importDefault(require("uniqid"));
const consts_1 = require("@lib/consts");
const error_1 = require("../common/error");
const purge = async (env, slices, sliceName) => {
    if (slices.find((e) => e.id === str_1.snakelize(sliceName))) {
        console.log("\n[slice/push]: purging images folder");
        const deleteRes = await env.client.images.deleteFolder({
            sliceName: str_1.snakelize(sliceName),
        });
        if (deleteRes.status > 209) {
            const msg = "[slice/push] An error occurred while purging slice folder - please contact support";
            console.error(msg);
            return { err: error_1.onError(null, msg) };
        }
    }
    return {};
};
exports.purge = purge;
const upload = async (env, sliceName, variationId, filePath) => {
    console.log("[slice/push]: uploading variation preview");
    const aclResponse = await (await env.client.images.createAcl()).json();
    const maybeErrorMessage = aclResponse.error || aclResponse.Message || aclResponse.message;
    if (maybeErrorMessage) {
        const msg = maybeErrorMessage ||
            "An error occurred while creating ACL - please contact support";
        console.error(msg);
        console.error(`Full error: ${JSON.stringify(aclResponse)}`);
        return { err: error_1.onError(aclResponse, msg) };
    }
    const { values: { url, fields }, imgixEndpoint, } = aclResponse;
    const filename = path_1.default.basename(filePath);
    const key = `${env.repo}/${consts_1.s3DefaultPrefix}/${str_1.snakelize(sliceName)}/${str_1.snakelize(variationId)}-${uniqid_1.default()}/${filename}`;
    const postStatus = await env.client.images.post({
        url,
        fields,
        key,
        filename,
        pathToFile: filePath,
    });
    const s3ImageUrl = `${imgixEndpoint}/${key}`;
    if (postStatus !== 204) {
        const msg = "[slice/push] An error occurred while uploading files - please contact support";
        console.error(msg);
        console.error(`Error code: "${postStatus}"`);
        return { err: error_1.onError(null, msg) };
    }
    return { s3ImageUrl };
};
exports.upload = upload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkU2NyZWVuc2hvdENsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL3NlcnZpY2VzL3VwbG9hZFNjcmVlbnNob3RDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQTJDO0FBQzNDLGdEQUF3QjtBQUN4QixvREFBNEI7QUFLNUIsd0NBQThDO0FBQzlDLDJDQUEwQztBQUduQyxNQUFNLEtBQUssR0FBRyxLQUFLLEVBQ3hCLEdBQXVCLEVBQ3ZCLE1BQThCLEVBQzlCLFNBQWlCLEVBQ1ksRUFBRTtJQUMvQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssZUFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7UUFDckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1lBQ3JELFNBQVMsRUFBRSxlQUFTLENBQUMsU0FBUyxDQUFDO1NBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDMUIsTUFBTSxHQUFHLEdBQ1Asb0ZBQW9GLENBQUM7WUFDdkYsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixPQUFPLEVBQUUsR0FBRyxFQUFFLGVBQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztTQUNwQztLQUNGO0lBRUQsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFuQlcsUUFBQSxLQUFLLFNBbUJoQjtBQUVLLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFDekIsR0FBdUIsRUFDdkIsU0FBaUIsRUFDakIsV0FBbUIsRUFDbkIsUUFBZ0IsRUFDa0MsRUFBRTtJQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFFekQsTUFBTSxXQUFXLEdBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUU1RSxNQUFNLGlCQUFpQixHQUVyQixXQUFXLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUNsRSxJQUFJLGlCQUFpQixFQUFFO1FBRXJCLE1BQU0sR0FBRyxHQUNQLGlCQUFpQjtZQUNqQiwrREFBK0QsQ0FBQztRQUNsRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU1RCxPQUFPLEVBQUUsR0FBRyxFQUFFLGVBQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztLQUMzQztJQUVELE1BQU0sRUFDSixNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQ3ZCLGFBQWEsR0FDZCxHQUFHLFdBQVcsQ0FBQztJQUVoQixNQUFNLFFBQVEsR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXpDLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSx3QkFBZSxJQUFJLGVBQVMsQ0FDckQsU0FBUyxDQUNWLElBQUksZUFBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGdCQUFNLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUN0RCxNQUFNLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUU5QyxHQUFHO1FBRUgsTUFBTTtRQUNOLEdBQUc7UUFDSCxRQUFRO1FBQ1IsVUFBVSxFQUFFLFFBQVE7S0FDckIsQ0FBQyxDQUFDO0lBR0gsTUFBTSxVQUFVLEdBQUcsR0FBRyxhQUFhLElBQUksR0FBRyxFQUFFLENBQUM7SUFFN0MsSUFBSSxVQUFVLEtBQUssR0FBRyxFQUFFO1FBQ3RCLE1BQU0sR0FBRyxHQUNQLCtFQUErRSxDQUFDO1FBQ2xGLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUU3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLGVBQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztLQUNwQztJQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztBQUN4QixDQUFDLENBQUM7QUExRFcsUUFBQSxNQUFNLFVBMERqQiJ9