"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parse_domain_1 = require("parse-domain");
const getPrismicData_1 = __importDefault(require("./getPrismicData"));
const fs_1 = require("@lib/mock/misc/fs");
const manifest_1 = __importStar(require("@lib/env/manifest"));
const http_1 = __importDefault(require("@lib/models/common/http"));
const core_1 = require("@slicemachine/core");
const node_utils_1 = require("@slicemachine/core/build/node-utils");
const preferWroomBase_1 = __importDefault(require("@lib/utils/preferWroomBase"));
const versions_1 = require("@lib/env/versions");
function validate(config) {
    const errors = {};
    if (config.framework &&
        !node_utils_1.Framework.isFrameworkSupported(core_1.Models.Frameworks[config.framework])) {
        const options = Object.values(core_1.Models.SupportedFrameworks);
        errors.framework = {
            message: `The framework set in sm.json is invalid`,
            example: "react",
            run: `Set framework to one of the following: ${options.join(", ")}`,
        };
    }
    return errors;
}
function extractRepo(parsedRepo) {
    switch (parsedRepo.type) {
        case parse_domain_1.ParseResultType.Listed:
            if (parsedRepo.labels.length) {
                return parsedRepo.labels[0];
            }
            if (parsedRepo.subDomains.length) {
                return parsedRepo.subDomains[0];
            }
        default:
            return;
    }
}
async function getEnv(maybeCustomCwd) {
    const cwd = maybeCustomCwd || process.env.CWD || process.cwd();
    if (!cwd) {
        const message = "[api/env]: Unrecoverable error. Could not find cwd. Exiting..";
        console.error(message);
        throw new Error(message);
    }
    const manifestInfo = manifest_1.default(cwd);
    if (manifestInfo.state !== manifest_1.ManifestState.Valid || !manifestInfo.content) {
        console.error(manifestInfo.message);
        throw new Error(manifestInfo.message);
    }
    const base = preferWroomBase_1.default(manifestInfo.content.apiEndpoint);
    const prismicData = getPrismicData_1.default();
    if (!prismicData.isOk()) {
        const message = "[api/env]: Unrecoverable error. ~/.prismic file unreadable";
        console.error(message);
        throw new Error(message);
    }
    const smChangelog = await versions_1.getPackageChangelog(appRoot);
    const maybeErrors = validate(manifestInfo.content);
    const parsedRepo = parse_domain_1.parseDomain(parse_domain_1.fromUrl(manifestInfo.content.apiEndpoint));
    const repo = extractRepo(parsedRepo);
    const mockConfig = fs_1.getConfig(cwd);
    const client = http_1.default(cwd, base, repo, prismicData.value.auth);
    return {
        errors: maybeErrors,
        env: {
            cwd,
            repo,
            manifest: manifestInfo.content,
            prismicData: prismicData.value,
            changelog: smChangelog,
            mockConfig,
            framework: node_utils_1.Framework.defineFramework({
                cwd,
                manifest: manifestInfo.content,
            }),
            isUserLoggedIn: !!prismicData.value.auth && !!repo,
            baseUrl: `http://localhost:${process.env.PORT || "9999"}`,
            client,
        },
    };
}
exports.default = getEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2VydmVyL3NyYy9hcGkvc2VydmljZXMvZ2V0RW52LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtDQUtzQjtBQUV0QixzRUFBOEM7QUFFOUMsMENBQStEO0FBQy9ELDhEQUFnRjtBQUVoRixtRUFBaUQ7QUFHakQsNkNBQTRDO0FBQzVDLG9FQUFnRTtBQUNoRSxpRkFBeUQ7QUFDekQsZ0RBQXdEO0FBS3hELFNBQVMsUUFBUSxDQUFDLE1BQXVCO0lBQ3ZDLE1BQU0sTUFBTSxHQUFpQixFQUFFLENBQUM7SUFFaEMsSUFDRSxNQUFNLENBQUMsU0FBUztRQUNoQixDQUFDLHNCQUFTLENBQUMsb0JBQW9CLENBQUMsYUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDcEU7UUFDQSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTFELE1BQU0sQ0FBQyxTQUFTLEdBQUc7WUFDakIsT0FBTyxFQUFFLHlDQUF5QztZQUNsRCxPQUFPLEVBQUUsT0FBTztZQUNoQixHQUFHLEVBQUUsMENBQTBDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7U0FDcEUsQ0FBQztLQUNIO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLFVBQXVCO0lBQzFDLFFBQVEsVUFBVSxDQUFDLElBQUksRUFBRTtRQUN2QixLQUFLLDhCQUFlLENBQUMsTUFBTTtZQUN6QixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUM1QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDN0I7WUFDRCxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxF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