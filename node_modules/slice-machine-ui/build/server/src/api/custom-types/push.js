"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const state_1 = require("../state");
const push_1 = require("../slices/push");
const error_1 = require("../common/error");
const paths_1 = require("@lib/models/paths");
const tab_1 = require("@lib/models/common/CustomType/tab");
const index_1 = require("@slicemachine/core/build/models/CustomType/index");
const IO = __importStar(require("../io"));
const createOrUpdate = (client, smModel, remoteCustomType) => {
    const model = index_1.CustomTypes.fromSM(smModel);
    if (remoteCustomType) {
        return client.updateCustomType(model);
    }
    return client.insertCustomType(model);
};
async function handler(req) {
    const { id } = req.query;
    const state = await state_1.getBackendState(req.errors, req.env);
    if (!state.libraries) {
        const code = 400;
        const message = `Error ${code}: Slice libraries needs to be define in your sm.json file.`;
        return {
            err: new Error(message),
            reason: message,
            status: code,
        };
    }
    if (state.clientError || !state.env.isUserLoggedIn) {
        const isAnAuthenticationError = !state.env.isUserLoggedIn ||
            (state.clientError && state.clientError.status === 403);
        const errorExplanation = isAnAuthenticationError
            ? "Please log in to Prismic!"
            :
                `You don\'t have access to the repo \"${state.env.repo}\"`;
        const errorCode = !state.env.isUserLoggedIn
            ? 403
            : state.clientError
                ? state.clientError.status
                : 403;
        const message = `Error ${errorCode}: Could not fetch remote custom types. ${errorExplanation}`;
        return {
            err: new Error(message),
            reason: message,
            status: errorCode,
        };
    }
    const modelPath = paths_1.CustomTypesPaths(state.env.cwd)
        .customType(id)
        .model();
    let model;
    try {
        model = IO.CustomType.readCustomType(modelPath);
    }
    catch (e) {
        const msg = `[custom-types/push] Model ${id} is invalid.`;
        console.error(msg);
        return error_1.onError(null, msg);
    }
    const remoteCustomType = state.remoteCustomTypes.find((e) => e.id === id);
    if (remoteCustomType && remoteCustomType.repeatable !== model.repeatable) {
        const msg = `[custom-types/push] Model not pushed: property "repeatable" in local Model differs from remote source`;
        console.error(msg);
        return error_1.onError(null, msg);
    }
    const sliceKeysToPush = [];
    for (const [, tab] of Object.entries(model.tabs)) {
        const { sliceZone } = tab_1.Tab.organiseFields(tab);
        if (sliceZone === null || sliceZone === void 0 ? void 0 : sliceZone.value) {
            sliceKeysToPush.push(...new Set(sliceZone.value.map((e) => e.key)));
        }
    }
    const localSlices = state.libraries
        .filter((e) => e.isLocal)
        .reduceRight((acc, curr) => {
        return {
            ...acc,
            ...curr.components.reduce((acc, curr) => ({
                ...acc,
                [curr.model.id]: curr,
            }), {}),
        };
    }, {});
    for await (const sliceKey of sliceKeysToPush) {
        const slice = localSlices[sliceKey];
        if (slice) {
            try {
                console.log("[custom-types/push] Pushing slice", sliceKey);
                await push_1.pushSlice(state.env, state.remoteSlices, {
                    sliceName: slice.model.name,
                    from: slice.from,
                });
            }
            catch (e) {
                console.error(`[custom-types/push] Full error: ${e}`);
            }
        }
    }
    console.log("[custom-types/push] Pushing Custom Type...");
    const res = await createOrUpdate(state.env.client, model, remoteCustomType);
    if (res.status > 209) {
        const message = res.text ? await res.text() : res.status.toString();
        const msg = `[custom-types/push] Unexpected error returned. Server message: ${message}`;
        console.error(msg);
        return error_1.onError(null, msg);
    }
    console.log(`[custom-types/push] Custom Type ${id} was pushed!`);
    return {};
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL2N1c3RvbS10eXBlcy9wdXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9DQUEyQztBQUMzQyx5Q0FBMkM7QUFFM0MsMkNBQTBDO0FBQzFDLDZDQUFxRDtBQU1yRCwyREFBd0Q7QUFFeEQsNEVBRzBEO0FBQzFELDBDQUE0QjtBQUU1QixNQUFNLGNBQWMsR0FBRyxDQUNyQixNQUFrQyxFQUNsQyxPQUFxQixFQUNyQixnQkFBMEMsRUFDMUMsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLG1CQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLElBQUksZ0JBQWdCLEVBQUU7UUFFcEIsT0FBTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdkM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUM7QUFFYSxLQUFLLFVBQVUsT0FBTyxDQUFDLEdBQW1CO0lBQ3ZELE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBRXpCLE1BQU0sS0FBSyxHQUFHLE1BQU0sdUJBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV6RCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtRQUNwQixNQUFNLElBQUksR0FBRyxHQUFHLENBQUM7UUFDakIsTUFBTSxPQUFPLEdBQUcsU0FBUyxJQUFJLDREQUE0RCxDQUFDO1FBRTFGLE9BQU87WUFDTCxHQUFHLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ3ZCLE1BQU0sRUFBRSxPQUFPO1lBQ2YsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDO0tBQ0g7SUFFRCxJQUFJ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