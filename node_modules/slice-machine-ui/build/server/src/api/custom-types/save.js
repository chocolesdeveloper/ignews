"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getEnv_1 = __importDefault(require("../services/getEnv"));
const files_1 = __importDefault(require("@lib/utils/files"));
const paths_1 = require("@lib/models/paths");
const fs_1 = require("@lib/mock/misc/fs");
const CustomType_1 = __importDefault(require("@lib/mock/CustomType"));
const MockConfig_1 = require("@lib/models/common/MockConfig");
const IO = __importStar(require("../io"));
async function handler(req) {
    const { env } = await getEnv_1.default();
    const { model, mockConfig } = req.body;
    const modelPath = paths_1.CustomTypesPaths(env.cwd).customType(model.id).model();
    const mockPath = paths_1.GeneratedCustomTypesPaths(env.cwd)
        .customType(model.id)
        .mock();
    const updatedMockConfig = fs_1.insert(env.cwd, {
        key: model.id,
        prefix: "_cts",
        value: mockConfig,
    });
    IO.CustomType.writeCustomType(modelPath, model);
    const mocked = await CustomType_1.default(model, MockConfig_1.CustomTypeMockConfig.getCustomTypeMockConfig(updatedMockConfig, model.id));
    files_1.default.write(mockPath, mocked);
    return {};
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NlcnZlci9zcmMvYXBpL2N1c3RvbS10eXBlcy9zYXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdFQUF3QztBQUN4Qyw2REFBcUM7QUFDckMsNkNBQWdGO0FBRWhGLDBDQUErRDtBQUUvRCxzRUFBd0M7QUFDeEMsOERBQXFFO0FBRXJFLDBDQUE0QjtBQUViLEtBQUssVUFBVSxPQUFPLENBQUMsR0FBaUM7SUFDckUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sZ0JBQU0sRUFBRSxDQUFDO0lBQy9CLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUV2QyxNQUFNLFNBQVMsR0FBRyx3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUV6RSxNQUFNLFFBQVEsR0FBRyxpQ0FBeUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1NBQ2hELFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1NBQ3BCLElBQUksRUFBRSxDQUFDO0lBR1YsTUFBTSxpQkFBaUIsR0FBRyxXQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7UUFDbEQsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ2IsTUFBTSxFQUFFLE1BQU07UUFDZCxLQUFLLEVBQUUsVUFBVTtLQUNsQixDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBSSxDQUN2QixLQUFLLEVBRUwsaUNBQW9CLENBQUMsdUJBQXVCLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUMxRSxDQUFDO0lBRUYsZUFBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUIsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBMUJELDBCQTBCQyJ9