"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("io-ts"));
const glob_1 = __importDefault(require("glob"));
const files_1 = __importDefault(require("@lib/utils/files"));
const paths_1 = require("@lib/models/paths");
const index_1 = require("@slicemachine/core/build/models/CustomType/index");
const CustomType_1 = require("@prismicio/types-internal/lib/customtypes/CustomType");
const Either_1 = require("fp-ts/lib/Either");
const IO = __importStar(require("../io"));
const handleMatch = (matches) => {
    return matches.reduce((acc, p) => {
        try {
            const smModel = IO.CustomType.readCustomType(p);
            return [...acc, smModel];
        }
        catch (e) {
            return acc;
        }
    }, []);
};
const fetchRemoteCustomTypes = async (env) => {
    if (!env.isUserLoggedIn)
        return { remoteCustomTypes: [] };
    try {
        const res = await env.client.getCustomTypes();
        const { remoteCustomTypes } = await (async () => {
            if (res.status > 209) {
                return { remoteCustomTypes: [] };
            }
            const result = await (res.json
                ? res.json()
                : Promise.resolve([]));
            const remoteCustomTypes = Either_1.getOrElseW(() => {
                console.warn("Unable to parse remote custom types.");
                return [];
            })(t.array(CustomType_1.CustomType).decode(result));
            return {
                remoteCustomTypes: remoteCustomTypes.map((c) => index_1.CustomTypes.toSM(c)),
            };
        })();
        return { remoteCustomTypes };
    }
    catch (e) {
        return { remoteCustomTypes: [] };
    }
};
const saveCustomType = (cts, cwd) => {
    for (const ct of cts) {
        IO.CustomType.writeCustomType(paths_1.CustomTypesPaths(cwd).customType(ct.id).model(), ct);
    }
};
async function handler(env) {
    const { cwd } = env;
    const pathToCustomTypes = paths_1.CustomTypesPaths(cwd).value();
    const folderExists = files_1.default.exists(pathToCustomTypes);
    const { remoteCustomTypes } = await fetchRemoteCustomTypes(env);
    if (!folderExists) {
        saveCustomType(remoteCustomTypes, cwd);
    }
    const matches = glob_1.default.sync(`${pathToCustomTypes}/**/index.json`);
    return {
        customTypes: handleMatch(matches),
        remoteCustomTypes,
    };
}
exports.default = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9jdXN0b20tdHlwZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQTJCO0FBQzNCLGdEQUF3QjtBQUV4Qiw2REFBcUM7QUFDckMsNkNBQXFEO0FBQ3JELDRFQUcwRDtBQUMxRCxxRkFBa0Y7QUFDbEYsNkNBQThDO0FBQzlDLDBDQUE0QjtBQUU1QixNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQWlCLEVBQUUsRUFBRTtJQUN4QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUF3QixFQUFFLENBQVMsRUFBRSxFQUFFO1FBQzVELElBQUk7WUFFRixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxPQUFPLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDMUI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sR0FBRyxDQUFDO1NBQ1o7SUFDSCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDLENBQUM7QUFFRixNQUFNLHNCQUFzQixHQUFHLEtBQUssRUFDbEMsR0FBdUIsRUFDeUIsRUFBRTtJQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWM7UUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFFMUQsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM5QyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxJQUV2QyxFQUFFO1lBQ0gsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtnQkFDcEIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxDQUFDO2FBQ2xDO1lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJO2dCQUM1QixDQUFDLENBQUUsR0FBRyxDQUFDLElBQUksRUFBOEI7Z0JBQ3pDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFekIsTUFBTSxpQkFBaUIsR0FBRyxtQkFBVSxDQUF3QixHQUFHLEVBQUU7Z0JBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQztnQkFDckQsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLHVCQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUV2QyxPQUFPO2dCQUNMLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQWEsRUFBRSxFQUFFLENBQ3pELG1CQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNwQjthQUNGLENBQUM7UUFDSixDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ0wsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUM7S0FDOUI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUNsQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBZ0MsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUN2RSxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUNwQixFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FDM0Isd0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFDL0MsRUFBRSxDQUNILENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQztBQUVhLEtBQUssVUFBVSxPQUFPLENBQUMsR0FBdUI7SUFJM0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUVwQixNQUFNLGlCQUFpQixHQUFHLHdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRXhELE1BQU0sWUFBWSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVyRCxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhFLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDakIsY0FBYyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsTUFBTSxPQUFPLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLGlCQUFpQixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hFLE9BQU87UUFDTCxXQUFXLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNqQyxpQkFBaUI7S0FDbEIsQ0FBQztBQUNKLENBQUM7QUFyQkQsMEJBcUJDIn0=