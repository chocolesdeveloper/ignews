"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const router = express_1.default.Router();
const fs = require("fs");
const mime = require("mime");
const push_1 = __importDefault(require("./slices/push"));
const save_1 = __importDefault(require("./slices/save"));
const index_1 = __importDefault(require("./slices/create/index"));
const screenshots_1 = __importDefault(require("./screenshots/screenshots"));
const custom_screenshots_1 = __importDefault(require("./screenshots/custom-screenshots"));
const parse_oembed_1 = __importDefault(require("./parse-oembed"));
const state_1 = __importDefault(require("./state"));
const simulator_1 = __importDefault(require("./simulator"));
const save_2 = __importDefault(require("./custom-types/save"));
const push_2 = __importDefault(require("./custom-types/push"));
const start_1 = __importDefault(require("./auth/start"));
const status_1 = __importDefault(require("./auth/status"));
const post_1 = __importDefault(require("./auth/post"));
const common_1 = require("./http/common");
const ApiResult_1 = require("@models/server/ApiResult");
router.use("/__preview", async function previewRoute(req, res) {
    const p = decodeURIComponent(req.query.q);
    const stream = fs.createReadStream(p);
    const type = mime.getType(p.split(".").pop());
    stream.on("open", function () {
        res.set("Content-Type", type);
        stream.pipe(res);
    });
    return stream.on("error", function (e) {
        console.log("[slice-machine] Preview error: ", e);
        res.set("Content-Type", "application/json");
        res.status(404).send({});
    });
});
router.get("/state", common_1.WithEnv(async function (req, res) {
    const payload = await state_1.default(req);
    return res.status(200).json(payload);
}));
router.get("/screenshot", async function (req, res) {
    const payload = await screenshots_1.default(req.query);
    if (payload.err) {
        return res.status(400).json(payload);
    }
    return res.status(200).json(payload);
});
router.post("/custom-screenshot", async function (req, res) {
    const payload = await custom_screenshots_1.default(req.files.file, req.body);
    return res.status(200).json(payload);
});
router.post("/parse-oembed", async function (req, res) {
    const payload = await parse_oembed_1.default(req.body.url);
    if (payload.err) {
        return res.status(400).json(payload);
    }
    return res.status(200).json(payload);
});
router.post("/slices/save", async function (req, res) {
    const payload = await save_1.default(req);
    return res.status(200).json(payload);
});
router.post("/slices/create", async function (req, res) {
    const payload = await index_1.default(req.body);
    if (ApiResult_1.isApiError(payload)) {
        return res.status(payload.status).json(payload);
    }
    return res.status(200).json(payload);
});
router.get("/slices/push", async function (req, res) {
    const payload = await push_1.default(req.query);
    if (ApiResult_1.isApiError(payload)) {
        return res.status(payload.status).json(payload);
    }
    return res.status(200).json(payload);
});
router.post("/custom-types/save", async function (req, res) {
    const payload = await save_2.default(req);
    return res.status(200).json(payload);
});
router.get("/custom-types/push", common_1.WithEnv(async function (req, res) {
    const payload = await push_2.default(req);
    if (ApiResult_1.isApiError(payload)) {
        return res.status(payload.status).json(payload);
    }
    return res.status(200).json(payload);
}));
router.get("/simulator/check", common_1.WithEnv(async function (req, res) {
    const payload = await simulator_1.default(req);
    return res.status(200).json(payload);
}));
router.post("/auth/start", async function (_req, res) {
    const payload = await start_1.default();
    if (payload.err) {
        return res.status(500).json({});
    }
    return res.status(200).json({});
});
router.post("/auth/status", common_1.WithEnv(async function (req, res) {
    const payload = await status_1.default(req);
    if (payload.status === "error") {
        return res.status(500).json(payload);
    }
    return res.status(200).json(payload);
}));
router.post("/auth", common_1.WithEnv(async function (req, res) {
    const body = req.body;
    const payload = post_1.default(body);
    if (payload.err) {
        console.error(body);
        return res.status(500).json(body);
    }
    return res.status(200).json({});
}));
router.use("*", async function (req, res) {
    return res.status(404).json({
        err: "not-found",
        reason: `Could not find route "${req.baseUrl}"`,
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2ZXIvc3JjL2FwaS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUM5QixNQUFNLE1BQU0sR0FBRyxpQkFBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBR2hDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IseURBQXNDO0FBQ3RDLHlEQUFzQztBQUN0QyxrRUFBZ0Q7QUFDaEQsNEVBQW1EO0FBQ25ELDBGQUFnRTtBQUNoRSxrRUFBeUM7QUFDekMsb0RBQTRCO0FBQzVCLDREQUF5QztBQUN6QywrREFBaUQ7QUFDakQsK0RBQWlEO0FBQ2pELHlEQUFxQztBQUNyQywyREFBdUM7QUFDdkMsdURBQW1DO0FBRW5DLDBDQUF3RDtBQU94RCx3REFBc0Q7QUFFdEQsTUFBTSxDQUFDLEdBQUcsQ0FDUixZQUFZLEVBRVosS0FBSyxVQUFVLFlBQVksQ0FBQyxHQUFvQixFQUFFLEdBQXFCO0lBQ3JFLE1BQU0sQ0FBQyxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBVyxDQUFDLENBQUM7SUFFcEQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFO1FBR2hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIs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