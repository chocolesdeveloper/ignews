"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ERROR_CODES = {
    ENOENT: "ENOENT",
};
const Files = {
    _format: "utf8",
    write(pathToFile, value, options = { recursive: true }) {
        if (options.recursive) {
            const directoryPath = path_1.default.dirname(pathToFile);
            Files.mkdir(directoryPath, { recursive: true });
        }
        if (typeof value === "string")
            fs_1.default.writeFileSync(pathToFile, value, Files._format);
        else
            fs_1.default.writeFileSync(pathToFile, JSON.stringify(value, null, 2), Files._format);
    },
    readString(pathToFile) {
        return fs_1.default.readFileSync(pathToFile, { encoding: Files._format });
    },
    readEntity(pathToFile, validate) {
        return validate(JSON.parse(this.readString(pathToFile)));
    },
    safeReadEntity(pathToFile, validate) {
        try {
            const result = this.readEntity(pathToFile, validate);
            if (result instanceof Error)
                return null;
            return result;
        }
        catch (e) {
            return null;
        }
    },
    readJson(pathToFile) {
        return JSON.parse(this.readString(pathToFile));
    },
    safeReadJson(pathToFile) {
        try {
            return JSON.parse(this.readString(pathToFile));
        }
        catch (e) {
            return null;
        }
    },
    readFirstOf(filePaths) {
        return (converter) => {
            return filePaths.reduce((acc, filePath) => {
                if (acc)
                    return acc;
                else {
                    const pathWithOpts = typeof filePath === "string" ? { path: filePath } : filePath;
                    if (this.exists(pathWithOpts.path)) {
                        const optsOrDefault = pathWithOpts.options || {};
                        const test = {
                            path: pathWithOpts.path,
                            ...optsOrDefault,
                            value: converter(this.readString(pathWithOpts.path)),
                        };
                        return test;
                    }
                    else
                        return acc;
                }
            }, undefined);
        };
    },
    isDirectory: (source) => fs_1.default.lstatSync(source).isDirectory(),
    isFile: (source) => fs_1.default.lstatSync(source).isFile(),
    readDirectory: (source) => fs_1.default.readdirSync(source, { encoding: Files._format }),
    mkdir: (target, options) => fs_1.default.mkdirSync(target, options),
    exists(pathToFile) {
        try {
            return Boolean(fs_1.default.lstatSync(pathToFile));
        }
        catch (e) {
            if (e.code === ERROR_CODES.ENOENT)
                return false;
            throw e;
        }
    },
    append(filePath, data) {
        fs_1.default.appendFileSync(filePath, data, { encoding: Files._format });
    },
    copy(src, dest, options = { recursive: false }) {
        if (options.recursive) {
            const directoryPath = path_1.default.dirname(dest);
            Files.mkdir(directoryPath, { recursive: true });
        }
        fs_1.default.copyFileSync(src, dest);
    },
    remove(src) {
        fs_1.default.unlinkSync(src);
    },
    removeAll(srcs) {
        srcs.forEach((src) => Files.remove(src));
    },
    flushDirectories(directory, recursive = true) {
        try {
            const paths = fs_1.default.readdirSync(directory);
            paths.forEach((p) => {
                const maybedir = path_1.default.join(directory, p);
                if (this.isDirectory(maybedir)) {
                    fs_1.default.rmdirSync(maybedir, { recursive });
                }
            });
        }
        catch (e) { }
    },
};
exports.default = Files;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvdXRpbHMvZmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLE1BQU0sRUFBRSxRQUFRO0NBQ2pCLENBQUM7QUFFRixNQUFNLEtBQUssR0FBRztJQUNaLE9BQU8sRUFBRSxNQUF3QjtJQUVqQyxLQUFLLENBQ0gsVUFBa0IsRUFDbEIsS0FBc0IsRUFDdEIsVUFBa0MsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO1FBR3JELElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNyQixNQUFNLGFBQWEsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9DLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFFRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFDM0IsWUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzs7WUFFbkQsWUFBRSxDQUFDLGFBQWEsQ0FDZCxVQUFVLEVBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUM5QixLQUFLLENBQUMsT0FBTyxDQUNkLENBQUM7SUFDTixDQUFDO0lBRUQsVUFBVSxDQUFDLFVBQWtCO1FBQzNCLE9BQU8sWUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELFVBQVUsQ0FBSSxVQUFrQixFQUFFLFFBQXFDO1FBQ3JFLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFD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