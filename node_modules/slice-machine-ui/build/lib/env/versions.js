"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPackageVersions = exports.isUpdateAvailable = exports.findLatestNonBreakingUpdate = exports.getPackageChangelog = void 0;
const npm_registry_fetch_1 = __importDefault(require("npm-registry-fetch"));
const semver_1 = __importDefault(require("semver"));
const axios_1 = __importDefault(require("axios"));
const versions_1 = require("@lib/models/common/versions");
const NodeUtils = __importStar(require("@slicemachine/core/build/node-utils"));
async function getPackageChangelog(dependencyCwd) {
    var _a;
    const pkg = NodeUtils.retrieveJsonPackage(dependencyCwd);
    if (!pkg.exists || !((_a = pkg.content) === null || _a === void 0 ? void 0 : _a.name))
        return {
            currentVersion: "",
            updateAvailable: false,
            latestNonBreakingVersion: null,
            versions: [],
        };
    const currentVersion = pkg.content.version;
    const versions = await findPackageVersions(pkg.content.name);
    const updateAvailable = isUpdateAvailable(currentVersion, versions);
    const latestNonBreakingVersion = findLatestNonBreakingUpdate(currentVersion, versions);
    return {
        currentVersion,
        updateAvailable,
        latestNonBreakingVersion,
        versions,
    };
}
exports.getPackageChangelog = getPackageChangelog;
function findLatestNonBreakingUpdate(current, versions) {
    const minorUpdate = findHighestUpdateByKind("minor", current, versions);
    if (minorUpdate)
        return minorUpdate;
    const patchUpdate = findHighestUpdateByKind("patch", current, versions);
    if (patchUpdate)
        return patchUpdate;
    return null;
}
exports.findLatestNonBreakingUpdate = findLatestNonBreakingUpdate;
function isUpdateAvailable(current, versions) {
    return Boolean(findHighestUpdateByKind("patch", current, versions) ||
        findHighestUpdateByKind("minor", current, versions) ||
        findHighestUpdateByKind("major", current, versions));
}
exports.isUpdateAvailable = isUpdateAvailable;
async function findPackageVersions(packageName) {
    const versions = await fetchVersionsFromNpm(packageName);
    const stableVersions = versions.filter((version) => /^\d+\.\d+\.\d+$/.test(version) && semver_1.default.lte("0.1.0", version));
    const stableVersionsOrdered = stableVersions.sort().reverse();
    const releaseNotesMap = await axios_1.default
        .get("https://api.github.com/repos/prismicio/slice-machine/releases")
        .then((response) => {
        const releaseNotes = response.data;
        return releaseNotes.reduce((map, releaseNote) => {
            map[releaseNote.name] = releaseNote;
            return map;
        }, {});
    })
        .catch(() => {
        return {};
    });
    return stableVersionsOrdered.map((stableVersion, index, versions) => {
        const kind = index !== versions.length - 1
            ? findVersionKind(stableVersion, versions[index + 1])
            : null;
        return {
            versionNumber: stableVersion,
            releaseNote: releaseNotesMap[stableVersion]
                ? releaseNotesMap[stableVersion].body
                : null,
            kind,
        };
    });
}
exports.findPackageVersions = findPackageVersions;
async function fetchVersionsFromNpm(packageName) {
    return npm_registry_fetch_1.default
        .json(packageName)
        .then((json) => {
        const versions = (json.versions || {});
        return Object.keys(versions);
    })
        .catch(() => []);
}
const findHighestUpdateByKind = (kind, current, versions) => {
    const minorVersion = extractMinorVersionFromVersion(current);
    const majorVersion = extractMajorVersionFromVersion(current);
    const result = versions.reduce((acc, { versionNumber }) => {
        if (!/^\d+\.\d+\.\d+$/.test(versionNumber))
            return acc;
        if (semver_1.default.gt(acc, versionNumber))
            return acc;
        if (kind === "patch" && versionNumber.startsWith(minorVersion))
            return versionNumber;
        if (kind === "minor" &&
            versionNumber.startsWith(majorVersion) &&
            !versionNumber.startsWith(minorVersion)) {
            return versionNumber;
        }
        if (kind === "major" && !versionNumber.startsWith(majorVersion)) {
            return versionNumber;
        }
        return acc;
    }, current);
    return result === current ? null : result;
};
const extractMinorVersionFromVersion = (version) => version.replace(/^(\d+\.\d+).*/, "$1");
const extractMajorVersionFromVersion = (version) => version.replace(/^(\d+).*/, "$1");
const findVersionKind = (targetVersion, previousVersion) => {
    if (semver_1.default.lte(targetVersion, previousVersion))
        return null;
    if (isAPatchVersion(targetVersion, previousVersion)) {
        return versions_1.VersionKind.PATCH;
    }
    if (isAMinorVersion(targetVersion, previousVersion)) {
        return versions_1.VersionKind.MINOR;
    }
    if (isAMajorVersion(targetVersion, previousVersion)) {
        return versions_1.VersionKind.MAJOR;
    }
    return null;
};
const isAPatchVersion = (targetVersion, previousVersion) => {
    if (semver_1.default.lte(targetVersion, previousVersion))
        return null;
    const minorVersion = extractMinorVersionFromVersion(previousVersion);
    return targetVersion.startsWith(minorVersion);
};
const isAMinorVersion = (targetVersion, previousVersion) => {
    if (semver_1.default.lte(targetVersion, previousVersion))
        return null;
    const majorVersion = extractMajorVersionFromVersion(previousVersion);
    return (targetVersion.startsWith(majorVersion) &&
        !isAPatchVersion(targetVersion, previousVersion));
};
const isAMajorVersion = (targetVersion, previousVersion) => {
    if (semver_1.default.lte(targetVersion, previousVersion))
        return null;
    const majorVersion = extractMajorVersionFromVersion(previousVersion);
    return !targetVersion.startsWith(majorVersion);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZW52L3ZlcnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0RUFBMEM7QUFDMUMsb0RBQTRCO0FBQzVCLGtEQUEwQjtBQUMxQiwwREFLcUM7QUFDckMsK0VBQWlFO0FBRTFELEtBQUssVUFBVSxtQkFBbUIsQ0FDdkMsYUFBcUI7O0lBRXJCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUEsTUFBQSxHQUFHLENBQUMsT0FBTywwQ0FBRSxJQUFJLENBQUE7UUFDbkMsT0FBTztZQUNMLGNBQWMsRUFBRSxFQUFFO1lBQ2xCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLHdCQUF3QixFQUFFLElBQUk7WUFDOUIsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO0lBRUosTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdELE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRSxNQUFNLHdCQUF3QixHQUFHLDJCQUEyQixDQUMxRCxjQUFjLEVBQ2QsUUFBUSxDQUNULENBQUM7SUFFRixPQUFPO1FBQ0wsY0FBYztRQUNkLGVBQWU7UUFDZix3QkFBd0I7UUFDeEIsUUFBUTtLQUNULENBQUM7QUFDSixDQUFDO0FBMUJELGtEQTBCQztBQUVELFNBQWdCLDJCQUEyQixDQUN6QyxPQUFlLEVBQ2YsUUFBMEI7SUFFMUIsTUFBTSxXQUFXLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLE9B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