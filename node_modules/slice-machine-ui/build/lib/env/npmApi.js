"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findPackageVersions = exports.isUpdateAvailable = exports.findLatestNonBreaking = exports.findHighestUpdateByKind = void 0;
const npm_registry_fetch_1 = __importDefault(require("npm-registry-fetch"));
const semver_1 = __importDefault(require("semver"));
const axios_1 = __importDefault(require("axios"));
async function fetchVersionsFromNpm(packageName) {
    return npm_registry_fetch_1.default
        .json(packageName)
        .then((json) => {
        const versions = (json.versions || {});
        return Object.keys(versions);
    })
        .catch(() => []);
}
const findHighestUpdateByKind = (kind, current, versions) => {
    const minorVersion = current.replace(/^(\d+\.\d+).*/, "$1");
    const majorVersion = current.replace(/^(\d+).*/, "$1");
    const result = versions.reduce((acc, { version }) => {
        if (/^\d+\.\d+\.\d+$/.test(version) === false)
            return acc;
        if (semver_1.default.gt(acc, version))
            return acc;
        if (kind === "patch" && version.startsWith(minorVersion))
            return version;
        if (kind === "minor" &&
            version.startsWith(majorVersion) &&
            !version.startsWith(minorVersion)) {
            return version;
        }
        if (kind === "major" && !version.startsWith(majorVersion)) {
            return version;
        }
        return acc;
    }, current);
    return result === current ? null : result;
};
exports.findHighestUpdateByKind = findHighestUpdateByKind;
function findLatestNonBreaking(current, versions) {
    const minor = exports.findHighestUpdateByKind("minor", current, versions);
    if (minor)
        return minor;
    const patch = exports.findHighestUpdateByKind("patch", current, versions);
    if (patch)
        return patch;
    return null;
}
exports.findLatestNonBreaking = findLatestNonBreaking;
;
function isUpdateAvailable(current, versions) {
    return Boolean(exports.findHighestUpdateByKind("patch", current, versions) ||
        exports.findHighestUpdateByKind("minor", current, versions) ||
        exports.findHighestUpdateByKind("major", current, versions));
}
exports.isUpdateAvailable = isUpdateAvailable;
async function findPackageVersions(packageName) {
    const versions = await fetchVersionsFromNpm(packageName);
    const stableVersions = versions.filter((version) => /^\d+\.\d+\.\d+$/.test(version) && semver_1.default.lte("0.1.0", version));
    const stableVersionsOrdered = stableVersions.sort().reverse();
    const releaseNotesMap = await axios_1.default
        .get("https://api.github.com/repos/prismicio/slice-machine/releases")
        .then((response) => {
        const releaseNotes = response.data;
        return releaseNotes.reduce((map, releaseNote) => {
            map[releaseNote.name] = releaseNote;
            return map;
        }, {});
    })
        .catch(() => {
        console.log("Couldn't retrieve Github release notes");
        return {};
    });
    return stableVersionsOrdered.map((stableVersion) => {
        return {
            version: stableVersion,
            releaseNote: releaseNotesMap[stableVersion]
                ? releaseNotesMap[stableVersion].body
                : null,
        };
    });
}
exports.findPackageVersions = findPackageVersions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtQXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Vudi9ucG1BcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNEVBQTBDO0FBQzFDLG9EQUE0QjtBQUM1QixrREFBMEI7QUFTMUIsS0FBSyxVQUFVLG9CQUFvQixDQUFDLFdBQW1CO0lBQ3JELE9BQU8sNEJBQVE7U0FDWixJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2pCLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBNEIsQ0FBQztRQUNsRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFFTSxNQUFNLHVCQUF1QixHQUFHLENBQ3JDLElBQWlDLEVBQ2pDLE9BQWUsRUFDZixRQUErQixFQUNoQixFQUFFO0lBQ2pCLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXZELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBQ2xELElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUs7WUFBRSxPQUFPLEdBQUcsQ0FBQztRQUMxRCxJQUFJLGdCQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7WUFBRSxPQUFPLEdBQUcsQ0FBQztRQUN4QyxJQUFJLElBQUksS0FBSyxPQUFPLElB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