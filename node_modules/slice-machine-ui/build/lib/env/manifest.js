"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractRepo = exports.ManifestState = void 0;
const parse_domain_1 = require("parse-domain");
const node_utils_1 = require("@slicemachine/core/build/node-utils");
const io_ts_reporters_1 = require("io-ts-reporters");
var ManifestState;
(function (ManifestState) {
    ManifestState["Valid"] = "Valid";
    ManifestState["NotFound"] = "NotFound";
    ManifestState["InvalidJson"] = "InvalidJson";
})(ManifestState = exports.ManifestState || (exports.ManifestState = {}));
const Messages = {
    [ManifestState.Valid]: "Manifest is correctly setup.",
    [ManifestState.NotFound]: "Could not find manifest file (./sm.json).",
    [ManifestState.InvalidJson]: "Could not parse manifest (./sm.json).",
};
function extractRepo(parsedRepo) {
    switch (parsedRepo.type) {
        case parse_domain_1.ParseResultType.Listed:
            if (parsedRepo.labels.length) {
                return parsedRepo.labels[0];
            }
            if (parsedRepo.subDomains.length) {
                return parsedRepo.subDomains[0];
            }
        default:
            return;
    }
}
exports.extractRepo = extractRepo;
function handleManifest(cwd, validate = false) {
    try {
        const maybeManifest = node_utils_1.retrieveManifest(cwd, validate);
        if (maybeManifest.exists === false) {
            return {
                state: ManifestState.NotFound,
                message: Messages[ManifestState.NotFound],
                content: null,
            };
        }
        if (maybeManifest.errors) {
            const messages = io_ts_reporters_1.formatValidationErrors(maybeManifest.errors, {});
            const message = messages.map((error) => "[sm.json] " + error).join("\n");
            return {
                state: ManifestState.InvalidJson,
                message,
                content: null,
            };
        }
        if (maybeManifest.content === null) {
            return {
                state: ManifestState.InvalidJson,
                message: Messages[ManifestState.InvalidJson],
                content: null,
            };
        }
        const endpoint = parse_domain_1.fromUrl(maybeManifest.content.apiEndpoint);
        const parsedRepo = parse_domain_1.parseDomain(endpoint);
        const repo = extractRepo(parsedRepo);
        return {
            state: ManifestState.Valid,
            message: Messages[ManifestState.Valid],
            content: maybeManifest.content,
            repo,
        };
    }
    catch (e) {
        return {
            state: ManifestState.InvalidJson,
            message: Messages[ManifestState.InvalidJson],
            content: null,
        };
    }
}
exports.default = handleManifest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuaWZlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZW52L21hbmlmZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtDQUtzQjtBQUV0QixvRUFBdUU7QUFDdkUscURBQXlEO0FBU3pELElBQVksYUFJWDtBQUpELFdBQVksYUFBYTtJQUN2QixnQ0FBZSxDQUFBO0lBQ2Ysc0NBQXFCLENBQUE7SUFDckIsNENBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUpXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBSXhCO0FBRUQsTUFBTSxRQUFRLEdBQUc7SUFDZixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSw4QkFBOEI7SUFDckQsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUUsMkNBQTJDO0lBQ3JFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxFQUFFLHVDQUF1QztDQUNyRSxDQUFDO0FBRUYsU0FBZ0IsV0FBVyxDQUFDLFVBQXVCO0lBQ2pELFFBQVEsVUFBVSxDQUFDLElBQUksRUFBRTtRQUN2QixLQUFLLDhCQUFlLENBQUMsTUFBTTtZQUN6QixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUM1QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDN0I7WUFDRCxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUNoQyxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakM7UUFDSDtZQUNFLE9BQU87S0FDVjtBQUNILENBQUM7QUFaRCxrQ0FZQztBQUVELFNBQVMsY0FBYyxDQUFDLEdBQVcsRUFBRSxRQUFRLEdBQUcsS0FBSztJQUNuRCxJQUFJO1FBQ0YsTUFBTSxhQUFhLEdBQUcsNkJBQWdCLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7WUFDbEMsT0FBTztnQkFDTCxLQUFLLEVBQUUsYUFBYSxDQUFDLFFBQVE7Z0JBQzdCLE9BQU8sRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztnQkFDekMsT0FBTyxFQUFFLElBQUk7YUFDZCxDQUFDO1NBQ0g7UUFFRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsTUFBTSxRQUFRLEdBQUcsd0NBQXNCLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXpFLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLGFBQWEsQ0FBQyxXQUFXO2dCQUNoQyxPQUFPO2dCQUNQLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQztTQUNIO1FBRUQsSUFBSSxhQUFhLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUNsQyxPQUFPO2dCQUNMLEtBQUssRUFBRSxhQUFhLENBQUMsV0FBVztnQkFDaEMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO2dCQUM1QyxPQUFPLEVBQUUsSUFBSTthQUNkLENBQUM7U0FDSDtRQUVELE1BQU0sUUFBUSxHQUFHLHNCQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1RCxNQUFNLFVBQVUsR0FBRywwQkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxPQUFPO1lBQ0wsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLO1lBQzFCLE9BQU8sRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUN0QyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU87WUFDOUIsSUFBSTtTQUNMLENBQUM7S0FDSDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTztZQUNMLEtBQUssRUFBRSxhQUFhLENBQUMsV0FBVztZQUNoQyxPQUFPLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7WUFDNUMsT0FBTyxFQUFFLElBQUk7U0FDZCxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBRUQsa0JBQWUsY0FBYyxDQUFDIn0=