"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const Either_1 = require("fp-ts/Either");
const upload_1 = __importDefault(require("./upload"));
const files_1 = __importDefault(require("../../../utils/files"));
const UserProfile_1 = require("@slicemachine/core/build/models/UserProfile");
const axios_1 = __importDefault(require("axios"));
const SharedSlicesApi = {
    STAGE: "https://customtypes.wroom.io/",
    PROD: "https://customtypes.prismic.io/",
};
const AuthApi = {
    STAGE: "https://auth.wroom.io/",
    PROD: "https://auth.prismic.io/",
};
const UserService = {
    STAGE: "https://user.wroom.io/",
    PROD: "https://user.internal-prismic.io/",
};
const AclProviderApi = {
    STAGE: "https://2iamcvnxf4.execute-api.us-east-1.amazonaws.com/stage/",
    PROD: "https://0yyeb2g040.execute-api.us-east-1.amazonaws.com/prod/",
};
const SlicesPrefix = "slices/";
const ValidatePrefix = "validate/";
const RefreshTokenPrefix = "refreshtoken/";
const CustomTypesPrefix = "customtypes/";
function createApiUrl(base, { STAGE, PROD }) {
    if (base && base.includes("wroom.io")) {
        return STAGE;
    }
    return PROD;
}
function createFetcher(apiUrl, repo, auth) {
    return function runFetch(prefix, body, action = "", method = "get") {
        const headers = {
            repository: repo,
            Authorization: `Bearer ${auth}`,
            "User-Agent": "slice-machine",
        };
        return fetch(new URL(action, `${apiUrl}${prefix}`).toString(), {
            headers,
            method,
            ...(method === "post"
                ? {
                    body: "object" === typeof body ? JSON.stringify(body) : body,
                }
                : null),
        });
    };
}
const initFetcher = (base, ApiUrls, devConfigArgs, repo, auth) => {
    const apiUrl = createApiUrl(base, ApiUrls);
    const args = devConfigArgs ? devConfigArgs : [apiUrl, repo, auth];
    return createFetcher(args[0], args[1], args[2]);
};
class DefaultClient {
    constructor(cwd, base, repo, auth) {
        this.cwd = cwd;
        this.base = base;
        this.repo = repo;
        this.auth = auth;
        this.images = {
            createAcl: async () => {
                return this.aclFetcher("", undefined, "create", "get");
            },
            deleteFolder: async (body) => {
                return this.aclFetcher("", body, "delete-folder", "post");
            },
            post: async (params) => {
                return upload_1.default(params);
            },
        };
        const devConfig = (() => {
            if (!cwd) {
                return {};
            }
            try {
                return files_1.default.readJson(path_1.default.join(cwd, "sm.dev.json"));
            }
            catch (e) {
                return {};
            }
        })();
        this.base = base;
        this.auth = auth;
        this.apiFetcher = initFetcher(base, SharedSlicesApi, devConfig.sharedSlicesApi, repo, auth);
        this.aclFetcher = initFetcher(base, AclProviderApi, devConfig.aclProviderApi, repo, auth);
    }
    static validate(base, auth) {
        return fetch(`${createApiUrl(base, AuthApi)}${ValidatePrefix}?token=${auth}`, {
            method: "GET",
        });
    }
    static refreshToken(base, auth) {
        return fetch(`${createApiUrl(base, AuthApi)}${RefreshTokenPrefix}?token=${auth}`, {
            method: "GET",
        });
    }
    static async profile(base, auth) {
        const result = await axios_1.default.get(`${createApiUrl(base, UserService)}profile`, { headers: { Authorization: `Bearer ${auth}` } });
        return Either_1.getOrElseW(() => {
            throw new Error(`Unable to parse profile: ${JSON.stringify(result.data)}`);
        })(UserProfile_1.UserProfile.decode(result.data));
    }
    async getSlice() {
        return this.apiFetcher(SlicesPrefix);
    }
    async getCustomTypes() {
        return this.apiFetcher(CustomTypesPrefix);
    }
    async insertCustomType(body) {
        return this.apiFetcher(CustomTypesPrefix, body, "insert", "post");
    }
    async updateCustomType(body) {
        return this.apiFetcher(CustomTypesPrefix, body, "update", "post");
    }
    async insertSlice(body) {
        return this.apiFetcher(SlicesPrefix, body, "insert", "post");
    }
    async updateSlice(body) {
        return this.apiFetcher(SlicesPrefix, body, "update", "post");
    }
}
exports.default = DefaultClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdENsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29tbW9uL2h0dHAvRGVmYXVsdENsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUN4Qix5Q0FBMEM7QUFDMUMsc0RBQThCO0FBQzlCLGlFQUF5QztBQUV6Qyw2RUFBMEU7QUFDMUUsa0RBQTBCO0FBVTFCLE1BQU0sZUFBZSxHQUFHO0lBQ3RCLEtBQUssRUFBRSwrQkFBK0I7SUFDdEMsSUFBSSxFQUFFLGlDQUFpQztDQUN6QixDQUFDO0FBRWpCLE1BQU0sT0FBTyxHQUFHO0lBQ2QsS0FBSyxFQUFFLHdCQUF3QjtJQUMvQixJQUFJLEVBQUUsMEJBQTBCO0NBQ2pDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRztJQUNsQixLQUFLLEVBQUUsd0JBQXdCO0lBQy9CLElBQUksRUFBRSxtQ0FBbUM7Q0FDMUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLEtBQUssRUFBRSwrREFBK0Q7SUFDdEUsSUFBSSxFQUFFLDhEQUE4RDtDQUN0RCxDQUFDO0FBRWpCLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUMvQixNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUM7QUFDbkMsTUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFDM0MsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUM7QUFFekMsU0FBUyxZQUFZLENBQUMsSUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBZTtJQUM5RCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3JDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFJRCxTQUFTLGFBQWEsQ0FDcEIsTUFBYyxFQUNkLElBQVksRUFDWixJQUFZO0lBT1osT0FBTyxTQUFTLFFBQVEs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