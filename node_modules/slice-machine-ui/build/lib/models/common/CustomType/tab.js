"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tab = void 0;
const widgets_1 = require("@prismicio/types-internal/lib/customtypes/widgets");
const sliceZone_1 = require("@lib/models/common/CustomType/sliceZone");
exports.Tab = {
    init(id) {
        return { key: id, value: [] };
    },
    updateSliceZone(tab) {
        return (mutate) => {
            return {
                ...tab,
                sliceZone: tab.sliceZone && mutate(tab.sliceZone),
            };
        };
    },
    updateGroup(tab, groupId) {
        return (mutate) => {
            return {
                ...tab,
                value: tab.value.map((field) => {
                    if (field.key === groupId && field.value.type === widgets_1.WidgetTypes.Group) {
                        return {
                            key: groupId,
                            value: mutate(field.value),
                        };
                    }
                    return field;
                }),
            };
        };
    },
    addWidget(tab, id, widget) {
        const elem = { key: id, value: widget };
        return {
            ...tab,
            value: [...tab.value, elem],
        };
    },
    replaceWidget(tab, previousKey, newKey, value) {
        return {
            ...tab,
            value: tab.value.map((t) => {
                if (t.key === previousKey) {
                    return {
                        key: newKey,
                        value,
                    };
                }
                return t;
            }),
        };
    },
    reorderWidget(tab, start, end) {
        const reorderedWidget = tab.value[start];
        if (!reorderedWidget)
            throw new Error(`Unable to reorder the widget at index ${start}.`);
        const reorderedArea = tab.value.reduce((acc, widget, index) => {
            const elems = [widget, reorderedWidget];
            switch (index) {
                case start:
                    return acc;
                case end:
                    return [...acc, ...(end > start ? elems : elems.reverse())];
                default:
                    return [...acc, widget];
            }
        }, []);
        return {
            ...tab,
            value: reorderedArea,
        };
    },
    removeWidget(tab, id) {
        const newTab = {
            ...tab,
            value: tab.value.filter((e) => e.key !== id),
        };
        return newTab;
    },
    createSliceZone(tab, key) {
        return {
            ...tab,
            sliceZone: sliceZone_1.SliceZone.createEmpty(key),
        };
    },
    organiseFields(tabSM) {
        const { fields, groups } = tabSM.value.reduce((acc, current) => {
            switch (current.value.type) {
                case widgets_1.WidgetTypes.UID:
                    return acc;
                case widgets_1.WidgetTypes.Group:
                    return {
                        ...acc,
                        groups: [
                            ...acc.groups,
                            { key: current.key, value: current.value },
                        ],
                    };
                    return acc;
                default:
                    return {
                        ...acc,
                        fields: [
                            ...acc.fields,
                            current,
                        ],
                    };
            }
        }, { fields: [], groups: [] });
        return {
            fields,
            groups,
            sliceZone: tabSM.sliceZone,
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL21vZGVscy9jb21tb24vQ3VzdG9tVHlwZS90YWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0VBQWdGO0FBT2hGLHVFQUFvRTtBQVN2RCxRQUFBLEdBQUcsR0FBRztJQUNqQixJQUFJLENBQUMsRUFBVTtRQUNiLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsZUFBZSxDQUFDLEdBQVU7UUFDeEIsT0FBTyxDQUFDLE1BQThCLEVBQUUsRUFBRTtZQUN4QyxPQUFPO2dCQUNMLEdBQUcsR0FBRztnQkFDTixTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzthQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELFdBQVcsQ0FBQyxHQUFVLEVBQUUsT0FBZTtRQUNyQyxPQUFPLENBQUMsTUFBK0IsRUFBUyxFQUFFO1lBQ2hELE9BQU87Z0JBQ0wsR0FBRyxHQUFHO2dCQUNOLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUM3QixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLHFCQUFXLENBQUMsS0FBSyxFQUFFO3dCQUNuRSxPQUFPOzRCQUNMLEdBQUcsRUFBRSxPQUFPOzRCQUNaLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzt5QkFDM0IsQ0FBQztxQkFDSDtvQkFDRCxPQUFPLEtBQUssQ0FBQztnQkFDZixDQUFDLENBQUM7YUFDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUNELFNBQVMsQ0FBQyxHQUFVLEVBQUUsRUFB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