"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFields = void 0;
const react_1 = require("react");
const yup = __importStar(require("yup"));
const forms_1 = require("@lib/forms");
const fields_1 = require("@lib/forms/fields");
const defaults_1 = require("@lib/forms/defaults");
const options_1 = __importStar(require("./options"));
const Field_1 = __importDefault(require("@lib/builders/common/EditModal/Field"));
const theme_ui_1 = require("theme-ui");
const Flex_1 = require("@components/Flex");
const SliceMachineIconButton_1 = __importDefault(require("@components/SliceMachineIconButton"));
const isAllSet = (curr) => !options_1.optionValues.find((e) => !curr.includes(e));
const _createInitialOptions = (str) => {
    const arr = str.split(",");
    return options_1.default.reduce((acc, { value }) => {
        if (arr.includes(value)) {
            return [...acc, value];
        }
        return acc;
    }, []);
};
const FormFields = {
    ...defaults_1.DefaultFields,
    allowTargetBlank: fields_1.CheckBox("Allow target blank for links"),
};
exports.FormFields = FormFields;
const accessors = ["config.single", "config.multi"];
const WidgetForm = (props) => {
    const { initialValues, values: formValues, errors, fields, setFieldValue, } = props;
    const { config: { single, multi }, } = formValues;
    const initialOptions = single
        ? _createInitialOptions(single)
        : (multi && _createInitialOptions(multi)) || options_1.optionValues;
    const [isMulti, setIsMulti] = react_1.useState(single ? false : true);
    const [acceptOptions, setAcceptOptions] = react_1.useState(initialOptions);
    react_1.useEffect(() => {
        const fieldNameIndex = isMulti ? 1 : 0;
        setFieldValue(accessors[fieldNameIndex], acceptOptions.join(","));
        setTimeout(() => {
            setFieldValue(accessors[1 - fieldNameIndex], undefined);
        }, 100);
    }, [isMulti, acceptOptions]);
    return (<Flex_1.Flex>
      {Object.entries(FormFields).map(([key, field]) => (<Flex_1.Col key={key}>
            <Field_1.default fieldName={forms_1.createFieldNameFromKey(key)} formField={field} fields={fields} initialValues={initialValues}/>
          </Flex_1.Col>))}
      <Flex_1.Col>
        <theme_ui_1.Label htmlFor="accept" variant="label.primary" sx={{
            mt: 1,
            display: "flex",
            alignItems: "center",
        }}>
          Accept*
          <theme_ui_1.Button type="button" variant="buttons.textButton" onClick={() => {
            if (isAllSet(acceptOptions)) {
                return setAcceptOptions([]);
            }
            setAcceptOptions(options_1.optionValues);
        }}>
            {isAllSet(acceptOptions) ? "Unselect All" : "Select all"}
          </theme_ui_1.Button>
        </theme_ui_1.Label>
        {options_1.default.map((opt) => (<SliceMachineIconButton_1.default fitButton useActive key={opt.value} label={opt.label} size={14} Icon={opt.icon} sx={{
                p: "16px",
                mb: 2,
                mr: 2,
                variant: "buttons.selectIcon",
            }} active={acceptOptions.find((e) => e === opt.value)} onClick={() => {
                if (acceptOptions.find((e) => e === opt.value)) {
                    return setAcceptOptions(acceptOptions.filter((e) => e !== opt.value));
                }
                setAcceptOptions([...acceptOptions, opt.value]);
            }}/>))}
        {errors[accessors[isMulti ? 1 : 0]] ? (<theme_ui_1.Box sx={{ position: "absolute" }}>
              <theme_ui_1.Text as="span" variant="text.labelError" pl={0}>
                {errors[accessors[isMulti ? 1 : 0]]}
              </theme_ui_1.Text>
            </theme_ui_1.Box>) : null}
      </Flex_1.Col>
      <Flex_1.Col>
        <theme_ui_1.Flex sx={{
            mt: 2,
            alignItems: "center",
            height: "100%",
        }}>
          <theme_ui_1.Label variant="label.border">
            <theme_ui_1.Checkbox value={isMulti} defaultChecked={isMulti} onChange={() => setIsMulti(!isMulti)}/>
            Allow multiple paragraphs
          </theme_ui_1.Label>
        </theme_ui_1.Flex>
      </Flex_1.Col>
    </Flex_1.Flex>);
};
const keys = ["single", "multi"];
keys.forEach((key, index) => {
    FormFields[key] = {
        validate: () => yup.string().test({
            name: key,
            message: `Options cannot be empty`,
            test: function () {
                if (this.parent[keys[1 - index]] &&
                    typeof this.parent[keys[1 - index]] === "string") {
                    return true;
                }
                if (typeof this.parent[key] !== "string") {
                    return false;
                }
                if ((!this.parent[key] || !this.parent[key].length) &&
                    (!this.parent[keys[1 - index]] ||
                        !this.parent[keys[1 - index]].length)) {
                    return false;
                }
                const arr = this.parent[key].split(",");
                if (arr.find((e) => !options_1.optionValues.includes(e))) {
                    return false;
                }
                return true;
            },
        }),
    };
});
exports.default = WidgetForm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29tbW9uL3dpZGdldHMvU3RydWN0dXJlZFRleHQvRm9ybS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQTRDO0FBQzVDLHlDQUEyQjtBQUMzQixzQ0FBb0Q7QUFDcEQsOENBQW9FO0FBQ3BFLGtEQUFvRDtBQUVwRCxxREFBa0Q7QUFFbEQsaUZBQW1FO0FBRW5FLHVDQUFvRTtBQUNwRSwyQ0FBeUQ7QUFDekQsZ0dBQXdFO0FBR3hFLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLHNCQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV4RSxNQUFNLHFCQUFxQixHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFFcEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixPQUFPLGlCQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUV2QyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdkIsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDLENBQUM7QUFHRixNQUFNLFVBQVUsR0FBRztJQUNqQixHQUFHLHdCQUFhO0lBQ2hCLGdCQUFnQixFQUFFLGlCQUFtQixDQUFDLDhCQUE4QixDQUFDO0NBQ3RFLENBQUM7QUE2TE8sZ0NBQVU7QUEzTG5CLE1BQU0sU0FBUyxH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