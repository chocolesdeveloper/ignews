"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionValues = void 0;
const fi_1 = require("react-icons/fi");
const bs_1 = require("react-icons/bs");
const Icon = (v) => ({ size }) => {
    return <span style={{ fontSize: size }}>{v}</span>;
};
const options = [
    {
        value: "paragraph",
        label: "P",
        icon: Icon("p"),
    },
    {
        value: "preformatted",
        label: "PRE",
        icon: Icon("pre"),
    },
    {
        value: "heading1",
        label: "H1",
        icon: Icon("h1"),
    },
    {
        value: "heading2",
        label: "H2",
        icon: Icon("h2"),
    },
    {
        value: "heading3",
        label: "H3",
        icon: Icon("h3"),
    },
    {
        value: "heading4",
        label: "H4",
        icon: Icon("h4"),
    },
    {
        value: "heading5",
        label: "H5",
        icon: Icon("h5"),
    },
    {
        value: "heading6",
        label: "H6",
        icon: Icon("h6"),
    },
    {
        value: "strong",
        label: "Strong",
        icon: Icon(<b>b</b>),
    },
    {
        value: "em",
        label: "em",
        icon: Icon(<em style={{ fontFamily: "serif" }}>I</em>),
    },
    {
        value: "hyperlink",
        label: "hyperlink",
        icon: Icon(<fi_1.FiLink2 />),
    },
    {
        value: "image",
        label: "image",
        icon: Icon(<fi_1.FiImage />),
    },
    {
        value: "embed",
        label: "embed",
        icon: Icon(<fi_1.FiCode />),
    },
    {
        value: "list-item",
        label: "list",
        icon: Icon(<fi_1.FiList />),
    },
    {
        value: "o-list-item",
        label: "o",
        icon: Icon(<bs_1.BsListOl />),
    },
    {
        value: "rtl",
        label: "rtl",
        icon: Icon("rtl"),
    },
];
exports.optionValues = options.map((e) => e.value);
exports.default = options;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29tbW9uL3dpZGdldHMvU3RydWN0dXJlZFRleHQvb3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBa0U7QUFDbEUsdUNBQTBDO0FBRTFDLE1BQU0sSUFBSSxHQUNSLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDTixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUVYLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUVKLE1BQU0sT0FBTyxHQUFHO0lBQ2Q7UUFDRSxLQUFLLEVBQUUsV0FBVztRQUNsQixLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDO0tBQ2hCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsY0FBYztRQUNyQixLQUFLLEVBQUUsS0FBSztRQUNaLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ2xCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsSUFBSTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsUUFBUTtRQUNmLEtBQUssRUFBRSxRQUFRO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckI7SUFDRDtRQUNFLEtBQUssRUFBRSxJQUFJO1FBQ1gsS0FBSyxFQUFFLElBQUk7UUFDWCxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZEO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsV0FBVztRQUNsQixLQUFLLEVBQUUsV0FBVztRQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsWUFBTyxDQUFDLEFBQUQsRUFBRyxDQUFDO0tBQ3hCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFlBQU8sQ0FBQyxBQUFELEVBQUcsQ0FBQztLQUN4QjtJQUNEO1FBQ0UsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFNLENBQUMsQUFBRCxFQUFHLENBQUM7S0FDdkI7SUFDRDtRQUNFLEtBQUssRUFBRSxXQUFXO1FBQ2xCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQU0sQ0FBQyxBQUFELEVBQUcsQ0FBQztLQUN2QjtJQUNEO1FBQ0UsS0FBSyxFQUFFLGFBQWE7UUFDcEIsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsYUFBUSxDQUFDLEFBQUQsRUFBRyxDQUFDO0tBQ3pCO0lBQ0Q7UUFDRSxLQUFLLEVBQUUsS0FBSztRQUNaLEtBQUssRUFBRSxLQUFLO1FBQ1osSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDbEI7Q0FDRixDQUFDO0FBRVcsUUFBQSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELGtCQUFlLE9BQU8sQ0FBQyJ9