"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockConfigForm = void 0;
const react_1 = require("react");
const theme_ui_1 = require("theme-ui");
const fa_1 = require("react-icons/fa");
const formik_1 = require("formik");
const _1 = require(".");
const components_1 = require("./components");
const Tooltip_1 = __importDefault(require("components/Tooltip"));
const Flex_1 = require("components/Flex");
const consts_1 = require("../../../../../consts");
const dataTip = `To generate mock content, we'll use the selected pattern.<br/>A pattern is an array of RichText options, repeated "block" times.`;
const HandlePatternTypes = ({ options, currentKey, onUpdate, onUpdateBlocks, blocksValue, }) => {
    const { theme } = theme_ui_1.useThemeUI();
    const PatternsWithStatus = Object.entries(_1.Patterns).map(([key, pattern]) => ({
        patternKey: key,
        isAllowed: _1.Patterns[key].test(options),
        pattern,
    }));
    return (<theme_ui_1.Box>
      <Tooltip_1.default id="richtext-mock"/>
      <Flex_1.Flex mt={3}>
        <Flex_1.Col>
          <theme_ui_1.Label variant="label.primary">
            Mock Pattern
            <fa_1.FaRegQuestionCircle data-for="richtext-mock" data-multiline="true" data-tip={dataTip} color={theme.colors.icons} style={{
            position: "relative",
            top: "3px",
            height: "18px",
            marginLeft: "8px",
        }}/>
          </theme_ui_1.Label>
          {PatternsWithStatus.map(({ patternKey, ...rest }) => (<components_1.PatternCard key={patternKey} patternKey={patternKey} onUpdate={onUpdate} currentKey={currentKey} {...rest}/>))}
        </Flex_1.Col>
        <Flex_1.Col>
          <components_1.NumberOfBlocks currentValue={blocksValue} onUpdate={onUpdateBlocks}/>
        </Flex_1.Col>
      </Flex_1.Flex>
    </theme_ui_1.Box>);
};
const Form = () => {
    var _a;
    const [patternTypeCheck, setPatternTypeCheck] = react_1.useState(null);
    const { values, setFieldValue } = formik_1.useFormikContext();
    const options = (values.config.single || values.config.multi || "").split(",");
    const configValues = ((_a = values[consts_1.MockConfigKey]) === null || _a === void 0 ? void 0 : _a.config) || {};
    react_1.useEffect(() => {
        const { mockConfig: { config: { patternType }, }, } = values;
        if (patternType &&
            patternType !== patternTypeCheck &&
            !_1.Patterns[patternType].test(options)) {
            onUpdate({
                key: "patternType",
                updateType: "config",
                value: findValidPattern(options),
            });
            setPatternTypeCheck(patternType);
        }
    });
    const onUpdate = ({ updateType, key, value }) => {
        var _a;
        setFieldValue(consts_1.MockConfigKey, {
            [updateType]: {
                ...(((_a = values[consts_1.MockConfigKey]) === null || _a === void 0 ? void 0 : _a[updateType]) || {}),
                [key]: value,
            },
        });
    };
    const onSetPattern = (value, isPattern) => {
        onUpdate({
            key: isPattern ? "pattern" : "patternType",
            updateType: "config",
            value,
        });
    };
    const onSetBlocks = (value) => {
        onUpdate({ key: "blocks", value, updateType: "config" });
    };
    return (<theme_ui_1.Box>
      <HandlePatternTypes options={options} currentKey={configValues.patternType || _1.DEFAULT_PATTERN_KEY} onUpdate={onSetPattern} onUpdateBlocks={onSetBlocks} blocksValue={configValues.blocks || 1} currentValue={_1.Patterns[configValues.patternType || _1.DEFAULT_PATTERN_KEY].value(options)}/>
    </theme_ui_1.Box>);
};
const findValidPattern = (config) => {
    const patternEntry = Object.entries(_1.Patterns).find(([, pat]) => pat.test(config));
    if (patternEntry) {
        return patternEntry[0];
    }
    return _1.DEFAULT_PATTERN_KEY;
};
Form.onSave = (mockValue, values) => {
    var _a;
    if (!((_a = mockValue === null || mockValue === void 0 ? void 0 : mockValue.config) === null || _a === void 0 ? void 0 : _a.patternType)) {
        return mockValue;
    }
    const { patternType } = mockValue.config;
    const patternObj = _1.Patterns[patternType];
    if (!patternObj) {
        return _1.initialValues;
    }
    const options = (values.config.single || values.config.multi).split(",");
    const isValidPatternType = patternObj.test(options);
    if (isValidPatternType) {
        return mockValue;
    }
    return {
        ...mockValue,
        config: {
            ...mockValue.config,
            patternType: findValidPattern(options),
        },
    };
};
Form.initialValues = _1.initialValues;
exports.MockConfigForm = Form;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29tbW9uL3dpZGdldHMvU3RydWN0dXJlZFRleHQvTW9jay9Gb3JtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlDQUE0QztBQUM1Qyx1Q0FBa0Q7QUFDbEQsdUNBQXFEO0FBQ3JELG1DQUEwQztBQUUxQyx3QkFBaUU7QUFFakUsNkNBQTJEO0FBRTNELGlFQUF5QztBQUN6QywwQ0FBd0Q7QUFFeEQsa0RBQXNEO0FBRXRELE1BQU0sT0FBTyxHQUFHLGtJQUFrSSxDQUFDO0FBRW5KLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxFQUMxQixPQUFPLEVBQ1AsVUFBVSxFQUNWLFFBQVEsRUFDUixjQUFjLEVBQ2QsV0FBVyxHQUNaLEVBQUUsRUFBRTtJQUNILE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxxQkFBVSxFQUFFLENBQUM7SUFFL0IsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLFVBQVUsRUFBRSxHQUFHO1FBRWYsU0FBUyxFQUFFLFdBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RDLE9BQU87S0FDUixDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU8sQ0FDTCxDQUFDLGNBQUcsQ0FDRjtNQUFBLENBQUMsaUJBQU8sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUMzQjtNQUFBLENBQUMsV0FBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNkO1FBQUEsQ0FBQyxVQUFHLENBQ0Y7VUFBQSxDQUFDLGdCQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FDNUI7O1lBQ0EsQ0FBQyx3QkFBbUIsQ0FDbEIsUUFBUSxDQUFD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