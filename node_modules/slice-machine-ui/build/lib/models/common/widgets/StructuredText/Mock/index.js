"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialValues = exports.handleMockContent = exports.handleMockConfig = exports.Patterns = exports.LoremDefaultConfig = exports.DEFAULT_PATTERN_KEY = void 0;
const faker_1 = __importDefault(require("@faker-js/faker"));
const lorem_ipsum_1 = require("lorem-ipsum");
const Mock_1 = require("../../Image/Mock");
const isHeading = (type) => type.indexOf("heading") === 0;
exports.DEFAULT_PATTERN_KEY = "PARAGRAPH";
exports.LoremDefaultConfig = {
    sentencesPerParagraph: {
        min: 1,
        max: 3,
    },
    wordsPerSentence: {
        min: 4,
        max: 16,
    },
};
const optionalType = (options, type) => options.find((e) => e === type) && Math.random() > 0.5 ? [type] : [];
exports.Patterns = {
    PARAGRAPH: {
        title: "Simple Paragraph",
        test: (options) => options.some((e) => e === "paragraph"),
        value: () => ["paragraph"],
        description: "A single paragraph with a variant number of words.",
    },
    HEADING: {
        title: "Section Title",
        test: (options) => options.some(isHeading),
        value: (options) => [options.find(isHeading) || "heading1"],
        description: "A single heading (h1 to h6) with a variant number of words.",
    },
    STORY: {
        title: "Story",
        test: (options) => options.some(isHeading) && options.some((e) => e === "paragraph"),
        value: (options) => [
            options.find(isHeading) || "heading1",
            ...optionalType(options, "image"),
            "paragraph",
        ],
        description: "Content with headings, texts and optional images",
    },
};
const findMatchingPattern = (options) => {
    const PatternEntry = Object.entries(exports.Patterns).find(([key, patt]) => patt.test(options));
    if (PatternEntry && PatternEntry.length) {
        return PatternEntry[1];
    }
    return exports.Patterns[exports.DEFAULT_PATTERN_KEY];
};
const isTextType = (type) => type === "paragraph" || isHeading(type);
const handleText = (contentType, loremConfig) => {
    const lorem = new lorem_ipsum_1.LoremIpsum(loremConfig);
    if (isHeading(contentType)) {
        const fake = faker_1.default.company.bs();
        return [fake[0].toUpperCase(), ...fake.slice(1)].join("");
    }
    return lorem.generateParagraphs(1);
};
const createMockFromConfig = (blocksLen, pattern, loremConfig) => {
    const content = Array(blocksLen)
        .fill()
        .map(() => {
        return pattern.map((contentType) => {
            if (isTextType(contentType)) {
                return {
                    type: contentType,
                    text: handleText(contentType, loremConfig),
                    spans: [],
                };
            }
            if (contentType === "image") {
                const res = Mock_1.handleMockConfig(null, {});
                return {
                    type: contentType,
                    ...res,
                };
            }
        });
    });
    return content.flat();
};
const handleMockConfig = (mockConfigValues, fieldConfig) => {
    const options = (fieldConfig.multi || fieldConfig.single).split(",");
    const patternType = mockConfigValues ? mockConfigValues.patternType : null;
    const patternObj = exports.Patterns[patternType] || findMatchingPattern(options);
    const pattern = patternObj.value(options);
    return createMockFromConfig(mockConfigValues.blocks, pattern, exports.LoremDefaultConfig);
};
exports.handleMockConfig = handleMockConfig;
const handleMockContent = (mockContent, fieldConfig) => {
    if (Array.isArray(mockContent) &&
        mockContent.length &&
        typeof mockContent[0] === "object") {
        return mockContent;
    }
    const options = (fieldConfig.single || fieldConfig.multi).split(",");
    return [
        {
            type: options.find(isHeading) || "paragraph",
            spans: [],
            text: "...",
            ...(typeof mockContent === "object"
                ? mockContent
                :
                    { text: mockContent }),
        },
    ];
};
exports.handleMockContent = handleMockContent;
exports.initialValues = {
    config: {
        patternType: exports.DEFAULT_PATTERN_KEY,
        blocks: 1,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWIvbW9kZWxzL2NvbW1vbi93aWRnZXRzL1N0cnVjdHVyZWRUZXh0L01vY2svaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNERBQW9DO0FBQ3BDLDZDQUF5QztBQUN6QywyQ0FBeUU7QUFHekUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTdDLFFBQUEsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBRWxDLFFBQUEsa0JBQWtCLEdBQUc7SUFDaEMscUJBQXFCLEVBQUU7UUFDckIsR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztLQUNQO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDaEIsR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsRUFBRTtLQUNSO0NBQ0YsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLENBRXJDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFMUQsUUFBQSxRQUFRLEdBQUc7SUFDdEIsU0FBUyxFQUFFO1FBQ1QsS0FBSyxFQUFFLGtCQUFrQjtRQUV6QixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUM7UUFDekQsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMs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