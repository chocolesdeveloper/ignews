"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagesList = exports.ImagesListCards = void 0;
const react_1 = require("react");
const theme_ui_1 = require("theme-ui");
const Flex_1 = require("components/Flex");
const Preview_1 = __importDefault(require("components/Card/Preview"));
const dataset = __importStar(require("./dataset"));
const ImageInput = ({ src, onChange, selected }) => (<input style={{
        padding: "0",
        marginBottom: "8px",
        maxWidth: "100%",
        border: selected
            ? "5px solid rgba(81, 99, 186, 1)"
            : "5px solid transparent",
    }} onClick={onChange} type="image" src={src}/>);
const RenderCol = ({ elements, cols, onSelect }) => (<Flex_1.Col cols={cols}>
    {elements.map(([key, value]) => (<Preview_1.default key={key} title={key} imageUrl={`${value[0].raw}&q=20&w=120`} onClick={() => onSelect(key)}/>))}
  </Flex_1.Col>);
const ImagesListCards = ({ onSelect }) => {
    const entries = Object.entries(dataset);
    const Cols = [
        entries.slice(0, entries.length / 3),
        entries.slice(entries.length / 3, (entries.length / 3) * 2),
        entries.slice((entries.length / 3) * 2),
    ];
    return (<Flex_1.Flex mt={3} px={0} sx={{ display: "flex" }}>
      <RenderCol onSelect={onSelect} cols={3} elements={Cols[0]}/>
      <RenderCol onSelect={onSelect} cols={3} elements={Cols[1]}/>
      <RenderCol onSelect={onSelect} cols={3} elements={Cols[2]}/>
    </Flex_1.Flex>);
};
exports.ImagesListCards = ImagesListCards;
const ImagesList = ({ listName, images, value, onChange }) => {
    const { theme } = theme_ui_1.useThemeUI();
    return (<react_1.Fragment>
      <div style={{
            ...theme.styles.fixedHeader,
            display: "flex",
            background: theme.colors.background,
            padding: "0 8px",
            borderBottom: `1px solid ${theme.colors.borders}`,
        }}>
        <h3>{listName}</h3>
      </div>
      <div style={{
            display: "flex",
            flexWrap: "wrap",
            justifyContent: "space-between",
            padding: "64px 8px 20px",
        }}>
        <div style={{
            flex: `0 ${100 / 2 - 1}%`,
            marginBottom: "4px",
        }}>
          {images.slice(0, images.length / 2).map((image) => (<ImageInput key={image.raw} src={`${image.raw}&q=80&w=400`} onChange={onChange} selected={image.raw.indexOf(value) === 0}/>))}
        </div>
        <div style={{
            flex: `0 ${100 / 2 - 1}%`,
            marginBottom: "4px",
        }}>
          {images.slice(images.length / 2).map((image) => (<ImageInput key={image.raw} src={`${image.raw}&q=80&w=400`} onChange={onChange} selected={image.raw.indexOf(value) === 0}/>))}
        </div>
      </div>
    </react_1.Fragment>);
};
exports.ImagesList = ImagesList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYi9tb2RlbHMvY29tbW9uL3dpZGdldHMvSW1hZ2UvTW9jay9jb21wb25lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBaUM7QUFDakMsdUNBQXNDO0FBQ3RDLDBDQUF3RDtBQUV4RCxzRUFBa0Q7QUFFbEQsbURBQXFDO0FBRXJDLE1BQU0sVUFBVSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUNsRCxDQUFDLEtBQUssQ0FDSixLQUFLLENBQUMsQ0FBQztRQUNMLE9BQU8sRUFBRSxHQUFHO1FBQ1osWUFBWSxFQUFFLEtBQUs7UUFDbkIsUUFBUSxFQUFFLE1BQU07UUFDaEIsTUFBTSxFQUFFLFFBQVE7WUFDZCxDQUFDLENBQUMsZ0NBQWdDO1lBQ2xDLENBQUMsQ0FBQyx1QkFBdUI7S0FDNUIsQ0FBQyxDQUVGLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUNsQixJQUFJLENBQUMsT0FBTyxDQUVaLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNULENBQ0gsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUVsRCxDQUFDLFVBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDZDtJQUFBLENBRUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUM3QixDQUFDLGlCQUFXLENBRVYsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBRVQsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBRVgsUUFBUSxDQUFDLENBQUMsR0FBRyxL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