"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variation = void 0;
("./CustomType/fields");
const camelCase_1 = __importDefault(require("lodash/camelCase"));
exports.Variation = {
    generateId(str) {
        return camelCase_1.default(str);
    },
    toObject(variation) {
        var _a, _b;
        return {
            ...variation,
            primary: (_a = variation.primary) === null || _a === void 0 ? void 0 : _a.reduce((acc, { key, value }) => ({ ...acc, [key]: value }), {}),
            items: (_b = variation.items) === null || _b === void 0 ? void 0 : _b.reduce((acc, { key, value }) => ({ ...acc, [key]: value }), {}),
        };
    },
    toArray(variation) {
        return {
            ...variation,
            primary: Object.entries(variation.primary || {}).map(([key, value]) => ({
                key,
                value,
            })),
            items: Object.entries(variation.items || {}).map(([key, value]) => ({
                key,
                value,
            })),
        };
    },
    reorderWidget(variation, widgetsArea, start, end) {
        const widgets = variation[widgetsArea] || [];
        const reorderedWidget = widgets && widgets[start];
        if (!reorderedWidget)
            throw new Error(`Unable to reorder the widget at index ${start}. the list of widgets contains only ${widgets.length} elements.`);
        const reorderedArea = widgets.reduce((acc, widget, index) => {
            const elems = [widget, reorderedWidget];
            switch (index) {
                case start:
                    return acc;
                case end:
                    return [...acc, ...(end > start ? elems : elems.reverse())];
                default:
                    return [...acc, widget];
            }
        }, []);
        return {
            ...variation,
            [widgetsArea]: reorderedArea,
        };
    },
    replaceWidget(variation, widgetsArea, previousKey, newKey, newValue) {
        const widgets = variation[widgetsArea] || [];
        return {
            ...variation,
            [widgetsArea]: widgets.reduce((acc, { key, value }) => {
                if (key === previousKey) {
                    return acc.concat([{ key: newKey, value: newValue }]);
                }
                else {
                    return acc.concat([{ key, value }]);
                }
            }, []),
        };
    },
    addWidget(variation, widgetsArea, key, value) {
        var _a;
        return {
            ...variation,
            [widgetsArea]: (_a = variation[widgetsArea]) === null || _a === void 0 ? void 0 : _a.concat([{ key, value }]),
        };
    },
    deleteWidget(variation, widgetsArea, widgetKey) {
        var _a;
        return {
            ...variation,
            [widgetsArea]: (_a = variation[widgetsArea]) === null || _a === void 0 ? void 0 : _a.filter(({ key }) => widgetKey !== key),
        };
    },
    copyValue(variation, key, name) {
        return {
            ...variation,
            id: key,
            name,
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFyaWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL21vZGVscy9jb21tb24vVmFyaWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV4QixpRUFBeUM7QUFFNUIsUUFBQSxTQUFTLEdBQUc7SUFDdkIsVUFBVSxDQUFDLEdBQVc7UUFDcEIsT0FBTyxtQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRLENBQUMsU0FBa0M7O1FBQ3pDLE9BQU87WUFDTCxHQUFHLFNBQVM7WUFDWixPQUFPLEVBQUUsTUFBQSxTQUFTLENBQUMsT0FBTywwQ0FBRSxNQUFNLENBQ2hDLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUNuRCxFQUFFLENBQ0g7WUFDRCxLQUFLLEVBQUUsTUFBQSxTQUFTLENBQUMsS0FBSywwQ0FBRSxNQUFNLENBQzVCLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUNuRCxFQUFFLENBQ0g7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyxTQUFtQztRQUN6QyxPQUFPO1lBQ0wsR0FBRyxTQUFTO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDdEUsR0FBRztnQkFDSCxLQUFL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