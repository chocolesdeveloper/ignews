"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MocksConfig = exports.YarnLock = exports.Pkg = exports.SliceTemplateConfig = exports.SMConfig = exports.PrismicConfig = exports.LibrariesStatePath = exports.PackagePaths = exports.CustomPaths = exports.CustomTypesPaths = exports.GeneratedCustomTypesPaths = exports.GeneratedPaths = exports.paths = void 0;
const path_1 = __importDefault(require("path"));
const paths = (cwd, prefix) => ({
    value: () => path_1.default.join(cwd, prefix),
    customType: (id) => ({
        value: () => path_1.default.join(exports.paths(cwd, prefix).value()),
        model: () => path_1.default.join(exports.paths(cwd, prefix).value(), id, "index.json"),
        mock: () => path_1.default.join(exports.paths(cwd, prefix).value(), id, "mocks.json"),
    }),
    library: (libraryName) => ({
        value: () => path_1.default.join(exports.paths(cwd, prefix).value(), libraryName),
        slice: (sliceName) => ({
            value: () => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).value(), sliceName),
            preview: (filename = "preview.png") => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).slice(sliceName).value(), filename),
            stories: (filename = "index.stories.js") => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).slice(sliceName).value(), filename),
            mocks: () => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).slice(sliceName).value(), "mocks.json"),
            model: () => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).slice(sliceName).value(), "model.json"),
            variation: (variationId) => ({
                value: () => path_1.default.join(exports.paths(cwd, prefix).library(libraryName).slice(sliceName).value(), variationId),
                preview: (filename = "preview.png") => path_1.default.join(exports.paths(cwd, prefix)
                    .library(libraryName)
                    .slice(sliceName)
                    .variation(variationId)
                    .value(), filename),
            }),
        }),
    }),
});
exports.paths = paths;
const GeneratedPaths = (cwd) => exports.paths(cwd, path_1.default.join(".slicemachine", "assets"));
exports.GeneratedPaths = GeneratedPaths;
const GeneratedCustomTypesPaths = (cwd) => exports.paths(cwd, path_1.default.join(".slicemachine", "assets", "customtypes"));
exports.GeneratedCustomTypesPaths = GeneratedCustomTypesPaths;
const CustomTypesPaths = (cwd) => exports.paths(cwd, "customtypes");
exports.CustomTypesPaths = CustomTypesPaths;
const CustomPaths = (cwd) => exports.paths(cwd, "");
exports.CustomPaths = CustomPaths;
const PackagePaths = (cwd) => exports.paths(cwd, "node_modules");
exports.PackagePaths = PackagePaths;
const LibrariesStatePath = (cwd) => path_1.default.join(cwd, ".slicemachine", "libraries-state.json");
exports.LibrariesStatePath = LibrariesStatePath;
const PrismicConfig = (cwd) => path_1.default.join(cwd, ".prismic");
exports.PrismicConfig = PrismicConfig;
const SMConfig = (cwd) => path_1.default.join(cwd, "sm.json");
exports.SMConfig = SMConfig;
const SliceTemplateConfig = (cwd, customPathToTemplate) => customPathToTemplate
    ? path_1.default.join(cwd, customPathToTemplate)
    : path_1.default.join(exports.PrismicConfig(cwd), "slice-template");
exports.SliceTemplateConfig = SliceTemplateConfig;
const Pkg = (cwd) => path_1.default.join(cwd, "package.json");
exports.Pkg = Pkg;
const YarnLock = (cwd) => path_1.default.join(cwd, "yarn.lock");
exports.YarnLock = YarnLock;
const MocksConfig = (cwd) => path_1.default.join(cwd, ".slicemachine", "mock-config.json");
exports.MocksConfig = MocksConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9kZWxzL3BhdGhzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUVqQixNQUFNLEtBQUssR0FBRyxDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckQsS0FBSyxFQUFFLEdBQVcsRUFBRSxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztJQUMzQyxVQUFVLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0IsS0FBSyxFQUFFLEdBQVcsRUFBRSxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxRCxLQUFLLEVBQUUsR0FBVyxFQUFFLENBQ2xCLGNBQUksQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxDQUFDO1FBQ3pELElBQUksRUFBRSxHQUFXLEVBQUUsQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGFBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLFlBQVksQ0FBQztLQUM1RSxDQUFDO0lBQ0YsT0FBTyxFQUFFLENBQUMsV0FBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQyxLQUFLLEVBQUUsR0FBVyxFQUFFLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxhQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQztRQUN2RSxLQUFLLEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLEtBQUssRUFBRSxHQUFXLEVBQUUsQ0FDbEIs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