"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Widgets = __importStar(require("./misc/widgets"));
const str_1 = require("../utils/str");
const handlers_1 = require("./misc/handlers");
const createEmptyMock = (sliceName, variation) => ({
    variation: variation.id,
    name: variation.name,
    slice_type: str_1.snakelize(sliceName),
    items: [],
    primary: {},
});
function MockSlice(sliceName, model, mockConfig) {
    const variations = model.variations.map((variation) => {
        var _a;
        const mock = createEmptyMock(sliceName, variation);
        const handler = handlers_1.handleFields(Widgets);
        const maybeMockConfig = ((_a = mockConfig === null || mockConfig === void 0 ? void 0 : mockConfig[variation.id]) === null || _a === void 0 ? void 0 : _a.primary) || {};
        mock.primary = handler(variation.primary, maybeMockConfig);
        const items = [];
        const repeat = variation.items;
        if (!repeat || (repeat && repeat.length === 0)) {
            return {
                ...mock,
                items,
            };
        }
        for (let i = 0; i < Math.floor(Math.random() * 6) + 2; i++) {
            items.push(handler(repeat, mockConfig ? mockConfig.items || {} : {}));
        }
        mock.items = items;
        return mock;
    });
    return variations;
}
exports.default = MockSlice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9jay9TbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx3REFBMEM7QUFDMUMsc0NBQXlDO0FBQ3pDLDhDQUErQztBQUkvQyxNQUFNLGVBQWUsR0FBRyxDQUN0QixTQUFpQixFQUNqQixTQUFzQixFQUNBLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLFNBQVMsRUFBRSxTQUFTLENBQUMsRUFBRTtJQUN2QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7SUFDcEIsVUFBVSxFQUFFLGVBQVMsQ0FBQyxTQUFTLENBQUM7SUFDaEMsS0FBSyxFQUFFLEVBQUU7SUFDVCxPQUFPLEVBQUUsRUFBRTtDQUNaLENBQUMsQ0FBQztBQUVILFNBQXdCLFNBQVMsQ0FDL0IsU0FBaUIsRUFDakIsS0FBYyxFQUNkLFVBQW1FO0lBRW5FLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7O1FBQ3BELE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDbkQsTUFBTSxPQUFPLEdBRzBCLHVCQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0QsTUFBTSxlQUFlLEdBQUcsQ0FBQSxNQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLDBDQUFFLE9BQU8sS0FBSSxFQUFFLENBQUM7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUUzRCxNQUFNLEtBQUssR0FBa0MsRUFBRSxDQUFDO1FBRWhELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzlDLE9BQU87Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLEtBQUs7YUFDTixDQUFDO1NBQ0g7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFsQ0QsNEJBa0NDIn0=