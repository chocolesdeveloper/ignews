"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const slash_1 = __importDefault(require("slash"));
const core_1 = require("@slicemachine/core");
const common_1 = require("../../common");
const migration = {
    version: "0.0.41",
    main: async function main({ cwd, ignorePrompt }) {
        if (!ignorePrompt) {
            console.info("\nSliceMachine nows supports both default and custom previews (screenshots)!");
            console.info("Default screenshots are now stored in a special .slicemachine folder.");
            const doTheMigration = await common_1.shouldIRun("Would you like me to move current previews to .slicemachine folder?");
            if (!doTheMigration.yes)
                return;
        }
        const manifest = core_1.FileSystem.retrieveManifest(cwd);
        if (!manifest.exists || !manifest.content)
            return;
        try {
            fs_1.default.mkdirSync(path_1.default.join(cwd, ".slicemachine", "assets"), {
                recursive: true,
            });
            const { libraries } = manifest.content;
            if (!libraries)
                return;
            libraries.forEach((lib) => {
                const { isLocal, pathExists, pathToSlices } = core_1.Utils.lib.getInfoFromPath(cwd, lib);
                if (!(isLocal && pathExists))
                    return;
                const matches = glob_1.default.sync(`${slash_1.default(pathToSlices)}/**/preview.png`);
                matches.forEach((match) => {
                    const split = match.split(path_1.default.posix.sep);
                    const sliceName = split[split.length - 2];
                    if (sliceName) {
                        const pathToNewFile = path_1.default.join(cwd, ".slicemachine/assets", split[split.length - 3], sliceName, "preview.png");
                        fs_1.default.mkdirSync(path_1.default.dirname(pathToNewFile), {
                            recursive: true,
                        });
                        fs_1.default.renameSync(match, pathToNewFile);
                    }
                });
            });
        }
        catch (e) {
            console.log(e);
        }
    },
};
exports.default = migration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jaGFuZ2Vsb2cvdmVyc2lvbnMvMC4wLjQxL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUN4QixnREFBd0I7QUFDeEIsa0RBQTBCO0FBQzFCLDZDQUF1RDtBQUV2RCx5Q0FBMEM7QUFJMUMsTUFBTSxTQUFTLEdBQWM7SUFDM0IsT0FBTyxFQUFFLFFBQVE7SUFDakIsSUFBSSxFQUFFLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFO1FBQzdDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FDViw4RUFBOEUsQ0FDL0UsQ0FBQztZQUNGLE9BQU8sQ0FBQyxJQUFJLENBQ1YsdUVBQXVFLENBQ3hFLENBQUM7WUFFRixNQUFNLGNBQWMsR0FBRyxNQUFNLG1CQUFVLENBQ3JDLHFFQUFxRSxDQUN0RSxDQUFDO1lBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHO2dCQUFFLE9BQU87U0FDakM7UUFFRCxNQUFNLFFBQVEsR0FBRyxpQkFBVSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87WUFBRSxPQUFPO1FBRWxELElBQUk7WUFDRixZQUFFLENBQUMsU0FBUyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDdEQsU0FBUyxFQUFFLElBQUk7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDdkMsSUFBSSxDQUFDLFNBQVM7Z0JBQUUsT0FBTztZQUV2QixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ2hDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxHQUFHLFlBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUNyRSxHQUFHLEVBQ0gsR0FBRyxDQUNKLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQztvQkFBRSxPQUFPO2dCQUdyQyxNQUFNLE9BQU8sR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsZUFBSyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUduRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3hCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDMUMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBRTFDLElBQUksU0FBUyxFQUFFO3dCQUNiLE1BQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQzdCLEdBQUcsRUFDSCxzQkFBc0IsRUFDdEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQ3ZCLFNBQVMsRUFDVCxhQUFhLENBQ2QsQ0FBQzt3QkFHRixZQUFFLENBQUMsU0FBUyxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7NEJBQ3hDLFNBQVMsRUFBRSxJQUFJO3lCQUNoQixDQUFDLENBQUM7d0JBR0gsWUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7cUJBQ3JDO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoQjtJQUNILENBQUM7Q0FDRixDQUFDO0FBRUYsa0JBQWUsU0FBUyxDQUFDIn0=