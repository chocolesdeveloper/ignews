"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const core_1 = require("@slicemachine/core");
const scopePreviewToDefaultVariation_1 = require("./scopePreviewToDefaultVariation");
const moveMocks_1 = require("./moveMocks");
const moveStories_1 = require("./moveStories");
function migrateSlice(cwd, libraryName, sliceName) {
    scopePreviewToDefaultVariation_1.scopePreviewToDefaultVariation(cwd, libraryName, sliceName);
    moveMocks_1.moveMocks(cwd, libraryName, sliceName);
    moveStories_1.moveStories(cwd, libraryName, sliceName);
}
const migration = {
    version: "0.1.0",
    main: async function main({ cwd }) {
        const pathToOldMocks = path_1.default.join(cwd, ".slicemachine", "mocks.json");
        if (core_1.Utils.Files.exists(pathToOldMocks))
            core_1.Utils.Files.remove(pathToOldMocks);
        const manifest = core_1.FileSystem.retrieveManifest(cwd);
        if (manifest.exists && manifest.content) {
            const { libraries } = manifest.content;
            (libraries || []).forEach((lib) => {
                const { isLocal, pathExists, pathToSlices, pathToLib } = core_1.Utils.lib.getInfoFromPath(cwd, lib);
                if (isLocal && pathExists) {
                    const libraryName = path_1.default.basename(pathToLib);
                    const sliceNames = core_1.Utils.Files.readDirectory(slash_1.default(pathToSlices))
                        .map((curr) => path_1.default.join(pathToSlices, curr))
                        .filter((e) => fs_1.default.statSync(e).isDirectory())
                        .map((slicePath) => path_1.default.basename(slicePath));
                    sliceNames.forEach((sliceName) => {
                        migrateSlice(cwd, libraryName, sliceName);
                    });
                }
            });
        }
        console.info("\nSliceMachine nows supports variations!");
        console.info("Generated mocks and Stories are now stored in the .slicemachine folder.");
        return Promise.resolve();
    },
};
exports.default = migration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jaGFuZ2Vsb2cvdmVyc2lvbnMvMC4xLjAvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBQ3hCLGtEQUEwQjtBQUcxQiw2Q0FBdUQ7QUFFdkQscUZBQWtGO0FBQ2xGLDJDQUF3QztBQUN4QywrQ0FBNEM7QUFFNUMsU0FBUyxZQUFZLENBQUMsR0FBVyxFQUFFLFdBQW1CLEVBQUUsU0FBaUI7SUFDdkUsK0RBQThCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1RCxxQkFBUyxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkMseUJBQVcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFNBQVMsR0FBYztJQUMzQixPQUFPLEVBQUUsT0FBTztJQUNoQixJQUFJLEVBQUUsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRTtRQUUvQixNQUFNLGNBQWMsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckUsSUFBSSxZQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7WUFBRSxZQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUUzRSxNQUFNLFFBQVEsR0FBRyxpQkFBVSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxELElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3ZDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBRXZDLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO2dCQUN4QyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEdBQ3BELFlBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFFdEMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFO29CQUN6QixNQUFNLFdBQVcsR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM3QyxNQUFNLFVBQVUsR0FBRyxZQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxlQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQzlELEdBQUcsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7eUJBQ3BELE1BQU0sQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsWUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDbkQsR0FBRyxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUV4RCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFO3dCQUN2QyxZQUFZLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztvQkFDNUMsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxJQUFJLENBQ1YseUVBQXlFLENBQzFFLENBQUM7UUFHRixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLFNBQVMsQ0FBQyJ9