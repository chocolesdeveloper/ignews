"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const slash_1 = __importDefault(require("slash"));
const NodeUtils = __importStar(require("@slicemachine/core/build/node-utils"));
const Libraries = __importStar(require("@slicemachine/core/build/libraries"));
const prompts_1 = __importDefault(require("prompts"));
const migration = {
    version: "0.0.41",
    main: async function main({ cwd, ignorePromptForTest }) {
        console.info("\nSliceMachine now supports both default and custom previews (screenshots)!");
        console.info("Default screenshots are now stored in a special .slicemachine folder.");
        if (!ignorePromptForTest) {
            const doTheMigration = await shouldIRun("Would you like me to move current previews to .slicemachine folder?");
            if (!doTheMigration.yes)
                return;
        }
        const manifest = NodeUtils.retrieveManifest(cwd);
        if (!manifest.exists || !manifest.content)
            return;
        try {
            fs_1.default.mkdirSync(path_1.default.join(cwd, ".slicemachine", "assets"), {
                recursive: true,
            });
            const { libraries } = manifest.content;
            if (!libraries)
                return;
            libraries.forEach((lib) => {
                const { isLocal, pathExists, pathToSlices } = Libraries.getInfoFromPath(cwd, lib);
                if (!(isLocal && pathExists))
                    return;
                const matches = glob_1.default.sync(`${slash_1.default(pathToSlices)}/**/preview.png`);
                matches.forEach((match) => {
                    const split = match.split(path_1.default.posix.sep);
                    const sliceName = split[split.length - 2];
                    if (sliceName) {
                        const pathToNewFile = path_1.default.join(cwd, ".slicemachine/assets", split[split.length - 3], sliceName, "preview.png");
                        fs_1.default.mkdirSync(path_1.default.dirname(pathToNewFile), {
                            recursive: true,
                        });
                        fs_1.default.renameSync(match, pathToNewFile);
                    }
                });
            });
        }
        catch (e) {
            console.log(e);
        }
    },
};
function shouldIRun(message) {
    return prompts_1.default({
        type: "select",
        name: "yes",
        message,
        choices: [
            { title: "Yes", value: true },
            { title: "No (skip)", value: false },
        ],
        initial: 0,
    });
}
exports.default = migration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zY3JpcHRzL21pZ3JhdGlvbi92ZXJzaW9ucy8wLjAuNDEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUN4QixnREFBd0I7QUFDeEIsa0RBQTBCO0FBQzFCLCtFQUFpRTtBQUNqRSw4RUFBZ0U7QUFFaEUsc0RBQThCO0FBRzlCLE1BQU0sU0FBUyxHQUFjO0lBQzNCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLElBQUksRUFBRSxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixFQUFFO1FBQ3BELE9BQU8sQ0FBQyxJQUFJLENBQ1YsNkVBQTZFLENBQzlFLENBQUM7UUFDRixPQUFPLENBQUMsSUFBSSxDQUNWLHVFQUF1RSxDQUN4RSxDQUFDO1FBRUYsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQ3hCLE1BQU0sY0FBYyxHQUFHLE1BQU0sVUFBVSxDQUNyQyxxRUFBcUUsQ0FDdEUsQ0FBQztZQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRztnQkFBRSxPQUFPO1NBQ2pDO1FBRUQsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87WUFBRSxPQUFPO1FBRWxELElBQUk7WUFDRixZQUFFLENBQUMsU0FBUyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDdEQsU0FBUyxFQUFFLElBQUk7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDdkMsSUFBSSxDQUFDLFNBQVM7Z0JBQUUsT0FBTztZQUN2QixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7Z0JBQ2hDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQ3JFLEdBQUcsRUFDSCxHQUFHLENBQ0osQ0FBQztnQkFDRixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDO29CQUFFLE9BQU87Z0JBR3JDLE1BQU0sT0FBTyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFLLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUM7Z0JBR25FLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDeEIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxjQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUMxQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFFMUMsSUFBSSxTQUFTLEVBQUU7d0JBQ2IsTUFBTSxhQUFhLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FDN0IsR0FBRyxFQUNILHNCQUFzQixFQUN0QixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFDdkIsU0FBUyxFQUNULGFBQWEsQ0FDZCxDQUFDO3dCQUdGLFlBQUUsQ0FBQyxTQUFTLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTs0QkFDeEMsU0FBUyxFQUFFLElBQUk7eUJBQ2hCLENBQUMsQ0FBQzt3QkFHSCxZQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDckM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztDQUNGLENBQUM7QUFFRixTQUFTLFVBQVUsQ0FBQyxPQUFlO0lBQ2pDLE9BQU8saUJBQU8sQ0FBQztRQUNiLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLEtBQUs7UUFDWCxPQUFPO1FBQ1AsT0FBTyxFQUFFO1lBQ1AsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDN0IsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7U0FDckM7UUFDRCxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxrQkFBZSxTQUFTLENBQUMifQ==