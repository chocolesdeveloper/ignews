"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const Libraries = __importStar(require("@slicemachine/core/build/libraries"));
const NodeUtils = __importStar(require("@slicemachine/core/build/node-utils"));
const scopePreviewToDefaultVariation_1 = require("./scopePreviewToDefaultVariation");
const moveMocks_1 = require("./moveMocks");
const moveStories_1 = require("./moveStories");
function migrateSlice(cwd, libraryName, sliceName) {
    scopePreviewToDefaultVariation_1.scopePreviewToDefaultVariation(cwd, libraryName, sliceName);
    moveMocks_1.moveMocks(cwd, libraryName, sliceName);
    moveStories_1.moveStories(cwd, libraryName, sliceName);
}
const migration = {
    version: "0.1.0",
    main: async function main({ cwd }) {
        const pathToOldMocks = path_1.default.join(cwd, ".slicemachine", "mocks.json");
        if (NodeUtils.Files.exists(pathToOldMocks))
            NodeUtils.Files.remove(pathToOldMocks);
        const manifest = NodeUtils.retrieveManifest(cwd);
        if (manifest.exists && manifest.content) {
            const { libraries } = manifest.content;
            (libraries || []).forEach((lib) => {
                const { isLocal, pathExists, pathToSlices, pathToLib } = Libraries.getInfoFromPath(cwd, lib);
                if (isLocal && pathExists) {
                    const libraryName = path_1.default.basename(pathToLib);
                    const sliceNames = NodeUtils.Files.readDirectory(slash_1.default(pathToSlices))
                        .map((curr) => path_1.default.join(pathToSlices, curr))
                        .filter((e) => fs_1.default.statSync(e).isDirectory())
                        .map((slicePath) => path_1.default.basename(slicePath));
                    sliceNames.forEach((sliceName) => {
                        migrateSlice(cwd, libraryName, sliceName);
                    });
                }
            });
        }
        console.info("\nSliceMachine now supports variations!");
        console.info("Generated mocks and Stories are now stored in the .slicemachine folder.");
        return Promise.resolve();
    },
};
exports.default = migration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zY3JpcHRzL21pZ3JhdGlvbi92ZXJzaW9ucy8wLjEuMC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBQ3hCLGtEQUEwQjtBQUcxQiw4RUFBZ0U7QUFDaEUsK0VBQWlFO0FBQ2pFLHFGQUFrRjtBQUNsRiwyQ0FBd0M7QUFDeEMsK0NBQTRDO0FBRTVDLFNBQVMsWUFBWSxDQUFDLEdBQVcsRUFBRSxXQUFtQixFQUFFLFNBQWlCO0lBQ3ZFLCtEQUE4QixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUQscUJBQVMsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLHlCQUFXLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxTQUFTLEdBQWM7SUFDM0IsT0FBTyxFQUFFLE9BQU87SUFDaEIsSUFBSSxFQUFFLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUU7UUFFL0IsTUFBTSxjQUFjLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3JFLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1lBQ3hDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN2QyxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUV2QyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTtnQkFDeEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxHQUNwRCxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFFdEMsSUFBSSxPQUFPLElBQUksVUFBVSxFQUFFO29CQUN6QixNQUFNLFdBQVcsR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM3QyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxlQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQ2xFLEdBQUcsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7eUJBQ3BELE1BQU0sQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsWUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzt5QkFDbkQsR0FBRyxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFLENBQUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUV4RCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBaUIsRUFBRSxFQUFFO3dCQUN2QyxZQUFZLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztvQkFDNUMsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQ1YseUVBQXlFLENBQzFFLENBQUM7UUFHRixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQztBQUVGLGtCQUFlLFNBQVMsQ0FBQyJ9