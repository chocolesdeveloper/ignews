"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveMocks = void 0;
const NodeUtils = __importStar(require("@slicemachine/core/build/node-utils"));
function moveMocks(cwd, libraryName, sliceName) {
    const customMocksPath = NodeUtils.CustomPaths(cwd)
        .library(libraryName)
        .slice(sliceName)
        .mocks();
    const customMocks = NodeUtils.Files.exists(customMocksPath) &&
        NodeUtils.Files.readString(customMocksPath);
    if (!customMocks)
        return;
    const generatedMocksPath = NodeUtils.GeneratedPaths(cwd)
        .library(libraryName)
        .slice(sliceName)
        .mocks();
    NodeUtils.Files.write(generatedMocksPath, customMocks);
    NodeUtils.Files.remove(customMocksPath);
}
exports.moveMocks = moveMocks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZU1vY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc2NyaXB0cy9taWdyYXRpb24vdmVyc2lvbnMvMC4xLjAvbW92ZU1vY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrRUFBaUU7QUFFakUsU0FBZ0IsU0FBUyxDQUFDLEdBQVcsRUFBRSxXQUFtQixFQUFFLFNBQWlCO0lBQzNFLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO1NBQy9DLE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDcEIsS0FBSyxDQUFDLFNBQVMsQ0FBQztTQUNoQixLQUFLLEVBQUUsQ0FBQztJQUVYLE1BQU0sV0FBVyxHQUNmLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztRQUN2QyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsV0FBVztRQUFFLE9BQU87SUFFekIsTUFBTSxrQkFBa0IsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQztTQUNyRCxPQUFPLENBQUMsV0FBVyxDQUFDO1NBQ3BCLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDaEIsS0FBSyxFQUFFLENBQUM7SUFHWCxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUd2RCxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBckJELDhCQXFCQyJ9